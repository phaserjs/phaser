{
    "project": {},
    "files": {
        "animation\\Animation.js": {
            "name": "animation\\Animation.js",
            "modules": {},
            "classes": {
                "Phaser.Animation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "animation\\AnimationManager.js": {
            "name": "animation\\AnimationManager.js",
            "modules": {},
            "classes": {
                "AnimationManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "animation\\Frame.js": {
            "name": "animation\\Frame.js",
            "modules": {},
            "classes": {
                "Frame": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "animation\\FrameData.js": {
            "name": "animation\\FrameData.js",
            "modules": {
                "Phaser.Animation.FrameData": 1
            },
            "classes": {
                "FrameData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "animation\\Parser.js": {
            "name": "animation\\Parser.js",
            "modules": {
                "Phaser.Animation": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\Camera.js": {
            "name": "core\\Camera.js",
            "modules": {
                "Phaser.Camera": 1
            },
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core\\Game.js": {
            "name": "core\\Game.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\Group.js": {
            "name": "core\\Group.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\Plugin.js": {
            "name": "core\\Plugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\PluginManager.js": {
            "name": "core\\PluginManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\Signal.js": {
            "name": "core\\Signal.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\SignalBinding.js": {
            "name": "core\\SignalBinding.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\Stage.js": {
            "name": "core\\Stage.js",
            "modules": {
                "Phaser.Stage": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\State.js": {
            "name": "core\\State.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\StateManager.js": {
            "name": "core\\StateManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core\\World.js": {
            "name": "core\\World.js",
            "modules": {
                "Phaser.World": 1
            },
            "classes": {
                "World": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\BitmapText.js": {
            "name": "gameobjects\\BitmapText.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\Bullet.js": {
            "name": "gameobjects\\Bullet.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\Button.js": {
            "name": "gameobjects\\Button.js",
            "modules": {
                "Phaser.Button": 1
            },
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\Events.js": {
            "name": "gameobjects\\Events.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\GameObjectFactory.js": {
            "name": "gameobjects\\GameObjectFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\Graphics.js": {
            "name": "gameobjects\\Graphics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\Sprite.js": {
            "name": "gameobjects\\Sprite.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "gameobjects\\TileSprite.js": {
            "name": "gameobjects\\TileSprite.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "geom\\Circle.js": {
            "name": "geom\\Circle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "geom\\Point.js": {
            "name": "geom\\Point.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "geom\\Rectangle.js": {
            "name": "geom\\Rectangle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\Input.js": {
            "name": "input\\Input.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\InputHandler.js": {
            "name": "input\\InputHandler.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\Keyboard.js": {
            "name": "input\\Keyboard.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\MSPointer.js": {
            "name": "input\\MSPointer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\Mouse.js": {
            "name": "input\\Mouse.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\Pointer.js": {
            "name": "input\\Pointer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "input\\Touch.js": {
            "name": "input\\Touch.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "loader\\Cache.js": {
            "name": "loader\\Cache.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "loader\\Loader.js": {
            "name": "loader\\Loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "loader\\Parser.js": {
            "name": "loader\\Parser.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "math\\Math.js": {
            "name": "math\\Math.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "math\\RandomDataGenerator.js": {
            "name": "math\\RandomDataGenerator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "net\\Net.js": {
            "name": "net\\Net.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "particles\\arcade\\Emitter.js": {
            "name": "particles\\arcade\\Emitter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "physics\\arcade\\ArcadePhysics.js": {
            "name": "physics\\arcade\\ArcadePhysics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "physics\\arcade\\Body.js": {
            "name": "physics\\arcade\\Body.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\core\\Circle.js": {
            "name": "pixi\\core\\Circle.js",
            "modules": {},
            "classes": {
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\core\\Ellipse.js": {
            "name": "pixi\\core\\Ellipse.js",
            "modules": {},
            "classes": {
                "Ellipse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\core\\Point.js": {
            "name": "pixi\\core\\Point.js",
            "modules": {},
            "classes": {
                "Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\core\\Polygon.js": {
            "name": "pixi\\core\\Polygon.js",
            "modules": {},
            "classes": {
                "Polygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\core\\Rectangle.js": {
            "name": "pixi\\core\\Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\display\\DisplayObject.js": {
            "name": "pixi\\display\\DisplayObject.js",
            "modules": {},
            "classes": {
                "DisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\display\\DisplayObjectContainer.js": {
            "name": "pixi\\display\\DisplayObjectContainer.js",
            "modules": {},
            "classes": {
                "DisplayObjectContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\display\\MovieClip.js": {
            "name": "pixi\\display\\MovieClip.js",
            "modules": {},
            "classes": {
                "MovieClip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\display\\Sprite.js": {
            "name": "pixi\\display\\Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\display\\Stage.js": {
            "name": "pixi\\display\\Stage.js",
            "modules": {},
            "classes": {
                "Stage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\extras\\CustomRenderable.js": {
            "name": "pixi\\extras\\CustomRenderable.js",
            "modules": {},
            "classes": {
                "CustomRenderable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\extras\\Rope.js": {
            "name": "pixi\\extras\\Rope.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\extras\\Spine.js": {
            "name": "pixi\\extras\\Spine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\extras\\Strip.js": {
            "name": "pixi\\extras\\Strip.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\extras\\TilingSprite.js": {
            "name": "pixi\\extras\\TilingSprite.js",
            "modules": {},
            "classes": {
                "TilingSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\filters\\FilterBlock.js": {
            "name": "pixi\\filters\\FilterBlock.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\filters\\MaskFilter.js": {
            "name": "pixi\\filters\\MaskFilter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\loaders\\AssetLoader.js": {
            "name": "pixi\\loaders\\AssetLoader.js",
            "modules": {},
            "classes": {
                "AssetLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\loaders\\BitmapFontLoader.js": {
            "name": "pixi\\loaders\\BitmapFontLoader.js",
            "modules": {},
            "classes": {
                "BitmapFontLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\loaders\\ImageLoader.js": {
            "name": "pixi\\loaders\\ImageLoader.js",
            "modules": {},
            "classes": {
                "ImageLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\loaders\\JsonLoader.js": {
            "name": "pixi\\loaders\\JsonLoader.js",
            "modules": {},
            "classes": {
                "JsonLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\loaders\\SpineLoader.js": {
            "name": "pixi\\loaders\\SpineLoader.js",
            "modules": {},
            "classes": {
                "Spine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\loaders\\SpriteSheetLoader.js": {
            "name": "pixi\\loaders\\SpriteSheetLoader.js",
            "modules": {},
            "classes": {
                "SpriteSheetLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\primitives\\Graphics.js": {
            "name": "pixi\\primitives\\Graphics.js",
            "modules": {},
            "classes": {
                "Graphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\canvas\\CanvasGraphics.js": {
            "name": "pixi\\renderers\\canvas\\CanvasGraphics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\canvas\\CanvasRenderer.js": {
            "name": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "modules": {},
            "classes": {
                "CanvasRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\webgl\\WebGLBatch.js": {
            "name": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\webgl\\WebGLGraphics.js": {
            "name": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "modules": {},
            "classes": {
                "CanvasGraphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\webgl\\WebGLRenderGroup.js": {
            "name": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "modules": {},
            "classes": {
                "WebGLBatch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\webgl\\WebGLRenderer.js": {
            "name": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "modules": {},
            "classes": {
                "WebGLRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\renderers\\webgl\\WebGLShaders.js": {
            "name": "pixi\\renderers\\webgl\\WebGLShaders.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\text\\BitmapText.js": {
            "name": "pixi\\text\\BitmapText.js",
            "modules": {},
            "classes": {
                "BitmapText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\text\\Text.js": {
            "name": "pixi\\text\\Text.js",
            "modules": {},
            "classes": {
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\textures\\BaseTexture.js": {
            "name": "pixi\\textures\\BaseTexture.js",
            "modules": {},
            "classes": {
                "BaseTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\textures\\RenderTexture.js": {
            "name": "pixi\\textures\\RenderTexture.js",
            "modules": {},
            "classes": {
                "RenderTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\textures\\Texture.js": {
            "name": "pixi\\textures\\Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\utils\\Detector.js": {
            "name": "pixi\\utils\\Detector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\utils\\EventTarget.js": {
            "name": "pixi\\utils\\EventTarget.js",
            "modules": {},
            "classes": {
                "EventTarget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\utils\\Polyk.js": {
            "name": "pixi\\utils\\Polyk.js",
            "modules": {},
            "classes": {
                "PolyK._PointInTriangle": 1,
                "PolyK._convex": 1
            },
            "fors": {},
            "namespaces": {
                "PolyK": 1
            }
        },
        "pixi\\utils\\Utils.js": {
            "name": "pixi\\utils\\Utils.js",
            "modules": {},
            "classes": {
                "PolyK.AjaxRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\InteractionManager.js": {
            "name": "pixi\\InteractionManager.js",
            "modules": {},
            "classes": {
                "PolyK.InteractionManager": 1,
                "PolyK.InteractionData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pixi\\Intro.js": {
            "name": "pixi\\Intro.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\Outro.js": {
            "name": "pixi\\Outro.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pixi\\Pixi.js": {
            "name": "pixi\\Pixi.js",
            "modules": {
                "PIXI": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sound\\Sound.js": {
            "name": "sound\\Sound.js",
            "modules": {},
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sound\\SoundManager.js": {
            "name": "sound\\SoundManager.js",
            "modules": {},
            "classes": {
                "SoundManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "system\\Canvas.js": {
            "name": "system\\Canvas.js",
            "modules": {
                "Phaser.Canvas": 1
            },
            "classes": {
                "Canvas": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "system\\Device.js": {
            "name": "system\\Device.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "system\\RequestAnimationFrame.js": {
            "name": "system\\RequestAnimationFrame.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "system\\StageScaleMode.js": {
            "name": "system\\StageScaleMode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tilemap\\Tile.js": {
            "name": "tilemap\\Tile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tilemap\\Tilemap.js": {
            "name": "tilemap\\Tilemap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tilemap\\TilemapLayer.js": {
            "name": "tilemap\\TilemapLayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tilemap\\TilemapRenderer.js": {
            "name": "tilemap\\TilemapRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "time\\Time.js": {
            "name": "time\\Time.js",
            "modules": {
                "Phaser.Time": 1
            },
            "classes": {
                "Time": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tween\\Tween.js": {
            "name": "tween\\Tween.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tween\\TweenManager.js": {
            "name": "tween\\TweenManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils\\Color.js": {
            "name": "utils\\Color.js",
            "modules": {},
            "classes": {
                "Color": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils\\Debug.js": {
            "name": "utils\\Debug.js",
            "modules": {},
            "classes": {
                "DebugUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils\\Utils.js": {
            "name": "utils\\Utils.js",
            "modules": {
                "Phaser.Utils": 1
            },
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Intro.js": {
            "name": "Intro.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Phaser.js": {
            "name": "Phaser.js",
            "modules": {
                "Phaser": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Phaser.Animation": {
            "name": "Phaser.Animation",
            "submodules": {},
            "classes": {
                "Phaser.Animation": 1,
                "AnimationManager": 1,
                "Frame": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "animation\\Frame.js",
            "line": 8,
            "description": "Responsible for parsing sprite sheet and JSON data into the internal FrameData format that Phaser uses for animations.",
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.Animation.FrameData": {
            "name": "Phaser.Animation.FrameData",
            "submodules": {},
            "classes": {
                "FrameData": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "animation\\FrameData.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.Camera": {
            "name": "Phaser.Camera",
            "submodules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "core\\Camera.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.Stage": {
            "name": "Phaser.Stage",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "core\\Stage.js",
            "line": 1,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.World": {
            "name": "Phaser.World",
            "submodules": {},
            "classes": {
                "World": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "core\\World.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.Button": {
            "name": "Phaser.Button",
            "submodules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gameobjects\\Button.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser": {
            "name": "Phaser",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "Color": 1,
                "Stage": 1,
                "Circle": 1,
                "Point": 1,
                "Rectangle": 1,
                "Ellipse": 1,
                "Polygon": 1,
                "DisplayObject": 1,
                "DisplayObjectContainer": 1,
                "MovieClip": 1,
                "Sprite": 1,
                "CustomRenderable": 1,
                "Spine": 1,
                "TilingSprite": 1,
                "AssetLoader": 1,
                "BitmapFontLoader": 1,
                "ImageLoader": 1,
                "JsonLoader": 1,
                "SpriteSheetLoader": 1,
                "Graphics": 1,
                "CanvasGraphics": 1,
                "CanvasRenderer": 1,
                "WebGLBatch": 1,
                "WebGLRenderer": 1,
                "BitmapText": 1,
                "Text": 1,
                "BaseTexture": 1,
                "RenderTexture": 1,
                "Texture": 1,
                "EventTarget": 1,
                "PolyK._PointInTriangle": 1,
                "PolyK._convex": 1,
                "PolyK.AjaxRequest": 1,
                "PolyK.InteractionManager": 1,
                "PolyK.InteractionData": 1,
                "DebugUtils": 1
            },
            "fors": {},
            "namespaces": {
                "PolyK": 1
            },
            "tag": "module",
            "file": "utils\\Debug.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "PIXI": {
            "name": "PIXI",
            "submodules": {},
            "classes": {
                "Sound": 1,
                "SoundManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "sound\\SoundManager.js",
            "line": 1
        },
        "Phaser.Canvas": {
            "name": "Phaser.Canvas",
            "submodules": {},
            "classes": {
                "Canvas": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "system\\Canvas.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.Time": {
            "name": "Phaser.Time",
            "submodules": {},
            "classes": {
                "Time": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "time\\Time.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "Phaser.Utils": {
            "name": "Phaser.Utils",
            "submodules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils\\Utils.js",
            "line": 8,
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        }
    },
    "classes": {
        "Phaser.Animation": {
            "name": "Phaser.Animation",
            "shortname": "Phaser.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Animation",
            "namespace": "",
            "file": "animation\\Animation.js",
            "line": 8,
            "description": "An Animation instance contains a single animation and the controls to play it.\nIt is created by the AnimationManager, consists of Animation.Frame objects and belongs to a single Game Object such as a Sprite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- A reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "parent",
                    "description": "- A reference to the owner of this Animation.",
                    "type": "Phaser.Sprite"
                },
                {
                    "name": "name",
                    "description": "- The unique name for this animation, used in playback commands.",
                    "type": "String"
                },
                {
                    "name": "frameData",
                    "description": "- The FrameData object that contains all frames used by this Animation.",
                    "type": "Phaser.Animation.FrameData"
                },
                {
                    "name": "frames",
                    "description": "- An array of numbers or strings indicating which frames to play in which order.",
                    "type": "(Array.<number>|Array.<string>)"
                },
                {
                    "name": "delay",
                    "description": "- The time between each frame of the animation, given in ms.",
                    "type": "Number"
                },
                {
                    "name": "looped",
                    "description": "- Should this animation loop or play through once.",
                    "type": "Boolean"
                }
            ]
        },
        "AnimationManager": {
            "name": "AnimationManager",
            "shortname": "AnimationManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Animation",
            "namespace": "",
            "file": "animation\\AnimationManager.js",
            "line": 8,
            "description": "The AnimationManager is used to add, play and update Phaser Animations.\nAny Game Object such as Phaser.Sprite that supports animation contains a single AnimationManager instance.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "sprite",
                    "description": "A reference to the Game Object that owns this AnimationManager.",
                    "type": "Phaser.Sprite"
                }
            ]
        },
        "Frame": {
            "name": "Frame",
            "shortname": "Frame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Animation",
            "namespace": "",
            "file": "animation\\Frame.js",
            "line": 8,
            "description": "A Frame is a single frame of an animation and is part of a FrameData collection.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The index of this Frame within the FrameData set it is being added to.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "X position of the frame within the texture image.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the frame within the texture image.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of the frame within the texture image.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the frame within the texture image.",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "The name of the frame. In Texture Atlas data this is usually set to the filename.",
                    "type": "String"
                },
                {
                    "name": "uuid",
                    "description": "Internal UUID key.",
                    "type": "String"
                }
            ]
        },
        "FrameData": {
            "name": "FrameData",
            "shortname": "FrameData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Animation.FrameData",
            "namespace": "",
            "file": "animation\\FrameData.js",
            "line": 8,
            "description": "FrameData is a container for Frame objects, which are the internal representation of animation data in Phaser.",
            "is_constructor": 1
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Camera",
            "namespace": "",
            "file": "core\\Camera.js",
            "line": 8,
            "description": "A Camera is your view into the game world. It has a position and size and renders only those objects within its field of view.\n The game automatically creates a single Stage sized camera on boot. Move the camera around the world with Phaser.Camera.x/y",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "game reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "id",
                    "description": "not being used at the moment, will be when Phaser supports multiple camera",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "position of the camera on the X axis",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "position of the camera on the Y axis",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width of the view rectangle",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the view rectangle",
                    "type": "Number"
                }
            ]
        },
        "Stage": {
            "name": "Stage",
            "shortname": "Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\display\\Stage.js",
            "line": 5,
            "description": "A Stage represents the root of the display tree. Everything connected to the stage is rendered",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Game reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "width",
                    "description": "Width of the canvas element",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the canvas element",
                    "type": "Number"
                }
            ],
            "extends": "DisplayObjectContainer"
        },
        "World": {
            "name": "World",
            "shortname": "World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.World",
            "namespace": "",
            "file": "core\\World.js",
            "line": 8,
            "description": "\"This world is but a canvas to our imagination.\" - Henry David Thoreau\nA game has only one world. The world is an abstract place in which all game objects live. It is not bound\n by stage limits and can be any size. You look into the world via cameras. All game objects live within\n the world at world-based coordinates. By default a world is created the same size as your Stage.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Reference to the current game instance.",
                    "type": "Phaser.Game"
                }
            ]
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Button",
            "namespace": "",
            "file": "gameobjects\\Button.js",
            "line": 8,
            "description": "Create a new <code>Button</code> object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Current game instance.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "x",
                    "description": "X position of the button.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "Y position of the button.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "key",
                    "description": "The image key as defined in the Game.Cache to use as the texture for this button.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when this button is pressed",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "callbackContext",
                    "description": "The context in which the callback will be called (usually 'this')",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "overFrame",
                    "description": "This is the frame or frameName that will be set when this button is in an over state. Give either a number to use a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                },
                {
                    "name": "outFrame",
                    "description": "This is the frame or frameName that will be set when this button is in an out state. Give either a number to use a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                },
                {
                    "name": "downFrame",
                    "description": "This is the frame or frameName that will be set when this button is in a down state. Give either a number to use a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                }
            ]
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\core\\Circle.js",
            "line": 5,
            "description": "The Circle object can be used to specify a hit area for displayobjects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the center of the circle.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the center of the circle.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "diameter",
                    "description": "The diameter of the circle.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "This circle object",
                "type": "Circle"
            }
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\core\\Point.js",
            "line": 5,
            "description": "The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal position of this Point (default 0)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The vertical position of this Point (default 0)",
                    "type": "Number"
                }
            ]
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\core\\Rectangle.js",
            "line": 5,
            "description": "the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the top-left corner of the Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the top-left corner of the Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the Rectangle in pixels.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the Rectangle in pixels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Rectangle object",
                "type": "Rectangle"
            }
        },
        "Ellipse": {
            "name": "Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\core\\Ellipse.js",
            "line": 5,
            "description": "The Ellipse object can be used to specify a hit area for displayobjects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall height of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall width of this ellipse",
                    "type": "Number"
                }
            ]
        },
        "Polygon": {
            "name": "Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\core\\Polygon.js",
            "line": 5,
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "This can be an array of Points that form the polygon,\n     a flat array of numbers that will be interpreted as [x,y, x,y, ...], or the arugments passed can be\n     all the points of the polygon e.g. `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the\n     arguments passed can be flat x,y values e.g. `new PIXI.Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are\n     Numbers.",
                    "type": "Array<Point>|Array<Number>|Point...|Number...",
                    "multiple": true
                }
            ]
        },
        "DisplayObject": {
            "name": "DisplayObject",
            "shortname": "DisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\display\\DisplayObject.js",
            "line": 5,
            "description": "The base class for all objects that are rendered on the screen.",
            "is_constructor": 1
        },
        "DisplayObjectContainer": {
            "name": "DisplayObjectContainer",
            "shortname": "DisplayObjectContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 6,
            "description": "A DisplayObjectContainer represents a collection of display objects.\nIt is the base class of all display objects that act as a container for other objects.",
            "extends": "DisplayObject",
            "is_constructor": 1
        },
        "MovieClip": {
            "name": "MovieClip",
            "shortname": "MovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\display\\MovieClip.js",
            "line": 5,
            "description": "A MovieClip is a simple way to display an animation depicted by a list of textures.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "textures",
                    "description": "an array of {Texture} objects that make up the animation",
                    "type": "Array<Texture>"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\display\\Sprite.js",
            "line": 10,
            "description": "The SPrite object is the base for all textured objects that are rendered to the screen",
            "extends": "DisplayObjectContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture for this sprite",
                    "type": "Texture"
                }
            ],
            "type": "String"
        },
        "CustomRenderable": {
            "name": "CustomRenderable",
            "shortname": "CustomRenderable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\extras\\CustomRenderable.js",
            "line": 6,
            "description": "This object is one that will allow you to specify custom rendering functions based on render type",
            "extends": "DisplayObject",
            "is_constructor": 1
        },
        "Spine": {
            "name": "Spine",
            "shortname": "Spine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 10,
            "description": "The Spine loader is used to load in JSON spine data\nTo generate the data you need to use http://esotericsoftware.com/ and export the \"JSON\" format\nDue to a clash of names  You will need to change the extension of the spine file from *.json to *.anim for it to load\nSee example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\nYou will need to generate a sprite sheet to accompany the spine data \nWhen loaded this class will dispatch a \"loaded\" event",
            "extends": "DisplayObjectContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The url of the spine anim file to be used",
                    "type": "String"
                }
            ],
            "uses": [
                "EventTarget"
            ]
        },
        "TilingSprite": {
            "name": "TilingSprite",
            "shortname": "TilingSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 5,
            "description": "A tiling sprite is a fast way of rendering a tiling image",
            "extends": "DisplayObjectContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "the texture of the tiling sprite",
                    "type": "Texture"
                },
                {
                    "name": "width",
                    "description": "the width of the tiling sprite",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the tiling sprite",
                    "type": "Number"
                }
            ]
        },
        "AssetLoader": {
            "name": "AssetLoader",
            "shortname": "AssetLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 5,
            "description": "A Class that loads a bunch of images / sprite sheet / bitmap font files. Once the\nassets have been loaded they are added to the PIXI Texture cache and can be accessed\neasily through PIXI.Texture.fromImage() and PIXI.Sprite.fromImage()\nWhen all items have been loaded this class will dispatch a \"onLoaded\" event\nAs each individual item is loaded this class will dispatch a \"onProgress\" event",
            "is_constructor": 1,
            "uses": [
                "EventTarget"
            ],
            "params": [
                {
                    "name": "assetURLs",
                    "description": "an array of image/sprite sheet urls that you would like loaded\n     supported. Supported image formats include \"jpeg\", \"jpg\", \"png\", \"gif\". Supported\n     sprite sheet data formats only include \"JSON\" at this time. Supported bitmap font\n     data formats include \"xml\" and \"fnt\".",
                    "type": "Array<String>"
                },
                {
                    "name": "crossorigin",
                    "description": "Whether requests should be treated as crossorigin",
                    "type": "Boolean"
                }
            ]
        },
        "BitmapFontLoader": {
            "name": "BitmapFontLoader",
            "shortname": "BitmapFontLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 5,
            "description": "The xml loader is used to load in XML bitmap font data (\"xml\" or \"fnt\")\nTo generate the data you can use http://www.angelcode.com/products/bmfont/\nThis loader will also load the image file as the data.\nWhen loaded this class will dispatch a \"loaded\" event",
            "uses": [
                "EventTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The url of the sprite sheet JSON file",
                    "type": "String"
                },
                {
                    "name": "crossorigin",
                    "description": "Whether requests should be treated as crossorigin",
                    "type": "Boolean"
                }
            ]
        },
        "ImageLoader": {
            "name": "ImageLoader",
            "shortname": "ImageLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\loaders\\ImageLoader.js",
            "line": 5,
            "description": "The image loader class is responsible for loading images file formats (\"jpeg\", \"jpg\", \"png\" and \"gif\")\nOnce the image has been loaded it is stored in the PIXI texture cache and can be accessed though PIXI.Texture.fromFrameId() and PIXI.Sprite.fromFromeId()\nWhen loaded this class will dispatch a 'loaded' event",
            "uses": [
                "EventTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The url of the image",
                    "type": "String"
                },
                {
                    "name": "crossorigin",
                    "description": "Whether requests should be treated as crossorigin",
                    "type": "Boolean"
                }
            ]
        },
        "JsonLoader": {
            "name": "JsonLoader",
            "shortname": "JsonLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 5,
            "description": "The json file loader is used to load in JSON data and parsing it\nWhen loaded this class will dispatch a \"loaded\" event\nIf load failed this class will dispatch a \"error\" event",
            "uses": [
                "EventTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The url of the JSON file",
                    "type": "String"
                },
                {
                    "name": "crossorigin",
                    "description": "Whether requests should be treated as crossorigin",
                    "type": "Boolean"
                }
            ]
        },
        "SpriteSheetLoader": {
            "name": "SpriteSheetLoader",
            "shortname": "SpriteSheetLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 5,
            "description": "The sprite sheet loader is used to load in JSON sprite sheet data\nTo generate the data you can use http://www.codeandweb.com/texturepacker and publish the \"JSON\" format\nThere is a free version so thats nice, although the paid version is great value for money.\nIt is highly recommended to use Sprite sheets (also know as texture atlas\") as it means sprite\"s can be batched and drawn together for highly increased rendering speed.\nOnce the data has been loaded the frames are stored in the PIXI texture cache and can be accessed though PIXI.Texture.fromFrameId() and PIXI.Sprite.fromFromeId()\nThis loader will also load the image file that the Spritesheet points to as well as the data.\nWhen loaded this class will dispatch a \"loaded\" event",
            "uses": [
                "EventTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The url of the sprite sheet JSON file",
                    "type": "String"
                },
                {
                    "name": "crossorigin",
                    "description": "Whether requests should be treated as crossorigin",
                    "type": "Boolean"
                }
            ]
        },
        "Graphics": {
            "name": "Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\primitives\\Graphics.js",
            "line": 6,
            "description": "The Graphics class contains a set of methods that you can use to create primitive shapes and lines. \nIt is important to know that with the webGL renderer only simple polys can be filled at this stage\nComplex polys will not be filled. Heres an example of a complex poly: http://www.goodboydigital.com/wp-content/uploads/2013/06/complexPolygon.png",
            "extends": "DisplayObjectContainer",
            "is_constructor": 1
        },
        "CanvasGraphics": {
            "name": "CanvasGraphics",
            "shortname": "CanvasGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 5,
            "description": "A set of functions used by the webGL renderer to draw the primitive graphics data"
        },
        "CanvasRenderer": {
            "name": "CanvasRenderer",
            "shortname": "CanvasRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 6,
            "description": "the CanvasRenderer draws the stage and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.\nDont forget to add the view to your DOM or you will not see anything :)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width=0",
                    "description": "the width of the canvas view",
                    "type": "Number"
                },
                {
                    "name": "height=0",
                    "description": "the height of the canvas view",
                    "type": "Number"
                },
                {
                    "name": "view",
                    "description": "the canvas to use as a view, optional",
                    "type": "Canvas"
                },
                {
                    "name": "transparent=false",
                    "description": "the transparency of the render view, default false",
                    "type": "Boolean"
                }
            ]
        },
        "WebGLBatch": {
            "name": "WebGLBatch",
            "shortname": "WebGLBatch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 5,
            "description": "A WebGLBatch Enables a group of sprites to be drawn using the same settings.\nif a group of sprites all have the same baseTexture and blendMode then they can be\ngrouped into a batch. All the sprites in a batch can then be drawn in one go by the\nGPU which is hugely efficient. ALL sprites in the webGL renderer are added to a batch\neven if the batch only contains one sprite. Batching is handled automatically by the\nwebGL renderer. A good tip is: the smaller the number of batchs there are, the faster\nthe webGL renderer will run.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "gl",
                    "description": "an instance of the webGL context",
                    "type": "WebGLContext"
                }
            ],
            "contructor": ""
        },
        "WebGLRenderer": {
            "name": "WebGLRenderer",
            "shortname": "WebGLRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 11,
            "description": "the WebGLRenderer is draws the stage and all its content onto a webGL enabled canvas. This renderer\nshould be used for browsers support webGL. This Render works by automatically managing webGLBatchs.\nSo no need for Sprite Batch's or Sprite Cloud's\nDont forget to add the view to your DOM or you will not see anything :)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width=0",
                    "description": "the width of the canvas view",
                    "type": "Number"
                },
                {
                    "name": "height=0",
                    "description": "the height of the canvas view",
                    "type": "Number"
                },
                {
                    "name": "view",
                    "description": "the canvas to use as a view, optional",
                    "type": "Canvas"
                },
                {
                    "name": "transparent=false",
                    "description": "the transparency of the render view, default false",
                    "type": "Boolean"
                },
                {
                    "name": "antialias=false",
                    "description": "sets antialias (only applicable in chrome at the moment)",
                    "type": "Boolean"
                }
            ]
        },
        "BitmapText": {
            "name": "BitmapText",
            "shortname": "BitmapText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\text\\BitmapText.js",
            "line": 5,
            "description": "A Text Object will create a line(s) of text using bitmap font. To split a line you can use \"\\n\", \"\\r\" or \"\\r\\n\"\nYou can generate the fnt files using \nhttp://www.angelcode.com/products/bmfont/ for windows or\nhttp://www.bmglyph.com/ for mac.",
            "extends": "DisplayObjectContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "font",
                            "description": "The size (optional) and bitmap font id (required) eq \"Arial\" or \"20px Arial\" (must have loaded previously)",
                            "type": "String"
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        }
                    ]
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\text\\Text.js",
            "line": 5,
            "description": "A Text Object will create a line(s) of text to split a line you can use \"\\n\"",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "font",
                            "description": "default \"bold 20pt Arial\" The style and size of the font",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fill",
                            "description": "A canvas fillstyle that will be used on the text eg \"red\", \"#00FF00\"",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "\"black\""
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "stroke",
                            "description": "A canvas fillstyle that will be used on the text stroke eg \"blue\", \"#FCFF00\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "strokeThickness",
                            "description": "A number that represents the thickness of the stroke. Default is 0 (no stroke)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "wordWrap",
                            "description": "Indicates if word wrap should be used",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "wordWrapWidth",
                            "description": "The width at which text will wrap",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ]
        },
        "BaseTexture": {
            "name": "BaseTexture",
            "shortname": "BaseTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 9,
            "description": "A texture stores the information that represents an image. All textures have a base texture",
            "uses": [
                "EventTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "the source object (image or canvas)",
                    "type": "String"
                }
            ]
        },
        "RenderTexture": {
            "name": "RenderTexture",
            "shortname": "RenderTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\textures\\RenderTexture.js",
            "line": 5,
            "description": "A RenderTexture is a special texture that allows any pixi displayObject to be rendered to it.\n\n__Hint__: All DisplayObjects (exmpl. Sprites) that renders on RenderTexture should be preloaded. \nOtherwise black rectangles will be drawn instead.  \n\nRenderTexture takes snapshot of DisplayObject passed to render method. If DisplayObject is passed to render method, position and rotation of it will be ignored. For example:\n\n\tvar renderTexture = new PIXI.RenderTexture(800, 600);\n\tvar sprite = PIXI.Sprite.fromImage(\"spinObj_01.png\");\n\tsprite.position.x = 800/2;\n\tsprite.position.y = 600/2;\n\tsprite.anchor.x = 0.5;\n\tsprite.anchor.y = 0.5;\n\trenderTexture.render(sprite);\n\nSprite in this case will be rendered to 0,0 position. To render this sprite at center DisplayObjectContainer should be used:\n\n\tvar doc = new PIXI.DisplayObjectContainer();\n\tdoc.addChild(sprite);\n\trenderTexture.render(doc);  // Renders to center of renderTexture",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The width of the render texture",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the render texture",
                    "type": "Number"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\textures\\Texture.js",
            "line": 8,
            "description": "A texture stores the information that represents an image or part of an image. It cannot be added\nto the display list directly. To do this use PIXI.Sprite. If no frame is provided then the whole image is used",
            "uses": [
                "EventTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "baseTexture",
                    "description": "The base texture source to create the texture from",
                    "type": "BaseTexture"
                },
                {
                    "name": "frmae",
                    "description": "The rectangle frame of the texture to show",
                    "type": "Rectangle"
                }
            ]
        },
        "EventTarget": {
            "name": "EventTarget",
            "shortname": "EventTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Spine",
                "AssetLoader",
                "BitmapFontLoader",
                "ImageLoader",
                "JsonLoader",
                "SpriteSheetLoader",
                "BaseTexture",
                "Texture"
            ],
            "module": "Phaser",
            "namespace": "",
            "file": "pixi\\utils\\EventTarget.js",
            "line": 6,
            "description": "Adds event emitter functionality to a class",
            "example": [
                "\n\t\tfunction MyEmitter() {\n\t\t\tPIXI.EventTarget.call(this); //mixes in event target stuff\n\t\t}\n\n\t\tvar em = new MyEmitter();\n\t\tem.emit({ type: 'eventName', data: 'some data' });"
            ]
        },
        "PolyK._PointInTriangle": {
            "name": "PolyK._PointInTriangle",
            "shortname": "PolyK._PointInTriangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "PolyK",
            "file": "pixi\\utils\\Polyk.js",
            "line": 109,
            "description": "Checks if a point is within a triangle",
            "access": "private",
            "tagname": ""
        },
        "PolyK._convex": {
            "name": "PolyK._convex",
            "shortname": "PolyK._convex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "PolyK",
            "file": "pixi\\utils\\Polyk.js",
            "line": 139,
            "description": "Checks if a shape is convex",
            "access": "private",
            "tagname": ""
        },
        "PolyK.AjaxRequest": {
            "name": "PolyK.AjaxRequest",
            "shortname": "AjaxRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "PolyK",
            "file": "pixi\\utils\\Utils.js",
            "line": 81,
            "description": "A wrapper for ajax requests to be handled cross browser",
            "is_constructor": 1
        },
        "PolyK.InteractionManager": {
            "name": "PolyK.InteractionManager",
            "shortname": "InteractionManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "PolyK",
            "file": "pixi\\InteractionManager.js",
            "line": 7,
            "description": "The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive\nThis manager also supports multitouch.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage to handle interactions",
                    "type": "Stage"
                }
            ]
        },
        "PolyK.InteractionData": {
            "name": "PolyK.InteractionData",
            "shortname": "InteractionData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "PolyK",
            "file": "pixi\\InteractionManager.js",
            "line": 596,
            "description": "Holds all information related to an Interaction event",
            "is_constructor": 1
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI",
            "namespace": "",
            "file": "sound\\Sound.js",
            "line": 1,
            "description": "The Sound class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Reference to the current game instance.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "key",
                    "description": "Asset key for the sound.",
                    "type": "String"
                },
                {
                    "name": "volume",
                    "description": "Default value for the volume.",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "Whether or not the sound will loop.",
                    "type": "Bool"
                }
            ]
        },
        "SoundManager": {
            "name": "SoundManager",
            "shortname": "SoundManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI",
            "namespace": "",
            "file": "sound\\SoundManager.js",
            "line": 1,
            "description": "Phaser - SoundManager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "reference to the current game instance.",
                    "type": "Phaser.Game"
                }
            ]
        },
        "Canvas": {
            "name": "Canvas",
            "shortname": "Canvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Canvas",
            "namespace": "",
            "file": "system\\Canvas.js",
            "line": 8,
            "description": "The Canvas class handles everything related to the <canvas> tag as a DOM Element, like styles, offset, aspect ratio",
            "static": 1
        },
        "Time": {
            "name": "Time",
            "shortname": "Time",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Time",
            "namespace": "",
            "file": "time\\Time.js",
            "line": 8,
            "description": "This is the core internal game clock. It manages the elapsed time and calculation of elapsed values,\nused for game object motion and tweens.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "A reference to the currently running game.",
                    "type": "Phaser.Game"
                }
            ]
        },
        "Color": {
            "name": "Color",
            "shortname": "Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "utils\\Color.js",
            "line": 1,
            "description": "A collection of methods useful for manipulating and comparing colors.",
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License"
        },
        "DebugUtils": {
            "name": "DebugUtils",
            "shortname": "DebugUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser",
            "namespace": "",
            "file": "utils\\Debug.js",
            "line": 8,
            "description": "A collection of methods for displaying debug information about game objects."
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Phaser.Utils",
            "namespace": "",
            "file": "utils\\Utils.js",
            "line": 8,
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "animation\\Animation.js",
            "line": 24,
            "itemtype": "property",
            "name": "game - A reference to the currently running Game.",
            "type": "Phaser.Game",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 29,
            "itemtype": "property",
            "name": "_parent - A reference to the parent Sprite that owns this Animation.",
            "type": "Phaser.Sprite",
            "access": "private",
            "tagname": "",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 35,
            "itemtype": "property",
            "name": "_frameData - The FrameData the Animation uses.",
            "type": "Phaser.FrameData",
            "access": "private",
            "tagname": "",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 41,
            "itemtype": "property",
            "name": "name - The user defined name given to this Animation.",
            "type": "String",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 46,
            "itemtype": "property",
            "name": "_frames",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 53,
            "itemtype": "property",
            "name": "delay - The delay in ms between each frame of the Animation.",
            "type": "Number",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 58,
            "itemtype": "property",
            "name": "looped - The loop state of the Animation.",
            "type": "Boolean",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 63,
            "itemtype": "property",
            "name": "isFinished - The finished state of the Animation. Set to true once playback completes, false during playback.",
            "type": "Boolean",
            "default": "",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 69,
            "itemtype": "property",
            "name": "isPlaying - The playing state of the Animation. Set to false once playback completes, true during playback.",
            "type": "Boolean",
            "default": "",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 75,
            "itemtype": "property",
            "name": "_frameIndex",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "default": "",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 82,
            "itemtype": "property",
            "name": "currentFrame - The currently displayed frame of the Animation.",
            "type": "Phaser.Animation.Frame",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 91,
            "description": "Plays this animation.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "frameRate",
                    "description": "The framerate to play the animation at. The speed is given in frames per second. If not provided the previously set frameRate of the Animation is used.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "loop",
                    "description": "Should the animation be looped after playback. If not provided the previously set loop value of the Animation is used.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "A reference to this Animation instance.",
                "type": "Phaser.Animation"
            },
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 136,
            "description": "Sets this animation back to the first frame and restarts the animation.",
            "itemtype": "method",
            "name": "restart",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 155,
            "description": "Stops playback of this animation and set it to a finished state. If a resetFrame is provided it will stop playback and set frame to the first in the animation.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "resetFrame",
                    "description": "If true after the animation stops the currentFrame value will be set to the first frame in this animation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 175,
            "description": "Updates this animation. Called automatically by the AnimationManager.",
            "itemtype": "method",
            "name": "update",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 216,
            "description": "Cleans up this animation ready for deletion. Nulls all values and references.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 232,
            "description": "Called internally when the animation finishes playback. Sets the isPlaying and isFinished states and dispatches the onAnimationComplete event if it exists on the parent.",
            "itemtype": "method",
            "name": "onComplete",
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 253,
            "itemtype": "method",
            "name": "frameTotal",
            "return": {
                "description": "The total number of frames in this animation.",
                "type": "Number"
            },
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 265,
            "itemtype": "method",
            "name": "frame",
            "return": {
                "description": "Returns the current frame, or if not set the index of the most recent frame.",
                "type": "Animation.Frame"
            },
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Animation.js",
            "line": 282,
            "itemtype": "method",
            "name": "frame",
            "return": {
                "description": "Sets the current frame to the given frame index and updates the texture cache.",
                "type": "Number"
            },
            "class": "Phaser.Animation",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 18,
            "description": "A reference to the parent Sprite that owns this AnimationManager.",
            "itemtype": "property",
            "name": "sprite",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Sprite}",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 26,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Game}",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 34,
            "description": "The currently displayed Frame of animation, if any.",
            "itemtype": "property",
            "name": "currentFrame",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Animation.Frame}",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 42,
            "description": "Should the animation data continue to update even if the Sprite.visible is set to false.",
            "itemtype": "property",
            "name": "updateIfVisible",
            "access": "public",
            "tagname": "",
            "type": "{Boolean}",
            "default": "true",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 51,
            "description": "A temp. var for holding the currently playing Animations FrameData.",
            "itemtype": "property",
            "name": "_frameData",
            "access": "private",
            "tagname": "",
            "type": "{Phaser.Animation.FrameData}",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 59,
            "description": "An internal object that stores all of the Animation instances.",
            "itemtype": "property",
            "name": "_anims",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 67,
            "description": "An internal object to help avoid gc.",
            "itemtype": "property",
            "name": "_outputFrames",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 79,
            "description": "Loads FrameData into the internal temporary vars and resets the frame index to zero.\nThis is called automatically when a new Sprite is created.",
            "itemtype": "method",
            "name": "loadFrameData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "frameData",
                    "description": "The FrameData set to load.",
                    "type": "Phaser.Animation.FrameData"
                }
            ],
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 94,
            "description": "Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\nAnimations added in this way are played back with the play function.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The unique (within this Sprite) name for the animation, i.e. \"run\", \"fire\", \"walk\".",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "An array of numbers/strings that correspond to the frames to add to this animation and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "frameRate",
                    "description": "The speed at which the animation should play. The speed is given in frames per second.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "60"
                },
                {
                    "name": "loop",
                    "description": "{bool} Whether or not the animation is looped or just plays once.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "useNumericIndex",
                    "description": "Are the given frames using numeric indexes (default) or strings? (false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The Animation object that was created.",
                "type": "Phaser.Animation"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 140,
            "description": "Check whether the frames in the given array are valid and exist.",
            "itemtype": "method",
            "name": "validateFrames",
            "params": [
                {
                    "name": "frames",
                    "description": "An array of frames to be validated.",
                    "type": "Array"
                },
                {
                    "name": "useNumericIndex",
                    "description": "Validate the frames based on their numeric index (true) or string index (false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "True if all given Frames are valid, otherwise false.",
                "type": "Boolean"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 174,
            "description": "Play an animation based on the given key. The animation should previously have been added via sprite.animations.add()\nIf the requested animation is already playing this request will be ignored. If you need to reset an already running animation do so directly on the Animation object itself.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to be played, e.g. \"fire\", \"walk\", \"jump\".",
                    "type": "String"
                },
                {
                    "name": "frameRate",
                    "description": "The framerate to play the animation at. The speed is given in frames per second. If not provided the previously set frameRate of the Animation is used.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "loop",
                    "description": "Should the animation be looped after playback. If not provided the previously set loop value of the Animation is used.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "A reference to playing Animation instance.",
                "type": "Phaser.Animation"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 204,
            "description": "Stop playback of an animation. If a name is given that specific animation is stopped, otherwise the current animation is stopped.\nThe currentAnim property of the AnimationManager is automatically set to the animation given.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to be stopped, e.g. \"fire\". If none is given the currently running animation is stopped.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "resetFrame",
                    "description": "When the animation is stopped should the currentFrame be set to the first frame of the animation (true) or paused on the last frame displayed (false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 234,
            "description": "The main update function is called by the Sprites update loop. It's responsible for updating animation frames and firing related events.",
            "itemtype": "method",
            "name": "update",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "True if a new animation frame has been set, otherwise false.",
                "type": "Boolean"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 259,
            "description": "Destroys all references this AnimationManager contains. Sets the _anims to a new object and nulls the current animation.",
            "itemtype": "method",
            "name": "destroy",
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 278,
            "itemtype": "method",
            "name": "frameData",
            "return": {
                "description": "Returns the FrameData of the current animation.",
                "type": "Phaser.Animation.FrameData"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 290,
            "itemtype": "method",
            "name": "frameTotal",
            "return": {
                "description": "Returns the total number of frames in the loaded FrameData, or -1 if no FrameData is loaded.",
                "type": "Number"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 310,
            "itemtype": "method",
            "name": "frame",
            "return": {
                "description": "Returns the index of the current frame.",
                "type": "Number"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 323,
            "itemtype": "method",
            "name": "frame",
            "params": [
                {
                    "name": "value",
                    "description": "Sets the current frame on the Sprite and updates the texture cache for display.",
                    "type": "Number"
                }
            ],
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 343,
            "itemtype": "method",
            "name": "frameName",
            "return": {
                "description": "Returns the name of the current frame if it has one.",
                "type": "String"
            },
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\AnimationManager.js",
            "line": 356,
            "itemtype": "method",
            "name": "frameName",
            "params": [
                {
                    "name": "value",
                    "description": "Sets the current frame on the Sprite and updates the texture cache for display.",
                    "type": "String"
                }
            ],
            "class": "AnimationManager",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 23,
            "description": "The index of this Frame within the FrameData set it is being added to.",
            "itemtype": "property",
            "name": "index",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 31,
            "description": "X position within the image to cut from.",
            "itemtype": "property",
            "name": "x",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 39,
            "description": "Y position within the image to cut from.",
            "itemtype": "property",
            "name": "y",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 47,
            "description": "Width of the frame.",
            "itemtype": "property",
            "name": "width",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 55,
            "description": "Height of the frame.",
            "itemtype": "property",
            "name": "height",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 63,
            "description": "Useful for Texture Atlas files. (is set to the filename value)",
            "itemtype": "property",
            "name": "name",
            "access": "public",
            "tagname": "",
            "type": "{String}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 71,
            "description": "A link to the PIXI.TextureCache entry",
            "itemtype": "property",
            "name": "uuid",
            "access": "public",
            "tagname": "",
            "type": "{String}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 79,
            "description": "center X position within the image to cut from.",
            "itemtype": "property",
            "name": "centerX",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 87,
            "description": "center Y position within the image to cut from.",
            "itemtype": "property",
            "name": "centerY",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 95,
            "description": "The distance from the top left to the bottom-right of this Frame.",
            "itemtype": "property",
            "name": "distance",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 103,
            "description": "Rotated? (not yet implemented)",
            "itemtype": "property",
            "name": "rotated",
            "access": "public",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 112,
            "description": "Either cw or ccw, rotation is always 90 degrees.",
            "itemtype": "property",
            "name": "rotationDirection",
            "access": "public",
            "tagname": "",
            "type": "{String}",
            "default": "\"cw\"",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 121,
            "description": "Was it trimmed when packed?",
            "itemtype": "property",
            "name": "trimmed",
            "access": "public",
            "tagname": "",
            "type": "{Boolean}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 129,
            "description": "Width of the original sprite.",
            "itemtype": "property",
            "name": "sourceSizeW",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 137,
            "description": "Height of the original sprite.",
            "itemtype": "property",
            "name": "sourceSizeH",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 145,
            "description": "X position of the trimmed sprite inside original sprite.",
            "itemtype": "property",
            "name": "spriteSourceSizeX",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 154,
            "description": "Y position of the trimmed sprite inside original sprite.",
            "itemtype": "property",
            "name": "spriteSourceSizeY",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 163,
            "description": "Width of the trimmed sprite.",
            "itemtype": "property",
            "name": "spriteSourceSizeW",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 172,
            "description": "Height of the trimmed sprite.",
            "itemtype": "property",
            "name": "spriteSourceSizeH",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Frame.js",
            "line": 185,
            "description": "If the frame was trimmed when added to the Texture Atlas this records the trim and source data.",
            "itemtype": "method",
            "name": "setTrim",
            "params": [
                {
                    "name": "trimmed",
                    "description": "If this frame was trimmed or not.",
                    "type": "Boolean"
                },
                {
                    "name": "actualWidth",
                    "description": "The width of the frame before being trimmed.",
                    "type": "Number"
                },
                {
                    "name": "actualHeight",
                    "description": "The height of the frame before being trimmed.",
                    "type": "Number"
                },
                {
                    "name": "destX",
                    "description": "The destination X position of the trimmed frame for display.",
                    "type": "Number"
                },
                {
                    "name": "destY",
                    "description": "The destination Y position of the trimmed frame for display.",
                    "type": "Number"
                },
                {
                    "name": "destWidth",
                    "description": "The destination width of the trimmed frame for display.",
                    "type": "Number"
                },
                {
                    "name": "destHeight",
                    "description": "The destination height of the trimmed frame for display.",
                    "type": "Number"
                }
            ],
            "class": "Frame",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 16,
            "description": "Local array of frames.",
            "itemtype": "property",
            "name": "_frames",
            "access": "private",
            "tagname": "",
            "type": "{Array}",
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 24,
            "description": "Local array of frame names for name to index conversions.",
            "itemtype": "property",
            "name": "_frameNames",
            "access": "private",
            "tagname": "",
            "type": "{Array}",
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 36,
            "description": "Adds a new Frame to this FrameData collection. Typically called by the Animation.Parser and not directly.",
            "itemtype": "method",
            "name": "addFrame",
            "params": [
                {
                    "name": "frame",
                    "description": "The frame to add to this FrameData set.",
                    "type": "Phaser.Animation.Frame"
                }
            ],
            "return": {
                "description": "The frame that was just added.",
                "type": "Phaser.Animation.Frame"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 58,
            "description": "Get a Frame by its numerical index.",
            "itemtype": "method",
            "name": "getFrame",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the frame you want to get.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The frame, if found.",
                "type": "Phaser.Animation.Frame"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 76,
            "description": "Get a Frame by its frame name.",
            "itemtype": "method",
            "name": "getFrameByName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the frame you want to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The frame, if found.",
                "type": "Phaser.Animation.Frame"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 94,
            "description": "Check if there is a Frame with the given name.",
            "itemtype": "method",
            "name": "checkFrameName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the frame you want to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the frame is found, otherwise false.",
                "type": "Boolean"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 112,
            "description": "Returns a range of frames based on the given start and end frame indexes and returns them in an Array.",
            "itemtype": "method",
            "name": "getFrameRange",
            "params": [
                {
                    "name": "start",
                    "description": "The starting frame index.",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "The ending frame index.",
                    "type": "Number"
                },
                {
                    "name": "output",
                    "description": "Optional array. If given the results will be appended to the end of this Array.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of Frames between the start and end index values, or an empty array if none were found.",
                "type": "Array"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 134,
            "description": "Returns all of the Frames in this FrameData set where the frame index is found in the input array.\nThe frames are returned in the output array, or if none is provided in a new Array object.",
            "itemtype": "method",
            "name": "getFrames",
            "params": [
                {
                    "name": "frames",
                    "description": "An Array containing the indexes of the frames to retrieve. If the array is empty then all frames in the FrameData are returned.",
                    "type": "Array"
                },
                {
                    "name": "useNumericIndex",
                    "description": "Are the given frames using numeric indexes (default) or strings? (false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "output",
                    "description": "Optional array. If given the results will be appended to the end of this Array, otherwise a new array is created.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of all Frames in this FrameData set matching the given names or IDs.",
                "type": "Array"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 181,
            "description": "Returns all of the Frame indexes in this FrameData set.\nThe frames indexes are returned in the output array, or if none is provided in a new Array object.",
            "itemtype": "method",
            "name": "getFrameIndexes",
            "params": [
                {
                    "name": "frames",
                    "description": "An Array containing the indexes of the frames to retrieve. If the array is empty then all frames in the FrameData are returned.",
                    "type": "Array"
                },
                {
                    "name": "useNumericIndex",
                    "description": "Are the given frames using numeric indexes (default) or strings? (false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "output",
                    "description": "Optional array. If given the results will be appended to the end of this Array, otherwise a new array is created.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of all Frame indexes matching the given names or IDs.",
                "type": "Array"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\FrameData.js",
            "line": 229,
            "description": "Returns the total number of frames in this FrameData set.",
            "itemtype": "method",
            "name": "total",
            "return": {
                "description": "The total number of frames in this FrameData set.",
                "type": "Number"
            },
            "class": "FrameData",
            "module": "Phaser.Animation.FrameData"
        },
        {
            "file": "animation\\Parser.js",
            "line": 12,
            "description": "Parse a Sprite Sheet and extract the animation frame data from it.",
            "itemtype": "method",
            "name": "spriteSheet",
            "params": [
                {
                    "name": "game",
                    "description": "A reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "key",
                    "description": "The Game.Cache asset key of the Sprite Sheet image.",
                    "type": "String"
                },
                {
                    "name": "frameWidth",
                    "description": "The fixed width of each frame of the animation.",
                    "type": "Number"
                },
                {
                    "name": "frameHeight",
                    "description": "The fixed height of each frame of the animation.",
                    "type": "Number"
                },
                {
                    "name": "frameMax",
                    "description": "The total number of animation frames to extact from the Sprite Sheet. The default value of -1 means \"extract all frames\".",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                }
            ],
            "return": {
                "description": "A FrameData object containing the parsed frames.",
                "type": "Phaser.Animation.FrameData"
            },
            "class": "Camera",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Parser.js",
            "line": 82,
            "description": "Parse the JSON data and extract the animation frame data from it.",
            "itemtype": "method",
            "name": "JSONData",
            "params": [
                {
                    "name": "game",
                    "description": "A reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "json",
                    "description": "The JSON data from the Texture Atlas. Must be in Array format.",
                    "type": "Object"
                },
                {
                    "name": "cacheKey",
                    "description": "The Game.Cache asset key of the texture image.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A FrameData object containing the parsed frames.",
                "type": "Phaser.Animation.FrameData"
            },
            "class": "Camera",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Parser.js",
            "line": 151,
            "description": "Parse the JSON data and extract the animation frame data from it.",
            "itemtype": "method",
            "name": "JSONDataHash",
            "params": [
                {
                    "name": "game",
                    "description": "A reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "json",
                    "description": "The JSON data from the Texture Atlas. Must be in JSON Hash format.",
                    "type": "Object"
                },
                {
                    "name": "cacheKey",
                    "description": "The Game.Cache asset key of the texture image.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A FrameData object containing the parsed frames.",
                "type": "Phaser.Animation.FrameData"
            },
            "class": "Camera",
            "module": "Phaser.Animation"
        },
        {
            "file": "animation\\Parser.js",
            "line": 223,
            "description": "Parse the XML data and extract the animation frame data from it.",
            "itemtype": "method",
            "name": "XMLData",
            "params": [
                {
                    "name": "game",
                    "description": "A reference to the currently running game.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "xml",
                    "description": "The XML data from the Texture Atlas. Must be in Starling XML format.",
                    "type": "Object"
                },
                {
                    "name": "cacheKey",
                    "description": "The Game.Cache asset key of the texture image.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A FrameData object containing the parsed frames.",
                "type": "Phaser.Animation.FrameData"
            },
            "class": "Camera",
            "module": "Phaser.Animation"
        },
        {
            "file": "core\\Camera.js",
            "line": 25,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Game}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 33,
            "description": "A reference to the game world",
            "itemtype": "property",
            "name": "world",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.World}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 41,
            "description": "reserved for future multiple camera set-ups",
            "itemtype": "property",
            "name": "id",
            "access": "public",
            "tagname": "",
            "type": "{number}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 49,
            "description": "Camera view.\nThe view into the world we wish to render (by default the game dimensions)\nThe x/y values are in world coordinates, not screen coordinates, the width/height is how many pixels to render\nObjects outside of this view are not rendered (unless set to ignore the Camera, i.e. UI?)",
            "itemtype": "property",
            "name": "view",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Rectangle}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 60,
            "description": "Used by Sprites to work out Camera culling.",
            "itemtype": "property",
            "name": "screenView",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Rectangle}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 68,
            "description": "Sprite moving inside this Rectangle will not cause camera moving.",
            "itemtype": "property",
            "name": "deadzone",
            "type": "{Phaser.Rectangle}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 75,
            "description": "Whether this camera is visible or not. (default is true)",
            "itemtype": "property",
            "name": "visible",
            "access": "public",
            "tagname": "",
            "default": "true",
            "type": "{bool}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 84,
            "description": "Whether this camera is flush with the World Bounds or not.",
            "itemtype": "property",
            "name": "atLimit",
            "type": "{bool}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 91,
            "description": "If the camera is tracking a Sprite, this is a reference to it, otherwise null",
            "itemtype": "property",
            "name": "target",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Sprite}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 99,
            "description": "Edge property",
            "itemtype": "property",
            "name": "edge",
            "access": "private",
            "tagname": "",
            "type": "{number}",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 117,
            "description": "Tells this camera which sprite to follow.",
            "itemtype": "method",
            "name": "follow",
            "params": [
                {
                    "name": "target",
                    "description": "The object you want the camera to track. Set to null to not follow anything.",
                    "type": "Phaser.Sprite"
                },
                {
                    "name": "style",
                    "description": "Leverage one of the existing \"deadzone\" presets. If you use a custom deadzone, ignore this parameter and manually specify the deadzone after calling follow().",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 157,
            "description": "Move the camera focus to a location instantly.",
            "itemtype": "method",
            "name": "focusOnXY",
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 170,
            "description": "Update focusing and scrolling.",
            "itemtype": "method",
            "name": "update",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 220,
            "description": "Method called to ensure the camera doesn't venture outside of the game world",
            "itemtype": "method",
            "name": "checkWorldBounds",
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 258,
            "description": "A helper function to set both the X and Y properties of the camera at once\nwithout having to use game.camera.x and game.camera.y",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 274,
            "description": "Sets the size of the view rectangle given the width and height in parameters",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "The desired width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The desired height.",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 292,
            "itemtype": "method",
            "name": "x",
            "return": {
                "description": "The x position",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 299,
            "itemtype": "method",
            "name": "x",
            "return": {
                "description": "Sets the camera's x position and clamp it if it's outside the world bounds",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 312,
            "itemtype": "method",
            "name": "y",
            "return": {
                "description": "The y position",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 320,
            "itemtype": "method",
            "name": "y",
            "return": {
                "description": "Sets the camera's y position and clamp it if it's outside the world bounds",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 333,
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "The width of the view rectangle, in pixels",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 341,
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "Sets the width of the view rectangle",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 353,
            "itemtype": "method",
            "name": "height",
            "return": {
                "description": "The height of the view rectangle, in pixels",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Camera.js",
            "line": 361,
            "itemtype": "method",
            "name": "height",
            "return": {
                "description": "Sets the height of the view rectangle",
                "type": "Number"
            },
            "class": "Camera",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 1,
            "description": "Phaser.Game\n\nThis is where the magic happens. The Game object is the heart of your game,\nproviding quick access to common functions and handling the boot process.\n\n\"Hell, there are no rules here - we're trying to accomplish something.\"\n                                                      Thomas A. Edison",
            "package": "Phaser.Game",
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 16,
            "description": "Game constructor\n\nInstantiate a new <code>Phaser.Game</code> object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The width of your game in game pixels.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of your game in game pixels.",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "Which renderer to use (canvas or webgl)",
                    "type": "Number"
                },
                {
                    "name": "parent",
                    "description": "ID of its parent DOM element.",
                    "type": "String"
                }
            ],
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 37,
            "description": "Phaser Game ID (for when Pixi supports multiple instances)",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 43,
            "description": "The Games DOM parent.",
            "type": "{HTMLElement}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 51,
            "description": "The Game width (in pixels).",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 57,
            "description": "The Game height (in pixels).",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 63,
            "description": "Use a transparent canvas background or not.",
            "type": "{boolean}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 69,
            "description": "Anti-alias graphics (in WebGL this helps with edges, in Canvas2D it retains pixel-art quality)",
            "type": "{boolean}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 75,
            "description": "The Pixi Renderer",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 81,
            "description": "The StateManager.",
            "type": "{Phaser.StateManager}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 87,
            "description": "Is game paused?",
            "type": "{bool}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 93,
            "description": "The Renderer this Phaser.Game will use. Either Phaser.RENDERER_AUTO, Phaser.RENDERER_CANVAS or Phaser.RENDERER_WEBGL",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 99,
            "description": "Whether load complete loading or not.",
            "type": "{bool}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 105,
            "description": "Whether the game engine is booted, aka available.",
            "type": "{bool}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 111,
            "description": "Is game running or paused?",
            "type": "{bool}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 117,
            "description": "Automatically handles the core game loop via requestAnimationFrame or setTimeout",
            "type": "{Phaser.RequestAnimationFrame}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 123,
            "description": "Reference to the GameObject Factory.",
            "type": "{Phaser.GameObjectFactory}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 129,
            "description": "Reference to the assets cache.",
            "type": "{Phaser.Cache}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 135,
            "description": "Reference to the input manager",
            "type": "{Phaser.Input}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 141,
            "description": "Reference to the assets loader.",
            "type": "{Phaser.Loader}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 147,
            "description": "Reference to the math helper.",
            "type": "{Phaser.GameMath}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 153,
            "description": "Reference to the network class.",
            "type": "{Phaser.Net}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 159,
            "description": "Reference to the sound manager.",
            "type": "{Phaser.SoundManager}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 165,
            "description": "Reference to the stage.",
            "type": "{Phaser.Stage}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 171,
            "description": "Reference to game clock.",
            "type": "{Phaser.TimeManager}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 177,
            "description": "Reference to the tween manager.",
            "type": "{Phaser.TweenManager}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 183,
            "description": "Reference to the world.",
            "type": "{Phaser.World}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 189,
            "description": "Reference to the physics manager.",
            "type": "{Phaser.Physics.PhysicsManager}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 195,
            "description": "Instance of repeatable random data generator helper.",
            "type": "{Phaser.RandomDataGenerator}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 201,
            "description": "Contains device information and capabilities.",
            "type": "{Phaser.Device}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 207,
            "description": "A handy reference to world.camera",
            "type": "{Phaser.Camera}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 213,
            "description": "A handy reference to renderer.view",
            "type": "{HTMLCanvasElement}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 219,
            "description": "A handy reference to renderer.context (only set for CANVAS games)",
            "type": "{Context}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 225,
            "description": "A set of useful debug utilities",
            "type": "{Phaser.Utils.Debug}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 231,
            "description": "The Particle Manager",
            "type": "{Phaser.Particles}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 259,
            "description": "Initialize engine sub modules and start the game.",
            "params": [
                {
                    "name": "parent",
                    "description": "ID of parent Dom element.",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "Width of the game screen.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the game screen.",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 366,
            "description": "Called when the load has finished, after preload was run.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Game.js",
            "line": 403,
            "description": "Nuke the entire game from orbit",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 43,
            "description": "Helper for sort.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 402,
            "description": "Calls a function on all of the children regardless if they are dead or alive (see callAllExists if you need control over that)\nYou must pass the context in which the callback is applied.\nAfter the context you can add as many parameters as you like, which will all be passed to the child.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 494,
            "description": "Call this function to retrieve the first object with exists == (the given state) in the group.",
            "return": {
                "description": "The first child, or null if none found.",
                "type": "Any"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 526,
            "description": "Call this function to retrieve the first object with alive == true in the group.\nThis is handy for checking if everything's wiped out, or choosing a squad leader, etc.",
            "return": {
                "description": "The first alive child, or null if none found.",
                "type": "Any"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 554,
            "description": "Call this function to retrieve the first object with alive == false in the group.\nThis is handy for checking if everything's wiped out, or choosing a squad leader, etc.",
            "return": {
                "description": "The first dead child, or null if none found.",
                "type": "Any"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 582,
            "description": "Call this function to find out how many members of the group are alive.",
            "return": {
                "description": "The number of children flagged as alive. Returns -1 if Group is empty.",
                "type": "Number"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 611,
            "description": "Call this function to find out how many members of the group are dead.",
            "return": {
                "description": "The number of children flagged as dead. Returns -1 if Group is empty.",
                "type": "Number"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Group.js",
            "line": 640,
            "description": "Returns a member at random from the group.",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Optional offset off the front of the array. Default value is 0, or the beginning of the array.",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "Optional restriction on the number of values you want to randomly select from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A random child of this Group.",
                "type": "Any"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Plugin.js",
            "line": 1,
            "description": "Phaser - Plugin\n\nThis is a base Plugin template to use for any Phaser plugin development",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Plugin.js",
            "line": 23,
            "description": "Pre-update is called at the start of the update cycle, before any other updates have taken place (including Physics).\nIt is only called if active is set to true.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Plugin.js",
            "line": 30,
            "description": "Update is called after all the core subsystems (Input, Tweens, Sound, etc) and the State have updated, but before the render.\nIt is only called if active is set to true.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Plugin.js",
            "line": 37,
            "description": "Render is called right after the Game Renderer completes, but before the State.render.\nIt is only called if visible is set to true.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Plugin.js",
            "line": 44,
            "description": "Post-render is called after the Game Renderer and State.render have run.\nIt is only called if visible is set to true.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Plugin.js",
            "line": 51,
            "description": "Clear down this Plugin and null out references",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\PluginManager.js",
            "line": 1,
            "description": "Phaser - PluginManager\n\nTODO: We can optimise this a lot by using separate hashes per function (update, render, etc)",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\PluginManager.js",
            "line": 18,
            "description": "Add a new Plugin to the PluginManager.\nThe plugins game and parent reference are set to this game and pluginmanager parent.",
            "type": "{Phaser.Plugin}",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 1,
            "description": "Phaser.Signal\n\nA Signal is used for object communication via a custom broadcaster instead of Events.",
            "author": "Miller Medeiros http://millermedeiros.github.com/js-signals/",
            "is_constructor": 1,
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 11,
            "type": "Array.<Phaser.SignalBinding>",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 29,
            "description": "If Signal should keep record of previously dispatched parameters and\nautomatically execute listener during `add()`/`addOnce()` if Signal was\nalready dispatched before.",
            "type": "boolean",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 37,
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 43,
            "description": "If Signal is active and should broadcast events.\n<p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>",
            "type": "boolean",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 56,
            "params": [
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "isOnce",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "listenerContext",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "priority",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Phaser.SignalBinding"
            },
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 86,
            "params": [
                {
                    "name": "binding",
                    "description": "",
                    "type": "Phaser.SignalBinding"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 97,
            "params": [
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 114,
            "description": "Check if listener was attached to Signal.",
            "params": [
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "if Signal has the specified listener.",
                "type": "Boolean"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 124,
            "description": "Add a listener to the signal.",
            "params": [
                {
                    "name": "listener",
                    "description": "Signal handler function.",
                    "type": "Function"
                },
                {
                    "name": "listenerContext",
                    "description": "Context on which listener will be executed (object that should represent the `this` variable inside listener function).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "priority",
                    "description": "The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "An Object representing the binding between the Signal and listener.",
                "type": "Phaser.SignalBinding"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 136,
            "description": "Add listener to the signal that should be removed after first execution (will be executed only once).",
            "params": [
                {
                    "name": "listener",
                    "description": "Signal handler function.",
                    "type": "Function"
                },
                {
                    "name": "listenerContext",
                    "description": "Context on which listener will be executed (object that should represent the `this` variable inside listener function).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "priority",
                    "description": "The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "An Object representing the binding between the Signal and listener.",
                "type": "Phaser.SignalBinding"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 148,
            "description": "Remove a single listener from the dispatch queue.",
            "params": [
                {
                    "name": "listener",
                    "description": "Handler function that should be removed.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "Execution context (since you can add the same handler multiple times if executing in a different context).",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Listener handler function.",
                "type": "Function"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 165,
            "description": "Remove all listeners from the Signal.",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 176,
            "return": {
                "description": "Number of listeners attached to the Signal.",
                "type": "Number"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 183,
            "description": "Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n<p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>",
            "see": [
                "Signal.prototype.disable"
            ],
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 192,
            "description": "Dispatch/Broadcast Signal to all listeners added to the queue.",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters that should be passed to each handler.",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 222,
            "description": "Forget memorized arguments.",
            "see": [
                "Signal.memorize"
            ],
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 230,
            "description": "Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n<p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Signal.js",
            "line": 240,
            "return": {
                "description": "String representation of the object.",
                "type": "String"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 1,
            "description": "Phaser.SignalBinding\n\nObject that represents a binding between a Signal and a listener function.\n<br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n<br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.",
            "author": "Miller Medeiros http://millermedeiros.github.com/js-signals/",
            "is_constructor": 1,
            "internal": "",
            "name": "SignalBinding",
            "params": [
                {
                    "name": "signal",
                    "description": "Reference to Signal object that listener is currently bound to.",
                    "type": "Signal"
                },
                {
                    "name": "listener",
                    "description": "Handler function bound to the signal.",
                    "type": "Function"
                },
                {
                    "name": "isOnce",
                    "description": "If binding should be executed just once.",
                    "type": "Boolean"
                },
                {
                    "name": "listenerContext",
                    "description": "Context on which listener will be executed (object that should represent the `this` variable inside listener function).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "priority",
                    "description": "The priority level of the event listener. (default = 0).",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 20,
            "description": "Handler function bound to the signal.",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 27,
            "description": "If binding should be executed just once.",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 34,
            "description": "Context on which listener will be executed (object that should represent the `this` variable inside listener function).",
            "memberof": "SignalBinding.prototype",
            "name": "context",
            "type": "Object|undefined|null",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 42,
            "description": "Reference to Signal object that listener is currently bound to.",
            "type": "Signal",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 49,
            "description": "Listener priority",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 60,
            "description": "If binding is active and should be executed.",
            "type": "boolean",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 66,
            "description": "Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)",
            "type": "Array|null",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 72,
            "description": "Call listener passing arbitrary parameters.\n<p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>",
            "params": [
                {
                    "name": "paramsArr",
                    "description": "Array of parameters that should be passed to the listener",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Value returned by the listener.",
                "type": "*"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 97,
            "description": "Detach binding from signal.\n- alias to: mySignal.remove(myBinding.getListener());",
            "return": {
                "description": "Handler function bound to the signal or `null` if binding was previously detached.",
                "type": "Function|null"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 106,
            "return": {
                "description": "`true` if binding is still bound to the signal and have a listener.",
                "type": "Boolean"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 113,
            "return": {
                "description": "If SignalBinding will only be executed once.",
                "type": "Boolean"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 120,
            "return": {
                "description": "Handler function bound to the signal.",
                "type": "Function"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 127,
            "return": {
                "description": "Signal that listener is currently bound to.",
                "type": "Signal"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 134,
            "description": "Delete instance properties",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\SignalBinding.js",
            "line": 144,
            "return": {
                "description": "String representation of the object.",
                "type": "String"
            },
            "class": "Stage",
            "module": "Phaser.Camera"
        },
        {
            "file": "core\\Stage.js",
            "line": 21,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Game}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 29,
            "description": "Background color of the stage (defaults to black). Set via the public backgroundColor property.",
            "itemtype": "property",
            "name": "_backgroundColor",
            "access": "private",
            "tagname": "",
            "type": "{string}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 37,
            "description": "Get the offset values (for input and other things)",
            "itemtype": "property",
            "name": "offset",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Point}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 45,
            "description": "reference to the newly created <canvas> element",
            "itemtype": "property",
            "name": "canvas",
            "access": "public",
            "tagname": "",
            "type": "{HTMLCanvasElement}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 54,
            "description": "The Pixi Stage which is hooked to the renderer",
            "itemtype": "property",
            "name": "_stage",
            "access": "private",
            "tagname": "",
            "type": "{PIXI.Stage}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 63,
            "description": "The current scaleMode",
            "itemtype": "property",
            "name": "scaleMode",
            "access": "public",
            "tagname": "",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 71,
            "description": "The scale of the current running game",
            "itemtype": "property",
            "name": "scale",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.StageScaleMode}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 79,
            "description": "aspect ratio",
            "itemtype": "property",
            "name": "aspectRatio",
            "access": "public",
            "tagname": "",
            "type": "{number}",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 91,
            "description": "Initialises the stage and adds the event listeners",
            "itemtype": "method",
            "name": "boot",
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 117,
            "description": "This method is called when the document visibility is changed.",
            "itemtype": "method",
            "name": "visibilityChange",
            "params": [
                {
                    "name": "event",
                    "description": "Its type will be used to decide whether the game should be paused or not",
                    "type": "Event"
                }
            ],
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 146,
            "itemtype": "method",
            "name": "backgroundColor",
            "return": {
                "description": "returns the background color of the stage",
                "type": "String"
            },
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\Stage.js",
            "line": 154,
            "itemtype": "method",
            "name": "backgroundColor",
            "params": [
                {
                    "name": "the",
                    "description": "background color you want the stage to have",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns the background color of the stage",
                "type": "String"
            },
            "class": "Stage",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 1,
            "description": "State\n\nThis is a base State class which can be extended if you are creating your own game.\nIt provides quick access to common functions such as the camera, cache, input, match, sound and more.",
            "package": "Phaser.State",
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 34,
            "description": "Override this method to add some load operations.\nIf you need to use the loader, you may need to use them here.",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 41,
            "description": "This method is called after the game engine successfully switches states.\nFeel free to add any setup code here.(Do not load anything here, override preload() instead)",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 48,
            "description": "Put update logic here.",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 54,
            "description": "Put render operations here.",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 60,
            "description": "This method will be called when game paused.",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\State.js",
            "line": 66,
            "description": "This method will be called when the state is destroyed",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 16,
            "type": "{Phaser.Game}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 21,
            "description": "The state to be switched to in the next frame.",
            "type": "{State}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 27,
            "description": "Flag that sets if the State has been created or not.",
            "type": "{Boolean}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 33,
            "description": "The state to be switched to in the next frame.",
            "type": "{Object}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 39,
            "description": "The current active State object (defaults to null)",
            "type": "{String}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 45,
            "description": "This will be called when the state is started (i.e. set as the current active state)",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 51,
            "description": "This will be called when init states. (loading assets...)",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 57,
            "description": "This will be called when create states. (setup states...)",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 63,
            "description": "This will be called when State is updated, this doesn't happen during load (see onLoadUpdateCallback)",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 69,
            "description": "This will be called when the State is rendered, this doesn't happen during load (see onLoadRenderCallback)",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 75,
            "description": "This will be called before the State is rendered and before the stage is cleared",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 81,
            "description": "This will be called when the State is updated but only during the load process",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 87,
            "description": "This will be called when the State is rendered but only during the load process",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 93,
            "description": "This will be called when states paused.",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 99,
            "description": "This will be called when the state is shut down (i.e. swapped to another state)",
            "type": "{function}",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 128,
            "description": "Add a new State.",
            "params": [
                {
                    "name": "key",
                    "description": "A unique key you use to reference this state, i.e. \"MainMenu\", \"Level1\".",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "The state you want to switch to.",
                    "type": "State"
                },
                {
                    "name": "autoStart",
                    "description": "Start the state immediately after creating it? (default true)",
                    "type": "Boolean"
                }
            ],
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 204,
            "description": "Start the given state",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the state you want to start.",
                    "type": "String"
                },
                {
                    "name": "clearWorld",
                    "description": "clear everything in the world? (Default to true)",
                    "type": "Bool",
                    "optional": true
                },
                {
                    "name": "clearCache",
                    "description": "clear asset cache? (Default to false and ONLY available when clearWorld=true)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\StateManager.js",
            "line": 433,
            "description": "Nuke the entire game from orbit",
            "class": "World",
            "module": "Phaser.Stage"
        },
        {
            "file": "core\\World.js",
            "line": 22,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Game}",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 30,
            "description": "Bound of this world that objects can not escape from.",
            "itemtype": "property",
            "name": "bounds",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Rectangle}",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 38,
            "description": "Camera instance.",
            "itemtype": "property",
            "name": "camera",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Camera}",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 46,
            "description": "Reset each frame, keeps a count of the total number of objects updated.",
            "itemtype": "property",
            "name": "currentRenderOrderID",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 54,
            "description": "Object container stores every object created with `create*` methods.",
            "itemtype": "property",
            "name": "group",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Group}",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 67,
            "description": "Initialises the game world",
            "itemtype": "method",
            "name": "boot",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 82,
            "description": "This is called automatically every frame, and is where main logic happens.",
            "itemtype": "method",
            "name": "update",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 115,
            "description": "Updates the size of this world.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "New width of the world.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height of the world.",
                    "type": "Number"
                }
            ],
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 135,
            "description": "Destroyer of worlds.",
            "itemtype": "method",
            "name": "destroy",
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 156,
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "The current width of the game world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 164,
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "Sets the width of the game world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 176,
            "itemtype": "method",
            "name": "height",
            "return": {
                "description": "The current height of the game world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 184,
            "itemtype": "method",
            "name": "height",
            "return": {
                "description": "Sets the width of the game world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 196,
            "itemtype": "method",
            "name": "centerX",
            "return": {
                "description": "return the X position of the center point of the world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 208,
            "itemtype": "method",
            "name": "centerY",
            "return": {
                "description": "return the Y position of the center point of the world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 220,
            "itemtype": "method",
            "name": "randomX",
            "return": {
                "description": "a random integer which is lesser or equal to the current width of the game world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "core\\World.js",
            "line": 232,
            "itemtype": "method",
            "name": "randomY",
            "return": {
                "description": "a random integer which is lesser or equal to the current height of the game world",
                "type": "Number"
            },
            "class": "World",
            "module": "Phaser.World"
        },
        {
            "file": "gameobjects\\BitmapText.js",
            "line": 61,
            "description": "Automatically called by World.update",
            "class": "Button",
            "module": "Phaser.World"
        },
        {
            "file": "gameobjects\\Bullet.js",
            "line": 63,
            "description": "The anchor sets the origin point of the texture.\nThe default is 0,0 this means the textures origin is the top left \nSetting than anchor to 0.5,0.5 means the textures origin is centered\nSetting the anchor to 1,1 would mean the textures origin points will be the bottom right",
            "itemtype": "property",
            "name": "anchor",
            "type": "Point",
            "class": "Button",
            "module": "Phaser.World"
        },
        {
            "file": "gameobjects\\Bullet.js",
            "line": 80,
            "description": "Should this Sprite be automatically culled if out of range of the camera?\nA culled sprite has its visible property set to 'false'.\nNote that this check doesn't look at this Sprites children, which may still be in camera range.\nSo you should set autoCull to false if the Sprite will have children likely to still be in camera range.",
            "itemtype": "property",
            "name": "autoCull",
            "type": "Boolean",
            "class": "Button",
            "module": "Phaser.World"
        },
        {
            "file": "gameobjects\\Bullet.js",
            "line": 149,
            "description": "Automatically called by World.update. You can create your own update in Objects that extend Phaser.Bullet.",
            "class": "Button",
            "module": "Phaser.World"
        },
        {
            "file": "gameobjects\\Bullet.js",
            "line": 356,
            "description": "Is this sprite visible to the camera or not?",
            "class": "Button",
            "module": "Phaser.World"
        },
        {
            "file": "gameobjects\\Button.js",
            "line": 71,
            "description": "Used to manually set the frames that will be used for the different states of the button\nexactly like setting them in the constructor",
            "itemtype": "method",
            "name": "setFrames",
            "params": [
                {
                    "name": "overFrame",
                    "description": "This is the frame or frameName that will be set when this button is in an over state. Give either a number to use a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                },
                {
                    "name": "outFrame",
                    "description": "This is the frame or frameName that will be set when this button is in an out state. Give either a number to use a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                },
                {
                    "name": "downFrame",
                    "description": "This is the frame or frameName that will be set when this button is in a down state. Give either a number to use a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                }
            ],
            "class": "Button",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Events.js",
            "line": 1,
            "description": "The Events component is a collection of events fired by the parent game object and its components.",
            "params": [
                {
                    "name": "parent",
                    "description": "The game object using this Input component"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\GameObjectFactory.js",
            "line": 19,
            "description": "Create a new Sprite with specific position and sprite sheet key.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the new sprite.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the new sprite.",
                    "type": "Number"
                },
                {
                    "name": "key",
                    "description": "The image key as defined in the Game.Cache to use as the texture for this sprite OR a RenderTexture",
                    "type": "String|RenderTexture",
                    "optional": true
                },
                {
                    "name": "frame",
                    "description": "If the sprite uses an image from a texture atlas or sprite sheet you can pass the frame here. Either a number for a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created sprite object.",
                "type": "Sprite"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\GameObjectFactory.js",
            "line": 34,
            "description": "Create a new Sprite with specific position and sprite sheet key that will automatically be added as a child of the given parent.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the new sprite.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the new sprite.",
                    "type": "Number"
                },
                {
                    "name": "key",
                    "description": "The image key as defined in the Game.Cache to use as the texture for this sprite OR a RenderTexture",
                    "type": "String|RenderTexture",
                    "optional": true
                },
                {
                    "name": "frame",
                    "description": "If the sprite uses an image from a texture atlas or sprite sheet you can pass the frame here. Either a number for a frame ID or a string for a frame name.",
                    "type": "String|number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created sprite object.",
                "type": "Sprite"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\GameObjectFactory.js",
            "line": 51,
            "description": "Create a tween object for a specific object. The object can be any JavaScript object or Phaser object such as Sprite.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object the tween will be run on.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The newly created tween object.",
                "type": "Phaser.Tween"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Graphics.js",
            "line": 49,
            "description": "The alpha of the fill of this graphics object",
            "itemtype": "property",
            "name": "fillAlpha",
            "type": "Number",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Graphics.js",
            "line": 57,
            "description": "The width of any lines drawn",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "Number",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Graphics.js",
            "line": 65,
            "description": "The color of any lines drawn",
            "itemtype": "property",
            "name": "lineColor",
            "type": "String",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Graphics.js",
            "line": 73,
            "description": "Graphics data",
            "itemtype": "property",
            "name": "graphicsData",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Graphics.js",
            "line": 82,
            "description": "Current path",
            "itemtype": "property",
            "name": "currentPath",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Graphics.js",
            "line": 98,
            "description": "Automatically called by World.update",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 28,
            "description": "The Signals you can subscribe to that are dispatched when certain things happen on this Sprite or its components",
            "type": "Events",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 34,
            "description": "This manages animations of the sprite. You can modify animations through it. (see AnimationManager)",
            "type": "AnimationManager",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 40,
            "description": "The Input Handler Component",
            "type": "InputHandler",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 85,
            "description": "The anchor sets the origin point of the texture.\nThe default is 0,0 this means the textures origin is the top left \nSetting than anchor to 0.5,0.5 means the textures origin is centered\nSetting the anchor to 1,1 would mean the textures origin points will be the bottom right",
            "itemtype": "property",
            "name": "anchor",
            "type": "Point",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 105,
            "description": "Should this Sprite be automatically culled if out of range of the camera?\nA culled sprite has its visible property set to 'false'.\nNote that this check doesn't look at this Sprites children, which may still be in camera range.\nSo you should set autoCull to false if the Sprite will have children likely to still be in camera range.",
            "itemtype": "property",
            "name": "autoCull",
            "type": "Boolean",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 184,
            "description": "Automatically called by World.update. You can create your own update in Objects that extend Phaser.Sprite.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 328,
            "description": "Moves the sprite so its center is located on the given x and y coordinates.\nDoesn't change the origin of the sprite.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 482,
            "description": "Get the animation frame number.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 489,
            "description": "Set the animation frame by frame number.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 500,
            "description": "Get the animation frame name.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 507,
            "description": "Set the animation frame by frame name.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 518,
            "description": "Is this sprite visible to the camera or not?",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 529,
            "description": "Get the input enabled state of this Sprite.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 538,
            "description": "Set the ability for this sprite to receive input events.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 571,
            "description": "Get the input enabled state of this Sprite.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\Sprite.js",
            "line": 580,
            "description": "Set the ability for this sprite to receive input events.",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\TileSprite.js",
            "line": 18,
            "description": "The scaling of the image that is being tiled",
            "itemtype": "property",
            "name": "tileScale",
            "type": "Point",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "gameobjects\\TileSprite.js",
            "line": 26,
            "description": "The offset position of the image that is being tiled",
            "itemtype": "property",
            "name": "tilePosition",
            "type": "Point",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 18,
            "description": "The x coordinate of the center of the circle",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 25,
            "description": "The y coordinate of the center of the circle",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 47,
            "description": "The circumference of the circle.",
            "itemtype": "method",
            "name": "circumference",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 56,
            "description": "Sets the members of Circle to the specified values.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the center of the circle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the center of the circle.",
                    "type": "Number"
                },
                {
                    "name": "diameter",
                    "description": "The diameter of the circle in pixels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This circle object",
                "type": "Circle"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 72,
            "description": "Copies the x, y and diameter properties from any given object to this Circle.",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "source",
                    "description": "- The object to copy from.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This Circle object.",
                "type": "Circle"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 82,
            "description": "Copies the x, y and diameter properties from this Circle to any given object.",
            "itemtype": "method",
            "name": "copyTo",
            "params": [
                {
                    "name": "dest",
                    "description": "- The object to copy to.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This dest object.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 95,
            "description": "Returns the distance from the center of the Circle object to the given object\n(can be Circle, Point or anything with x/y properties)",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "dest",
                    "description": "The target object. Must have visible x and y properties that represent the center of the object.",
                    "type": "Object"
                },
                {
                    "name": "optional",
                    "description": "round Round the distance to the nearest integer (default false)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "return": {
                "description": "The distance between this Point object and the destination Point object.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 118,
            "description": "Returns a new Circle object with the same values for the x, y, width, and height properties as this Circle object.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "out",
                    "description": "Optional Circle object. If given the values will be set into the object, otherwise a brand new Circle object will be created and returned.",
                    "type": "Phaser.Circle"
                }
            ],
            "return": {
                "description": "The cloned Circle object.",
                "type": "Phaser.Circle"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 132,
            "description": "Return true if the given x/y coordinates are within this Circle object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X value of the coordinate to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y value of the coordinate to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the coordinates are within this circle, otherwise false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 143,
            "description": "Returns a Point object containing the coordinates of a point on the circumference of the Circle based on the given angle.",
            "itemtype": "method",
            "name": "circumferencePoint",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians (unless asDegrees is true) to return the point from.",
                    "type": "Number"
                },
                {
                    "name": "asDegrees",
                    "description": "Is the given angle in radians (false) or degrees (true)?",
                    "type": "Bool"
                },
                {
                    "name": "optional",
                    "description": "output An optional Point object to put the result in to. If none specified a new Point object will be created.",
                    "type": "Phaser.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Point object holding the result.",
                "type": "Phaser.Point"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 155,
            "description": "Adjusts the location of the Circle object, as determined by its center coordinate, by the specified amounts.",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "dx",
                    "description": "Moves the x value of the Circle object by this amount.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Moves the y value of the Circle object by this amount.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Circle object.",
                "type": "Circle"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 168,
            "description": "Adjusts the location of the Circle object using a Point object as a parameter. This method is similar to the Circle.offset() method, except that it takes a Point object as a parameter.",
            "itemtype": "method",
            "name": "offsetPoint",
            "params": [
                {
                    "name": "point",
                    "description": "A Point object to use to offset this Circle object (or any valid object with exposed x and y properties).",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "This Circle object.",
                "type": "Circle"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 178,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 193,
            "description": "The diameter of the circle. The largest distance between any two points on the circle. The same as the radius * 2.",
            "itemtype": "method",
            "name": "diameter",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 202,
            "description": "The diameter of the circle. The largest distance between any two points on the circle. The same as the radius * 2.",
            "itemtype": "method",
            "name": "diameter",
            "params": [
                {
                    "name": "The",
                    "description": "diameter of the circle.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 218,
            "description": "The radius of the circle. The length of a line extending from the center of the circle to any point on the circle itself. The same as half the diameter.",
            "itemtype": "method",
            "name": "radius",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 227,
            "description": "The radius of the circle. The length of a line extending from the center of the circle to any point on the circle itself. The same as half the diameter.",
            "itemtype": "method",
            "name": "radius",
            "params": [
                {
                    "name": "The",
                    "description": "radius of the circle.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 243,
            "description": "The x coordinate of the leftmost point of the circle. Changing the left property of a Circle object has no effect on the x and y properties. However it does affect the diameter, whereas changing the x value does not affect the diameter property.",
            "itemtype": "method",
            "name": "left",
            "return": {
                "description": "The x coordinate of the leftmost point of the circle.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 252,
            "description": "The x coordinate of the leftmost point of the circle. Changing the left property of a Circle object has no effect on the x and y properties. However it does affect the diameter, whereas changing the x value does not affect the diameter property.",
            "itemtype": "method",
            "name": "left",
            "params": [
                {
                    "name": "The",
                    "description": "value to adjust the position of the leftmost point of the circle by.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 270,
            "description": "The x coordinate of the rightmost point of the circle. Changing the right property of a Circle object has no effect on the x and y properties. However it does affect the diameter, whereas changing the x value does not affect the diameter property.",
            "itemtype": "method",
            "name": "right",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 279,
            "description": "The x coordinate of the rightmost point of the circle. Changing the right property of a Circle object has no effect on the x and y properties. However it does affect the diameter, whereas changing the x value does not affect the diameter property.",
            "itemtype": "method",
            "name": "right",
            "params": [
                {
                    "name": "The",
                    "description": "amount to adjust the diameter of the circle by.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 297,
            "description": "The sum of the y minus the radius property. Changing the top property of a Circle object has no effect on the x and y properties, but does change the diameter.",
            "itemtype": "method",
            "name": "bottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 306,
            "description": "The sum of the y minus the radius property. Changing the top property of a Circle object has no effect on the x and y properties, but does change the diameter.",
            "itemtype": "method",
            "name": "bottom",
            "params": [
                {
                    "name": "The",
                    "description": "amount to adjust the height of the circle by.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 324,
            "description": "The sum of the y and radius properties. Changing the bottom property of a Circle object has no effect on the x and y properties, but does change the diameter.",
            "itemtype": "method",
            "name": "bottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 333,
            "description": "The sum of the y and radius properties. Changing the bottom property of a Circle object has no effect on the x and y properties, but does change the diameter.",
            "itemtype": "method",
            "name": "bottom",
            "params": [
                {
                    "name": "The",
                    "description": "value to adjust the height of the circle by.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 352,
            "description": "Gets the area of this Circle.",
            "itemtype": "method",
            "name": "area",
            "return": {
                "description": "This area of this circle.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 369,
            "description": "Determines whether or not this Circle object is empty.",
            "itemtype": "method",
            "name": "empty",
            "return": {
                "description": "A value of true if the Circle objects diameter is less than or equal to 0; otherwise false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 378,
            "description": "Sets all of the Circle objects properties to 0. A Circle object is empty if its diameter is less than or equal to 0.",
            "itemtype": "method",
            "name": "setEmpty",
            "return": {
                "description": "This Circle object",
                "type": "Circle"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 391,
            "description": "Return true if the given x/y coordinates are within the Circle object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "a",
                    "description": "The Circle to be checked.",
                    "type": "Phaser.Circle"
                },
                {
                    "name": "x",
                    "description": "The X value of the coordinate to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y value of the coordinate to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the coordinates are within this circle, otherwise false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 415,
            "description": "Determines whether the two Circle objects match. This method compares the x, y and diameter properties.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "a",
                    "description": "The first Circle object.",
                    "type": "Phaser.Circle"
                },
                {
                    "name": "b",
                    "description": "The second Circle object.",
                    "type": "Phaser.Circle"
                }
            ],
            "return": {
                "description": "A value of true if the object has exactly the same values for the x, y and diameter properties as this Circle object; otherwise false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 426,
            "description": "Determines whether the two Circle objects intersect.\nThis method checks the radius distances between the two Circle objects to see if they intersect.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "a",
                    "description": "The first Circle object.",
                    "type": "Phaser.Circle"
                },
                {
                    "name": "b",
                    "description": "The second Circle object.",
                    "type": "Phaser.Circle"
                }
            ],
            "return": {
                "description": "A value of true if the specified object intersects with this Circle object; otherwise false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 438,
            "description": "Returns a Point object containing the coordinates of a point on the circumference of the Circle based on the given angle.",
            "itemtype": "method",
            "name": "circumferencePoint",
            "params": [
                {
                    "name": "a",
                    "description": "The first Circle object.",
                    "type": "Phaser.Circle"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians (unless asDegrees is true) to return the point from.",
                    "type": "Number"
                },
                {
                    "name": "asDegrees",
                    "description": "Is the given angle in radians (false) or degrees (true)?",
                    "type": "Bool"
                },
                {
                    "name": "optional",
                    "description": "output An optional Point object to put the result in to. If none specified a new Point object will be created.",
                    "type": "Phaser.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Point object holding the result.",
                "type": "Phaser.Point"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Circle.js",
            "line": 463,
            "description": "Checks if the given Circle and Rectangle objects intersect.",
            "itemtype": "method",
            "name": "intersectsRectangle",
            "params": [
                {
                    "name": "c",
                    "description": "The Circle object to test.",
                    "type": "Phaser.Circle"
                },
                {
                    "name": "r",
                    "description": "The Rectangle object to test.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "True if the two objects intersect, otherwise false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser.Button"
        },
        {
            "file": "geom\\Point.js",
            "line": 31,
            "description": "Copies the x and y properties from any given object to this Point.",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "source",
                    "description": "- The object to copy from.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This Point object.",
                "type": "Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 41,
            "description": "Inverts the x and y values of this Point",
            "itemtype": "method",
            "name": "invert",
            "return": {
                "description": "This Point object.",
                "type": "Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 50,
            "description": "Sets the x and y values of this Point object to the given coordinates.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "x",
                    "description": "- The horizontal position of this point.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The vertical position of this point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Point object. Useful for chaining method calls.",
                "type": "Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 95,
            "description": "Clamps the x value of this Point to be between the given min and max",
            "itemtype": "method",
            "name": "clampX",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value to clamp this Point to",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value to clamp this Point to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 109,
            "description": "Clamps the y value of this Point to be between the given min and max",
            "itemtype": "method",
            "name": "clampY",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value to clamp this Point to",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value to clamp this Point to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 123,
            "description": "Clamps this Point object values to be between the given min and max",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value to clamp this Point to",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value to clamp this Point to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 138,
            "description": "Creates a copy of the given Point.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "output",
                    "description": "Optional Point object. If given the values will be set into this object, otherwise a brand new Point object will be created and returned.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 152,
            "description": "Copies the x and y properties from any given object to this Point.",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "source",
                    "description": "- The object to copy from.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This Point object.",
                "type": "Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 162,
            "description": "Copies the x and y properties from this Point to any given object.",
            "itemtype": "method",
            "name": "copyTo",
            "params": [
                {
                    "name": "dest",
                    "description": "- The object to copy to.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The dest object.",
                "type": "Object"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 177,
            "description": "Returns the distance of this Point object to the given object (can be a Circle, Point or anything with x/y properties)",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "dest",
                    "description": "The target object. Must have visible x and y properties that represent the center of the object.",
                    "type": "Object"
                },
                {
                    "name": "optional",
                    "description": "round Round the distance to the nearest integer (default false)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "return": {
                "description": "The distance between this Point object and the destination Point object.",
                "type": "Number"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 190,
            "description": "Determines whether the given objects x/y values are equal to this Point object.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "a",
                    "description": "The first object to compare.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "A value of true if the Points are equal, otherwise false.",
                "type": "Bool"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 200,
            "description": "Rotates this Point around the x/y coordinates given to the desired angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the anchor point",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians (unless asDegrees is true) to rotate the Point to.",
                    "type": "Number"
                },
                {
                    "name": "asDegrees",
                    "description": "Is the given rotation in radians (false) or degrees (true)?",
                    "type": "Bool"
                },
                {
                    "name": "distance",
                    "description": "An optional distance constraint between the Point and the anchor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The modified point object",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 214,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 227,
            "description": "Adds the coordinates of two points together to create a new point.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "a",
                    "description": "The first Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "b",
                    "description": "The second Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "out",
                    "description": "Optional Point to store the value in, if not supplied a new Point object will be created.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 246,
            "description": "Subtracts the coordinates of two points to create a new point.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "a",
                    "description": "The first Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "b",
                    "description": "The second Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "out",
                    "description": "Optional Point to store the value in, if not supplied a new Point object will be created.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 265,
            "description": "Multiplies the coordinates of two points to create a new point.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "a",
                    "description": "The first Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "b",
                    "description": "The second Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "out",
                    "description": "Optional Point to store the value in, if not supplied a new Point object will be created.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 284,
            "description": "Divides the coordinates of two points to create a new point.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "a",
                    "description": "The first Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "b",
                    "description": "The second Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "out",
                    "description": "Optional Point to store the value in, if not supplied a new Point object will be created.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 303,
            "description": "Determines whether the two given Point objects are equal. They are considered equal if they have the same x and y values.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "a",
                    "description": "The first Point object.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "b",
                    "description": "The second Point object.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "A value of true if the Points are equal, otherwise false.",
                "type": "Bool"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 314,
            "description": "Returns the distance of this Point object to the given object (can be a Circle, Point or anything with x/y properties)",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "a",
                    "description": "The target object. Must have visible x and y properties that represent the center of the object.",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The target object. Must have visible x and y properties that represent the center of the object.",
                    "type": "Object"
                },
                {
                    "name": "optional",
                    "description": "round Round the distance to the nearest integer (default false)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "return": {
                "description": "The distance between this Point object and the destination Point object.",
                "type": "Number"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Point.js",
            "line": 337,
            "description": "Rotates a Point around the x/y coordinates given to the desired angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "a",
                    "description": "The Point object to rotate.",
                    "type": "Phaser.Point"
                },
                {
                    "name": "x",
                    "description": "The x coordinate of the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the anchor point",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians (unless asDegrees is true) to rotate the Point to.",
                    "type": "Number"
                },
                {
                    "name": "asDegrees",
                    "description": "Is the given rotation in radians (false) or degrees (true)?",
                    "type": "Bool"
                },
                {
                    "name": "distance",
                    "description": "An optional distance constraint between the Point and the anchor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The modified point object",
                "type": "Phaser.Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 19,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 26,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 33,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 40,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 51,
            "description": "Adjusts the location of the Rectangle object, as determined by its top-left corner, by the specified amounts.",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "dx",
                    "description": "Moves the x value of the Rectangle object by this amount.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Moves the y value of the Rectangle object by this amount.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Rectangle object.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 67,
            "description": "Adjusts the location of the Rectangle object using a Point object as a parameter. This method is similar to the Rectangle.offset() method, except that it takes a Point object as a parameter.",
            "itemtype": "method",
            "name": "offsetPoint",
            "params": [
                {
                    "name": "point",
                    "description": "A Point object to use to offset this Rectangle object.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "This Rectangle object.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 77,
            "description": "Sets the members of Rectangle to the specified values.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the top-left corner of the Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the top-left corner of the Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the Rectangle in pixels.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the Rectangle in pixels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Rectangle object",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 97,
            "description": "Runs Math.floor() on both the x and y values of this Rectangle.",
            "itemtype": "method",
            "name": "floor",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 108,
            "description": "Copies the x, y, width and height properties from any given object to this Rectangle.",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "source",
                    "description": "- The object to copy from.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This Rectangle object.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 118,
            "description": "Copies the x, y, width and height properties from this Rectangle to any given object.",
            "itemtype": "method",
            "name": "copyTo",
            "params": [
                {
                    "name": "source",
                    "description": "- The object to copy to.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This object.",
                "type": "Object"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 135,
            "description": "Increases the size of the Rectangle object by the specified amounts. The center point of the Rectangle object stays the same, and its size increases to the left and right by the dx value, and to the top and the bottom by the dy value.",
            "itemtype": "method",
            "name": "inflate",
            "params": [
                {
                    "name": "dx",
                    "description": "The amount to be added to the left side of the Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "The amount to be added to the bottom side of the Rectangle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Rectangle object.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 146,
            "description": "The size of the Rectangle object, expressed as a Point object with the values of the width and height properties.",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "output",
                    "description": "Optional Point object. If given the values will be set into the object, otherwise a brand new Point object will be created and returned.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The size of the Rectangle object",
                "type": "Phaser.Point"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 156,
            "description": "Returns a new Rectangle object with the same values for the x, y, width, and height properties as the original Rectangle object.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "output",
                    "description": "Optional Rectangle object. If given the values will be set into the object, otherwise a brand new Rectangle object will be created and returned.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 166,
            "description": "Determines whether the specified coordinates are contained within the region defined by this Rectangle object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the point to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the point to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A value of true if the Rectangle object contains the specified point; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 177,
            "description": "Determines whether the first Rectangle object is fully contained within the second Rectangle object.\nA Rectangle object is said to contain another if the second Rectangle object falls entirely within the boundaries of the first.",
            "itemtype": "method",
            "name": "containsRect",
            "params": [
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A value of true if the Rectangle object contains the specified point; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 188,
            "description": "Determines whether the two Rectangles are equal.\nThis method compares the x, y, width and height properties of each Rectangle.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A value of true if the two Rectangles have exactly the same values for the x, y, width and height properties; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 199,
            "description": "If the Rectangle object specified in the toIntersect parameter intersects with this Rectangle object, returns the area of intersection as a Rectangle object. If the Rectangles do not intersect, this method returns an empty Rectangle object with its properties set to 0.",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "output",
                    "description": "Optional Rectangle object. If given the intersection values will be set into this object, otherwise a brand new Rectangle object will be created and returned.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A Rectangle object that equals the area of intersection. If the Rectangles do not intersect, this method returns an empty Rectangle object; that is, a Rectangle with its x, y, width, and height properties set to 0.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 210,
            "description": "Determines whether the two Rectangles intersect with each other.\nThis method checks the x, y, width, and height properties of the Rectangles.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "tolerance",
                    "description": "A tolerance value to allow for an intersection test with padding, default to 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A value of true if the specified object intersects with this Rectangle object; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 222,
            "description": "Determines whether the object specified intersects (overlaps) with the given values.",
            "itemtype": "method",
            "name": "intersectsRaw",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottomt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tolerance",
                    "description": "A tolerance value to allow for an intersection test with padding, default to 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A value of true if the specified object intersects with the Rectangle; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 236,
            "description": "Adds two Rectangles together to create a new Rectangle object, by filling in the horizontal and vertical space between the two Rectangles.",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "output",
                    "description": "Optional Rectangle object. If given the new values will be set into this object, otherwise a brand new Rectangle object will be created and returned.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A Rectangle object that is the union of the two Rectangles.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 247,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 262,
            "description": "Half of the width of the Rectangle",
            "itemtype": "property",
            "name": "halfWidth",
            "type": "Number",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 275,
            "description": "Half of the height of the Rectangle",
            "itemtype": "property",
            "name": "halfHeight",
            "type": "Number",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 288,
            "description": "The sum of the y and height properties. Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.",
            "itemtype": "method",
            "name": "bottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 297,
            "description": "The sum of the y and height properties. Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.",
            "itemtype": "method",
            "name": "bottom",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 314,
            "description": "Get the location of the Rectangles bottom right corner as a Point object.",
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 322,
            "description": "Sets the bottom-right corner of the Rectangle, determined by the values of the given Point object.",
            "itemtype": "method",
            "name": "bottomRight",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Point"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 336,
            "description": "The x coordinate of the left of the Rectangle. Changing the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.",
            "itemtype": "method",
            "name": "left",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 345,
            "description": "The x coordinate of the left of the Rectangle. Changing the left property of a Rectangle object has no effect on the y and height properties.\nHowever it does affect the width, whereas changing the x value does not affect the width property.",
            "itemtype": "method",
            "name": "left",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 364,
            "description": "The sum of the x and width properties. Changing the right property of a Rectangle object has no effect on the x, y and height properties.\nHowever it does affect the width property.",
            "itemtype": "method",
            "name": "right",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 374,
            "description": "The sum of the x and width properties. Changing the right property of a Rectangle object has no effect on the x, y and height properties.\nHowever it does affect the width property.",
            "itemtype": "method",
            "name": "right",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 392,
            "description": "The volume of the Rectangle derived from width * height",
            "itemtype": "method",
            "name": "volume",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 405,
            "description": "The perimeter size of the Rectangle. This is the sum of all 4 sides.",
            "itemtype": "method",
            "name": "perimeter",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 418,
            "description": "The x coordinate of the center of the Rectangle.",
            "itemtype": "method",
            "name": "centerX",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 427,
            "description": "The x coordinate of the center of the Rectangle.",
            "itemtype": "method",
            "name": "centerX",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 440,
            "description": "The y coordinate of the center of the Rectangle.",
            "itemtype": "method",
            "name": "centerY",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 449,
            "description": "The y coordinate of the center of the Rectangle.",
            "itemtype": "method",
            "name": "centerY",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 462,
            "description": "The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\nHowever it does affect the height property, whereas changing the y value does not affect the height property.",
            "itemtype": "method",
            "name": "top",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 472,
            "description": "The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\nHowever it does affect the height property, whereas changing the y value does not affect the height property.",
            "itemtype": "method",
            "name": "top",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 491,
            "description": "Get the location of the Rectangles top left corner as a Point object.",
            "return": {
                "description": "The new Point object.",
                "type": "Phaser.Point"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 499,
            "description": "The location of the Rectangles top-left corner, determined by the x and y coordinates of the Point.",
            "itemtype": "method",
            "name": "topLeft",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Point"
                }
            ],
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 513,
            "description": "Determines whether or not this Rectangle object is empty.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "A value of true if the Rectangle objects width or height is less than or equal to 0; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 522,
            "description": "Sets all of the Rectangle object's properties to 0. A Rectangle object is empty if its width or height is less than or equal to 0.",
            "itemtype": "method",
            "name": "setEmpty",
            "return": {
                "description": "This Rectangle object",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 535,
            "description": "Increases the size of the Rectangle object by the specified amounts. The center point of the Rectangle object stays the same, and its size increases to the left and right by the dx value, and to the top and the bottom by the dy value.",
            "itemtype": "method",
            "name": "inflate",
            "params": [
                {
                    "name": "a",
                    "description": "The Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "dx",
                    "description": "The amount to be added to the left side of the Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "The amount to be added to the bottom side of the Rectangle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Rectangle object.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 551,
            "description": "Increases the size of the Rectangle object. This method is similar to the Rectangle.inflate() method except it takes a Point object as a parameter.",
            "itemtype": "method",
            "name": "inflatePoint",
            "params": [
                {
                    "name": "a",
                    "description": "The Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "point",
                    "description": "The x property of this Point object is used to increase the horizontal dimension of the Rectangle object. The y property is used to increase the vertical dimension of the Rectangle object.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The Rectangle object.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 562,
            "description": "The size of the Rectangle object, expressed as a Point object with the values of the width and height properties.",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "a",
                    "description": "The Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "output",
                    "description": "Optional Point object. If given the values will be set into the object, otherwise a brand new Point object will be created and returned.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "The size of the Rectangle object",
                "type": "Phaser.Point"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 574,
            "description": "Returns a new Rectangle object with the same values for the x, y, width, and height properties as the original Rectangle object.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "a",
                    "description": "The Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "output",
                    "description": "Optional Rectangle object. If given the values will be set into the object, otherwise a brand new Rectangle object will be created and returned.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 586,
            "description": "Determines whether the specified coordinates are contained within the region defined by this Rectangle object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "a",
                    "description": "The Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "x",
                    "description": "The x coordinate of the point to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the point to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A value of true if the Rectangle object contains the specified point; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 598,
            "description": "Determines whether the specified point is contained within the rectangular region defined by this Rectangle object. This method is similar to the Rectangle.contains() method, except that it takes a Point object as a parameter.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "a",
                    "description": "The Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "point",
                    "description": "The point object being checked. Can be Point or any object with .x and .y values.",
                    "type": "Phaser.Point"
                }
            ],
            "return": {
                "description": "A value of true if the Rectangle object contains the specified point; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 609,
            "description": "Determines whether the first Rectangle object is fully contained within the second Rectangle object.\nA Rectangle object is said to contain another if the second Rectangle object falls entirely within the boundaries of the first.",
            "itemtype": "method",
            "name": "containsRect",
            "params": [
                {
                    "name": "a",
                    "description": "The first Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A value of true if the Rectangle object contains the specified point; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 629,
            "description": "Determines whether the two Rectangles are equal.\nThis method compares the x, y, width and height properties of each Rectangle.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "a",
                    "description": "The first Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A value of true if the two Rectangles have exactly the same values for the x, y, width and height properties; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 641,
            "description": "If the Rectangle object specified in the toIntersect parameter intersects with this Rectangle object, returns the area of intersection as a Rectangle object. If the Rectangles do not intersect, this method returns an empty Rectangle object with its properties set to 0.",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "a",
                    "description": "The first Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "output",
                    "description": "Optional Rectangle object. If given the intersection values will be set into this object, otherwise a brand new Rectangle object will be created and returned.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A Rectangle object that equals the area of intersection. If the Rectangles do not intersect, this method returns an empty Rectangle object; that is, a Rectangle with its x, y, width, and height properties set to 0.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 665,
            "description": "Determines whether the two Rectangles intersect with each other.\nThis method checks the x, y, width, and height properties of the Rectangles.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "a",
                    "description": "The first Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "tolerance",
                    "description": "A tolerance value to allow for an intersection test with padding, default to 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A value of true if the specified object intersects with this Rectangle object; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 682,
            "description": "Determines whether the object specified intersects (overlaps) with the given values.",
            "itemtype": "method",
            "name": "intersectsRaw",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottomt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tolerance",
                    "description": "A tolerance value to allow for an intersection test with padding, default to 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A value of true if the specified object intersects with the Rectangle; otherwise false.",
                "type": "Bool"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "geom\\Rectangle.js",
            "line": 700,
            "description": "Adds two Rectangles together to create a new Rectangle object, by filling in the horizontal and vertical space between the two Rectangles.",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "a",
                    "description": "The first Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "b",
                    "description": "The second Rectangle object.",
                    "type": "Phaser.Rectangle"
                },
                {
                    "name": "output",
                    "description": "Optional Rectangle object. If given the new values will be set into this object, otherwise a brand new Rectangle object will be created and returned.",
                    "type": "Phaser.Rectangle"
                }
            ],
            "return": {
                "description": "A Rectangle object that is the union of the two Rectangles.",
                "type": "Phaser.Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 1,
            "description": "Phaser.Input\n\nA game specific Input manager that looks after the mouse, keyboard and touch objects.\nThis is updated by the core game loop.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 24,
            "description": "How often should the input pointers be checked for updates?\nA value of 0 means every single frame (60fps), a value of 1 means every other frame (30fps) and so on.",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 32,
            "description": "A vector object representing the previous position of the Pointer.",
            "itemtype": "property",
            "name": "vector",
            "type": "{Vec2}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 39,
            "description": "X coordinate of the most recent Pointer event",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 46,
            "description": "X coordinate of the most recent Pointer event",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 53,
            "description": "You can disable all Input by setting Input.disabled: true. While set all new input related events will be ignored.\nIf you need to disable just one type of input, for example mouse, use Input.mouse.disabled: true instead",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 60,
            "description": "Controls the expected behaviour when using a mouse and touch together on a multi-input device",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 65,
            "description": "A vector object representing the current position of the Pointer.",
            "itemtype": "property",
            "name": "vector",
            "type": "{Vec2}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 72,
            "description": "A vector object representing the speed of the Pointer. Only really useful in single Pointer games,\notherwise see the Pointer objects directly.",
            "itemtype": "property",
            "name": "vector",
            "type": "{Vec2}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 80,
            "description": "A Circle object centered on the x/y screen coordinates of the Input.\nDefault size of 44px (Apples recommended \"finger tip\" size) but can be changed to anything",
            "itemtype": "property",
            "name": "circle",
            "type": "{Circle}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 88,
            "description": "The scale by which all input coordinates are multiplied, calculated by the StageScaleMode.\nIn an un-scaled game the values will be x: 1 and y: 1.",
            "type": "{Vec2}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 95,
            "description": "The maximum number of Pointers allowed to be active at any one time.\nFor lots of games it's useful to set this to 1",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 102,
            "description": "The current number of active Pointers.",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 108,
            "description": "The number of milliseconds that the Pointer has to be pressed down and then released to be considered a tap or click",
            "itemtype": "property",
            "name": "tapRate",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 115,
            "description": "The number of milliseconds between taps of the same Pointer for it to be considered a double tap / click",
            "itemtype": "property",
            "name": "doubleTapRate",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 122,
            "description": "The number of milliseconds that the Pointer has to be pressed down for it to fire a onHold event",
            "itemtype": "property",
            "name": "holdRate",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 129,
            "description": "The number of milliseconds below which the Pointer is considered justPressed",
            "itemtype": "property",
            "name": "justPressedRate",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 136,
            "description": "The number of milliseconds below which the Pointer is considered justReleased",
            "itemtype": "property",
            "name": "justReleasedRate",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 143,
            "description": "Sets if the Pointer objects should record a history of x/y coordinates they have passed through.\nThe history is cleared each time the Pointer is pressed down.\nThe history is updated at the rate specified in Input.pollRate",
            "itemtype": "property",
            "name": "recordPointerHistory",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 152,
            "description": "The rate in milliseconds at which the Pointer objects should update their tracking history",
            "itemtype": "property",
            "name": "recordRate",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 159,
            "description": "The total number of entries that can be recorded into the Pointer objects tracking history.\nIf the Pointer is tracking one event every 100ms, then a trackLimit of 100 would store the last 10 seconds worth of history.",
            "itemtype": "property",
            "name": "recordLimit",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 167,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer1",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 174,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer2",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 181,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer3",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 188,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer4",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 195,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer5",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 202,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer6",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 209,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer7",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 216,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer8",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 223,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer9",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 230,
            "description": "A Pointer object",
            "itemtype": "property",
            "name": "pointer10",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 237,
            "description": "The most recently active Pointer object.\nWhen you've limited max pointers to 1 this will accurately be either the first finger touched or mouse.",
            "itemtype": "property",
            "name": "activePointer",
            "type": "{Pointer}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 259,
            "description": "Starts the Input Manager running",
            "itemtype": "method",
            "name": "start",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 302,
            "description": "Add a new Pointer object to the Input Manager. By default Input creates 2 pointer objects for you. If you need more\nuse this to create a new one, up to a maximum of 10.",
            "itemtype": "method",
            "name": "addPointer",
            "return": {
                "description": "A reference to the new Pointer object",
                "type": "Pointer"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 333,
            "description": "Updates the Input Manager. Called by the core Game loop.",
            "itemtype": "method",
            "name": "update",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 366,
            "description": "Reset all of the Pointers and Input states",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "hard",
                    "description": "A soft reset (hard = false) won't reset any signals that might be bound. A hard reset will.",
                    "type": "Bool"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 419,
            "description": "Find the first free Pointer object and start it, passing in the event data.",
            "itemtype": "method",
            "name": "startPointer",
            "params": [
                {
                    "name": "event",
                    "description": "The event data from the Touch event",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The Pointer object that was started or null if no Pointer object is available",
                "type": "Pointer"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 455,
            "description": "Updates the matching Pointer object, passing in the event data.",
            "itemtype": "method",
            "name": "updatePointer",
            "params": [
                {
                    "name": "event",
                    "description": "The event data from the Touch event",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The Pointer object that was updated or null if no Pointer object is available",
                "type": "Pointer"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 486,
            "description": "Stops the matching Pointer object, passing in the event data.",
            "itemtype": "method",
            "name": "stopPointer",
            "params": [
                {
                    "name": "event",
                    "description": "The event data from the Touch event",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The Pointer object that was stopped or null if no Pointer object is available",
                "type": "Pointer"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 517,
            "description": "Get the next Pointer object whos active property matches the given state",
            "itemtype": "method",
            "name": "getPointer",
            "params": [
                {
                    "name": "state",
                    "description": "The state the Pointer should be in (false for inactive, true for active)",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "A Pointer object or null if no Pointer object matches the requested state.",
                "type": "Pointer"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 550,
            "description": "Get the Pointer object whos identified property matches the given identifier value",
            "itemtype": "method",
            "name": "getPointerFromIdentifier",
            "params": [
                {
                    "name": "identifier",
                    "description": "The Pointer.identifier value to search for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Pointer object or null if no Pointer object matches the requested identifier.",
                "type": "Pointer"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 581,
            "description": "Get the distance between two Pointer objects",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "pointer1",
                    "description": "",
                    "type": "Pointer"
                },
                {
                    "name": "pointer2",
                    "description": "",
                    "type": "Pointer"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 591,
            "description": "Get the angle between two Pointer objects",
            "itemtype": "method",
            "name": "getAngle",
            "params": [
                {
                    "name": "pointer1",
                    "description": "",
                    "type": "Pointer"
                },
                {
                    "name": "pointer2",
                    "description": "",
                    "type": "Pointer"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 607,
            "description": "The X coordinate of the most recently active pointer.\nThis value takes game scaling into account automatically. See Pointer.screenX/clientX for source values.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 625,
            "description": "The Y coordinate of the most recently active pointer.\nThis value takes game scaling into account automatically. See Pointer.screenY/clientY for source values.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 651,
            "description": "Get the total number of inactive Pointers",
            "itemtype": "method",
            "name": "totalInactivePointers",
            "return": {
                "description": "The number of Pointers currently inactive",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Input.js",
            "line": 664,
            "description": "Recalculates the total number of active Pointers",
            "itemtype": "method",
            "name": "totalActivePointers",
            "return": {
                "description": "The number of Pointers currently active",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 15,
            "description": "The PriorityID controls which Sprite receives an Input event first if they should overlap.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 32,
            "description": "Should we use pixel perfect hit detection? Warning: expensive. Only enable if you really need it!",
            "default": "false",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 38,
            "description": "The alpha tolerance threshold. If the alpha value of the pixel matches or is above this value, it's considered a hit.",
            "default": "255",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 44,
            "description": "Is this sprite allowed to be dragged by the mouse? true = yes, false = no",
            "default": "false",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 50,
            "description": "A region of the game world within which the sprite is restricted during drag",
            "default": "null",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 56,
            "description": "An Sprite the bounds of which this sprite is restricted during drag",
            "default": "null",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 62,
            "description": "If this object is set to consume the pointer event then it will stop all propogation from this object on.\nFor example if you had a stack of 6 sprites with the same priority IDs and one consumed the event, none of the others would receive it.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 167,
            "description": "Clean up memory.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 181,
            "description": "The x coordinate of the Input pointer, relative to the top-left of the parent Sprite.\nThis value is only set when the pointer is over this Sprite.",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 194,
            "description": "The y coordinate of the Input pointer, relative to the top-left of the parent Sprite\nThis value is only set when the pointer is over this Sprite.",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 207,
            "description": "If the Pointer is touching the touchscreen, or the mouse button is held down, isDown is set to true",
            "itemtype": "property",
            "name": "isDown",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 220,
            "description": "If the Pointer is not touching the touchscreen, or the mouse button is up, isUp is set to true",
            "itemtype": "property",
            "name": "isUp",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 233,
            "description": "A timestamp representing when the Pointer first touched the touchscreen.",
            "itemtype": "property",
            "name": "timeDown",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 246,
            "description": "A timestamp representing when the Pointer left the touchscreen.",
            "itemtype": "property",
            "name": "timeUp",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 259,
            "description": "Is the Pointer over this Sprite",
            "itemtype": "property",
            "name": "isOver",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 272,
            "description": "Is the Pointer outside of this Sprite",
            "itemtype": "property",
            "name": "isOut",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 285,
            "description": "A timestamp representing when the Pointer first touched the touchscreen.",
            "itemtype": "property",
            "name": "timeDown",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 298,
            "description": "A timestamp representing when the Pointer left the touchscreen.",
            "itemtype": "property",
            "name": "timeUp",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 311,
            "description": "Is this sprite being dragged by the mouse or not?",
            "default": "false",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 323,
            "description": "Checks if the given pointer is over this Sprite.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 386,
            "description": "Update",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 511,
            "description": "Updates the Pointer drag on this Sprite.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 552,
            "description": "Returns true if the pointer has entered the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "params": [
                {
                    "name": "delay",
                    "description": "The time below which the pointer is considered as just over."
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 566,
            "description": "Returns true if the pointer has left the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "params": [
                {
                    "name": "delay",
                    "description": "The time below which the pointer is considered as just out."
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 580,
            "description": "Returns true if the pointer has entered the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "params": [
                {
                    "name": "delay",
                    "description": "The time below which the pointer is considered as just over."
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 594,
            "description": "Returns true if the pointer has left the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "params": [
                {
                    "name": "delay",
                    "description": "The time below which the pointer is considered as just out."
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 608,
            "description": "If the pointer is currently over this Sprite this returns how long it has been there for in milliseconds.",
            "return": {
                "description": "The number of milliseconds the pointer has been over the Sprite, or -1 if not over.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 625,
            "description": "If the pointer is currently over this Sprite this returns how long it has been there for in milliseconds.",
            "return": {
                "description": "The number of milliseconds the pointer has been pressed down on the Sprite, or -1 if not over.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 642,
            "description": "Make this Sprite draggable by the mouse. You can also optionally set mouseStartDragCallback and mouseStopDragCallback",
            "params": [
                {
                    "name": "lockCenter",
                    "description": "If false the Sprite will drag from where you click it minus the dragOffset. If true it will center itself to the tip of the mouse pointer."
                },
                {
                    "name": "bringToTop",
                    "description": "If true the Sprite will be bought to the top of the rendering list in its current Group."
                },
                {
                    "name": "pixelPerfect",
                    "description": "If true it will use a pixel perfect test to see if you clicked the Sprite. False uses the bounding box."
                },
                {
                    "name": "alphaThreshold",
                    "description": "If using pixel perfect collision this specifies the alpha level from 0 to 255 above which a collision is processed (default 255)"
                },
                {
                    "name": "boundsRect",
                    "description": "If you want to restrict the drag of this sprite to a specific FlxRect, pass the FlxRect here, otherwise it's free to drag anywhere"
                },
                {
                    "name": "boundsSprite",
                    "description": "If you want to restrict the drag of this sprite to within the bounding box of another sprite, pass it here"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 683,
            "description": "Stops this sprite from being able to be dragged. If it is currently the target of an active drag it will be stopped immediately. Also disables any set callbacks.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 702,
            "description": "Called by Pointer when drag starts on this Sprite. Should not usually be called directly.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 732,
            "description": "Called by Pointer when drag is stopped on this Sprite. Should not usually be called directly.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 752,
            "description": "Restricts this sprite to drag movement only on the given axis. Note: If both are set to false the sprite will never move!",
            "params": [
                {
                    "name": "allowHorizontal",
                    "description": "To enable the sprite to be dragged horizontally set to true, otherwise false"
                },
                {
                    "name": "allowVertical",
                    "description": "To enable the sprite to be dragged vertically set to true, otherwise false"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 768,
            "description": "Make this Sprite snap to the given grid either during drag or when it's released.\nFor example 16x16 as the snapX and snapY would make the sprite snap to every 16 pixels.",
            "params": [
                {
                    "name": "snapX",
                    "description": "The width of the grid cell in pixels"
                },
                {
                    "name": "snapY",
                    "description": "The height of the grid cell in pixels"
                },
                {
                    "name": "onDrag",
                    "description": "If true the sprite will snap to the grid while being dragged"
                },
                {
                    "name": "onRelease",
                    "description": "If true the sprite will snap to the grid when released"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 789,
            "description": "Stops the sprite from snapping to a grid during drag or release.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 799,
            "description": "Bounds Rect check for the sprite drag",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\InputHandler.js",
            "line": 824,
            "description": "Parent Sprite Bounds check for the sprite drag",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 13,
            "description": "You can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 46,
            "description": "By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\nThere are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\nYou can use addKeyCapture to consume the keyboard event for specific keys so it doesn't bubble up to the the browser.\nPass in either a single keycode or an array/hash of keycodes.",
            "params": [
                {
                    "name": "keycode",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 68,
            "params": [
                {
                    "name": "keycode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 83,
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 114,
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 154,
            "params": [
                {
                    "name": "keycode",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 172,
            "params": [
                {
                    "name": "keycode",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Keyboard.js",
            "line": 190,
            "params": [
                {
                    "name": "keycode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 1,
            "description": "Phaser.MSPointer\n\nThe MSPointer class handles touch interactions with the game and the resulting Pointer objects.\nIt will work only in Internet Explorer 10 and Windows Store or Windows Phone 8 apps using JavaScript.\nhttp://msdn.microsoft.com/en-us/library/ie/hh673557(v=vs.85).aspx",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 23,
            "description": "You can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 33,
            "description": "Starts the event listeners running",
            "itemtype": "method",
            "name": "start",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 66,
            "itemtype": "method",
            "name": "onPointerDown",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 84,
            "itemtype": "method",
            "name": "onPointerMove",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 102,
            "itemtype": "method",
            "name": "onPointerUp",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\MSPointer.js",
            "line": 120,
            "description": "Stop the event listeners",
            "itemtype": "method",
            "name": "stop",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 20,
            "description": "You can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 26,
            "description": "If the mouse has been Pointer Locked successfully this will be set to true.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 32,
            "description": "Starts the event listeners running",
            "itemtype": "method",
            "name": "start",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 64,
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 85,
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 106,
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Mouse.js",
            "line": 179,
            "description": "Stop the event listeners",
            "itemtype": "method",
            "name": "stop",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 1,
            "description": "Phaser - Pointer\n\nA Pointer object is used by the Mouse, Touch and MSPoint managers and represents a single finger on the touch screen.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 8,
            "description": "Local private variable to store the status of dispatching a hold event",
            "itemtype": "property",
            "name": "_holdSent",
            "type": "{bool}",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 16,
            "description": "Local private variable storing the short-term history of pointer movements",
            "itemtype": "property",
            "name": "_history",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 24,
            "description": "Local private variable storing the time at which the next history drop should occur",
            "itemtype": "property",
            "name": "_lastDrop",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 35,
            "description": "A Vector object containing the initial position when the Pointer was engaged with the screen.",
            "itemtype": "property",
            "name": "positionDown",
            "type": "{Vec2}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 42,
            "description": "A Vector object containing the current position of the Pointer on the screen.",
            "itemtype": "property",
            "name": "position",
            "type": "{Vec2}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 49,
            "description": "A Circle object centered on the x/y screen coordinates of the Pointer.\nDefault size of 44px (Apple's recommended \"finger tip\" size)",
            "itemtype": "property",
            "name": "circle",
            "type": "{Circle}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 57,
            "itemtype": "property",
            "name": "withinGame",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 64,
            "description": "The horizontal coordinate of point relative to the viewport in pixels, excluding any scroll offset",
            "itemtype": "property",
            "name": "clientX",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 71,
            "description": "The vertical coordinate of point relative to the viewport in pixels, excluding any scroll offset",
            "itemtype": "property",
            "name": "clientY",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 78,
            "description": "The horizontal coordinate of point relative to the viewport in pixels, including any scroll offset",
            "itemtype": "property",
            "name": "pageX",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 85,
            "description": "The vertical coordinate of point relative to the viewport in pixels, including any scroll offset",
            "itemtype": "property",
            "name": "pageY",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 92,
            "description": "The horizontal coordinate of point relative to the screen in pixels",
            "itemtype": "property",
            "name": "screenX",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 99,
            "description": "The vertical coordinate of point relative to the screen in pixels",
            "itemtype": "property",
            "name": "screenY",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 106,
            "description": "The horizontal coordinate of point relative to the game element. This value is automatically scaled based on game size.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 113,
            "description": "The vertical coordinate of point relative to the game element. This value is automatically scaled based on game size.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 120,
            "description": "If the Pointer is a mouse this is true, otherwise false",
            "itemtype": "property",
            "name": "isMouse",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 127,
            "description": "If the Pointer is touching the touchscreen, or the mouse button is held down, isDown is set to true",
            "itemtype": "property",
            "name": "isDown",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 134,
            "description": "If the Pointer is not touching the touchscreen, or the mouse button is up, isUp is set to true",
            "itemtype": "property",
            "name": "isUp",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 141,
            "description": "A timestamp representing when the Pointer first touched the touchscreen.",
            "itemtype": "property",
            "name": "timeDown",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 148,
            "description": "A timestamp representing when the Pointer left the touchscreen.",
            "itemtype": "property",
            "name": "timeUp",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 155,
            "description": "A timestamp representing when the Pointer was last tapped or clicked",
            "itemtype": "property",
            "name": "previousTapTime",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 162,
            "description": "The total number of times this Pointer has been touched to the touchscreen",
            "itemtype": "property",
            "name": "totalTouches",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 169,
            "description": "The number of miliseconds since the last click",
            "itemtype": "property",
            "name": "msSinceLastClick",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 176,
            "description": "The Game Object this Pointer is currently over / touching / dragging.",
            "itemtype": "property",
            "name": "targetObject",
            "type": "{Any}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 202,
            "description": "Called when the Pointer is pressed onto the touchscreen",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 300,
            "description": "Called when the Pointer is moved",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 440,
            "description": "Called when the Pointer leaves the target area",
            "itemtype": "method",
            "name": "leave",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 452,
            "description": "Called when the Pointer leaves the touchscreen",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 531,
            "description": "The Pointer is considered justPressed if the time it was pressed onto the touchscreen or clicked is less than justPressedRate",
            "itemtype": "method",
            "name": "justPressed",
            "params": [
                {
                    "name": "duration",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 545,
            "description": "The Pointer is considered justReleased if the time it left the touchscreen is less than justReleasedRate",
            "itemtype": "method",
            "name": "justReleased",
            "params": [
                {
                    "name": "duration",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 559,
            "description": "Resets the Pointer properties. Called by InputManager.reset when you perform a State change.",
            "itemtype": "method",
            "name": "reset",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 587,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 600,
            "description": "How long the Pointer has been depressed on the touchscreen. If not currently down it returns -1.",
            "itemtype": "property",
            "name": "duration",
            "type": "{Number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 620,
            "description": "Gets the X value of this Pointer in world coordinates based on the given camera.",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Pointer.js",
            "line": 634,
            "description": "Gets the Y value of this Pointer in world coordinates based on the given camera.",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 1,
            "description": "Phaser - Touch\n\nThe Touch class handles touch interactions with the game and the resulting Pointer objects.\nhttp://www.w3.org/TR/touch-events/\nhttps://developer.mozilla.org/en-US/docs/DOM/TouchList\nhttp://www.html5rocks.com/en/mobile/touchandmouse/\nNote: Android 2.x only supports 1 touch event at once, no multi-touch",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 30,
            "description": "You can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 44,
            "description": "Starts the event listeners running",
            "itemtype": "method",
            "name": "start",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 88,
            "description": "Consumes all touchmove events on the document (only enable this if you know you need it!)",
            "itemtype": "method",
            "name": "consumeTouchMove",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 103,
            "itemtype": "method",
            "name": "onTouchStart",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 135,
            "description": "Touch cancel - touches that were disrupted (perhaps by moving into a plugin or browser chrome)\nOccurs for example on iOS when you put down 4 fingers and the app selector UI appears",
            "itemtype": "method",
            "name": "onTouchCancel",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 167,
            "description": "For touch enter and leave its a list of the touch points that have entered or left the target\nDoesn't appear to be supported by most browsers on a canvas element yet",
            "itemtype": "method",
            "name": "onTouchEnter",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 197,
            "description": "For touch enter and leave its a list of the touch points that have entered or left the target\nDoesn't appear to be supported by most browsers on a canvas element yet",
            "itemtype": "method",
            "name": "onTouchLeave",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 222,
            "itemtype": "method",
            "name": "onTouchMove",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 246,
            "itemtype": "method",
            "name": "onTouchEnd",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "input\\Touch.js",
            "line": 273,
            "description": "Stop the event listeners",
            "itemtype": "method",
            "name": "stop",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 1,
            "description": "Cache\n\nA game only has one instance of a Cache and it is used to store all externally loaded assets such\nas images, sounds and data files as a result of Loader calls. Cache items use string based keys for look-up.",
            "package": "Phaser.Cache",
            "author": "Richard Davey <rich@photonstorm.com>",
            "copyright": "2013 Photon Storm Ltd.",
            "license": "https://github.com/photonstorm/phaser/blob/master/license.txt  MIT License",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 14,
            "description": "Local reference to Game.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 19,
            "description": "Canvas key-value container.",
            "type": "{object}",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 26,
            "description": "Image key-value container.",
            "type": "{object}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 32,
            "description": "RenderTexture key-value container.",
            "type": "{object}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 38,
            "description": "Sound key-value container.",
            "type": "{object}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 44,
            "description": "Text key-value container.",
            "type": "{object}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 50,
            "description": "Tilemap key-value container.",
            "type": "{object}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 64,
            "description": "Add a new canvas.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for this canvas.",
                    "type": "String"
                },
                {
                    "name": "canvas",
                    "description": "Canvas DOM element.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "context",
                    "description": "Render context of this canvas.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 76,
            "description": "Add a new canvas.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for this canvas.",
                    "type": "String"
                },
                {
                    "name": "canvas",
                    "description": "A RenderTexture.",
                    "type": "RenderTexture"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 89,
            "description": "Add a new sprite sheet.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the sprite sheet.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this sprite sheet file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra sprite sheet data.",
                    "type": "Object"
                },
                {
                    "name": "frameWidth",
                    "description": "Width of the sprite sheet.",
                    "type": "Number"
                },
                {
                    "name": "frameHeight",
                    "description": "Height of the sprite sheet.",
                    "type": "Number"
                },
                {
                    "name": "frameMax",
                    "description": "How many frames stored in the sprite sheet.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 109,
            "description": "Add a new tilemap.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the texture atlas.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra texture atlas data.",
                    "type": "Object"
                },
                {
                    "name": "atlasData",
                    "description": "Texture atlas frames data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 125,
            "description": "Add a new texture atlas.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the texture atlas.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra texture atlas data.",
                    "type": "Object"
                },
                {
                    "name": "atlasData",
                    "description": "Texture atlas frames data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 154,
            "description": "Add a new Bitmap Font.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the font texture.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this font xml file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra font data.",
                    "type": "Object"
                },
                {
                    "name": "xmlData",
                    "description": "Texture atlas frames data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 173,
            "description": "Adds a default image to be used when a key is wrong / missing.\nIs mapped to the key __default",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 192,
            "description": "Add a new image.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the image.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this image file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra image data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 208,
            "description": "Add a new sound.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the sound.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this sound file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra sound data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 266,
            "description": "Add a new decoded sound.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the sound.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra sound data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 279,
            "description": "Add a new text data.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the text data.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of this text data file.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Extra text data.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 294,
            "description": "Get canvas by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the canvas you want."
                }
            ],
            "return": {
                "description": "The canvas you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 309,
            "description": "Checks if an image key exists.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the image you want."
                }
            ],
            "return": {
                "description": "True if the key exists, otherwise false.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 325,
            "description": "Get image data by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the image you want."
                }
            ],
            "return": {
                "description": "The image data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 340,
            "description": "Get tilemap data by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the tilemap you want."
                }
            ],
            "return": {
                "description": "The tilemap data. The tileset image is in the data property, the map data in mapData.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 355,
            "description": "Get frame data by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the frame data you want."
                }
            ],
            "return": {
                "description": "The frame data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 370,
            "description": "Get a single frame out of a frameData set by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the frame data you want."
                }
            ],
            "return": {
                "description": "The frame data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 385,
            "description": "Get a single frame out of a frameData set by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the frame data you want."
                }
            ],
            "return": {
                "description": "The frame data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 400,
            "description": "Get a single frame by key. You'd only do this to get the default Frame created for a non-atlas/spritesheet image.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the frame data you want."
                }
            ],
            "return": {
                "description": "The frame data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 415,
            "description": "Get a single frame by key. You'd only do this to get the default Frame created for a non-atlas/spritesheet image.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the frame data you want."
                }
            ],
            "return": {
                "description": "The frame data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 430,
            "description": "Get a RenderTexture by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the RenderTexture you want."
                }
            ],
            "return": {
                "description": "The RenderTexture you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 446,
            "description": "Get sound by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want."
                }
            ],
            "return": {
                "description": "The sound you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 462,
            "description": "Get sound data by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want."
                }
            ],
            "return": {
                "description": "The sound data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 478,
            "description": "Check whether an asset is decoded sound.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want."
                }
            ],
            "return": {
                "description": "The sound data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 492,
            "description": "Check whether an asset is decoded sound.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want."
                }
            ],
            "return": {
                "description": "The sound data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 503,
            "description": "Check whether an asset is sprite sheet.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sprite sheet you want."
                }
            ],
            "return": {
                "description": "The sprite sheet data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 519,
            "description": "Get text data by key.",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the text data you want."
                }
            ],
            "return": {
                "description": "The text data you want.",
                "type": "Object"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 551,
            "description": "Returns an array containing all of the keys of Images in the Cache.",
            "return": {
                "description": "The string based keys in the Cache.",
                "type": "Array"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 559,
            "description": "Returns an array containing all of the keys of Sounds in the Cache.",
            "return": {
                "description": "The string based keys in the Cache.",
                "type": "Array"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 567,
            "description": "Returns an array containing all of the keys of Text Files in the Cache.",
            "return": {
                "description": "The string based keys in the Cache.",
                "type": "Array"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Cache.js",
            "line": 591,
            "description": "Clean up cache memory.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 1,
            "description": "Phaser.Loader\n\nThe Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\nIt uses a combination of Image() loading and xhr and provides progress and completion callbacks.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 9,
            "description": "Local reference to Game.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 14,
            "description": "Array stores assets keys. So you can get that asset by its unique key.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 19,
            "description": "Contains all the assets file infos.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 24,
            "description": "Indicates assets loading progress. (from 0 to 100)",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 30,
            "description": "An XMLHttpRequest object used for loading text and audio data",
            "type": "{XMLHttpRequest}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 36,
            "description": "Length of assets queue.",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 42,
            "description": "True if the Loader is in the process of loading the queue.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 48,
            "description": "True if all assets in the queue have finished loading.",
            "type": "{bool}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 54,
            "description": "The Load progress percentage value (from 0 to 100)",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 60,
            "description": "You can optionally link a sprite to the preloader.\nIf you do so the Sprite's width or height will be cropped based on the percentage loaded.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 66,
            "description": "The crossOrigin value applied to loaded images",
            "type": "{string}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 72,
            "description": "If you want to append a URL before the path of any asset you can set this here.\nUseful if you need to allow an asset url to be configured outside of the game code.\nMUST have / on the end of it!",
            "type": "{string}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 80,
            "description": "Event Signals",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 90,
            "description": "TextureAtlas data format constants",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 120,
            "description": "Check whether asset exists with a specific key.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the asset you want to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return true if exists, otherwise return false.",
                "type": "Bool"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 138,
            "description": "Reset loader, this will remove all loaded assets.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 149,
            "description": "Internal function that adds a new entry to the file list.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 179,
            "description": "Add an image to the Loader.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it",
                    "type": "Boolean"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 196,
            "description": "Add a text file to the Loader.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the text file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of the text file.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 212,
            "description": "Add a new sprite sheet loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the sheet file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of sheet file.",
                    "type": "String"
                },
                {
                    "name": "frameWidth",
                    "description": "Width of each single frame.",
                    "type": "Number"
                },
                {
                    "name": "frameHeight",
                    "description": "Height of each single frame.",
                    "type": "Number"
                },
                {
                    "name": "frameMax",
                    "description": "How many frames in this sprite sheet.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 231,
            "description": "Add a new audio file loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the audio file.",
                    "type": "String"
                },
                {
                    "name": "urls",
                    "description": "An array containing the URLs of the audio files, i.e.: [ 'jump.mp3', 'jump.ogg', 'jump.m4a' ]",
                    "type": "Array"
                },
                {
                    "name": "autoDecode",
                    "description": "When using Web Audio the audio files can either be decoded at load time or run-time. They can't be played until they are decoded, but this let's you control when that happens. Decoding is a non-blocking async process.",
                    "type": "Bool"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 248,
            "description": "Add a new tilemap loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the tilemap data.",
                    "type": "String"
                },
                {
                    "name": "tilesetURL",
                    "description": "The url of the tile set image file.",
                    "type": "String"
                },
                {
                    "name": "mapDataURL",
                    "description": "The url of the map data file (csv/json)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "mapData",
                    "description": "An optional JSON data object (can be given in place of a URL).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "The format of the map data.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 294,
            "description": "Add a new bitmap font loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the bitmap font.",
                    "type": "String"
                },
                {
                    "name": "textureURL",
                    "description": "The url of the font image file.",
                    "type": "String"
                },
                {
                    "name": "xmlURL",
                    "description": "The url of the font data file (xml/fnt)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "xmlData",
                    "description": "An optional XML data object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 370,
            "description": "Add a new texture atlas loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "textureURL",
                    "description": "The url of the texture atlas image file.",
                    "type": "String"
                },
                {
                    "name": "atlasURL",
                    "description": "The url of the texture atlas data file (json/xml)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "atlasData",
                    "description": "A JSON or XML data object.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "A value describing the format of the data.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 449,
            "description": "Remove loading request of a file.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the file you want to remove.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 459,
            "description": "Remove all file loading requests.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 468,
            "description": "Load assets.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 498,
            "description": "Load files. Private method ONLY used by loader.",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 612,
            "description": "Error occured when load a file.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the error loading file.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 629,
            "description": "Called when a file is successfully loaded.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the successfully loaded file.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 792,
            "description": "Successfully loaded a JSON file.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the loaded JSON file.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 814,
            "description": "Successfully loaded a CSV file.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the loaded CSV file.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 829,
            "description": "Error occured when load a JSON.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the error loading JSON file.",
                    "type": "String"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Loader.js",
            "line": 889,
            "description": "Handle loading next file.",
            "params": [
                {
                    "name": "previousKey",
                    "description": "Key of previous loaded asset.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "Whether the previous asset loaded successfully or not.",
                    "type": "Bool"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "loader\\Parser.js",
            "line": 3,
            "description": "Parse frame data from an XML file.",
            "params": [
                {
                    "name": "xml",
                    "description": "XML data you want to parse.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Generated FrameData object.",
                "type": "FrameData"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 56,
            "description": "Snap a value to nearest grid slice, using rounding.\n\nexample if you have an interval gap of 5 and a position of 12... you will snap to 10. Where as 14 will snap to 15",
            "params": [
                {
                    "name": "input",
                    "description": "- the value to snap"
                },
                {
                    "name": "gap",
                    "description": "- the interval gap of the grid"
                },
                {
                    "name": "start",
                    "description": "- optional starting offset for gap",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 80,
            "description": "Snap a value to nearest grid slice, using floor.\n\nexample if you have an interval gap of 5 and a position of 12... you will snap to 10. As will 14 snap to 10... but 16 will snap to 15",
            "params": [
                {
                    "name": "input",
                    "description": "- the value to snap"
                },
                {
                    "name": "gap",
                    "description": "- the interval gap of the grid"
                },
                {
                    "name": "start",
                    "description": "- optional starting offset for gap",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 104,
            "description": "Snap a value to nearest grid slice, using ceil.\n\nexample if you have an interval gap of 5 and a position of 12... you will snap to 15. As will 14 will snap to 15... but 16 will snap to 20",
            "params": [
                {
                    "name": "input",
                    "description": "- the value to snap"
                },
                {
                    "name": "gap",
                    "description": "- the interval gap of the grid"
                },
                {
                    "name": "start",
                    "description": "- optional starting offset for gap",
                    "optional": true
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 129,
            "description": "Snaps a value to the nearest value in an array.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 157,
            "description": "roundTo some place comparative to a 'base', default is 10 for decimal place\n\n'place' is represented by the power applied to 'base' to get that place",
            "params": [
                {
                    "name": "value",
                    "description": "- the value to round"
                },
                {
                    "name": "place",
                    "description": "- the place to round to"
                },
                {
                    "name": "base",
                    "description": "- the base to round in... default is 10 for decimal\n\ne.g.\n\n2000/7 ~= 285.714285714285714285714 ~= (bin)100011101.1011011011011011\n\nroundTo(2000/7,3) == 0\nroundTo(2000/7,2) == 300\nroundTo(2000/7,1) == 290\nroundTo(2000/7,0) == 286\nroundTo(2000/7,-1) == 285.7\nroundTo(2000/7,-2) == 285.71\nroundTo(2000/7,-3) == 285.714\nroundTo(2000/7,-4) == 285.7143\nroundTo(2000/7,-5) == 285.71429\n\nroundTo(2000/7,3,2)  == 288       -- 100100000\nroundTo(2000/7,2,2)  == 284       -- 100011100\nroundTo(2000/7,1,2)  == 286       -- 100011110\nroundTo(2000/7,0,2)  == 286       -- 100011110\nroundTo(2000/7,-1,2) == 285.5     -- 100011101.1\nroundTo(2000/7,-2,2) == 285.75    -- 100011101.11\nroundTo(2000/7,-3,2) == 285.75    -- 100011101.11\nroundTo(2000/7,-4,2) == 285.6875  -- 100011101.1011\nroundTo(2000/7,-5,2) == 285.71875 -- 100011101.10111\n\nnote what occurs when we round to the 3rd space (8ths place), 100100000, this is to be assumed\nbecause we are rounding 100011.1011011011011011 which rounds up."
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 226,
            "description": "a one dimensional linear interpolation of a value.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 233,
            "description": "Find the angle of a segment from (x1, y1) -> (x2, y2 )",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 240,
            "description": "set an angle within the bounds of -PI to PI",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 252,
            "description": "closest angle between two angles from a1 to a2\nabsolute value the return for exact angle",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 278,
            "description": "interpolate across the shortest arc between two angles",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 293,
            "description": "Generate a random bool result based on the chance value\n<p>\nReturns true or false based on the chance value (default 50%). For example if you wanted a player to have a 30% chance\nof getting a bonus, call chanceRoll(30) - true means the chance passed, false means it failed.\n</p>",
            "params": [
                {
                    "name": "chance",
                    "description": "The chance of receiving the value. A number between 0 and 100 (effectively 0% to 100%)"
                }
            ],
            "return": {
                "description": "true if the roll passed, or false"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 328,
            "description": "Returns an Array containing the numbers from min to max (inclusive)",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value the array starts with"
                },
                {
                    "name": "max",
                    "description": "The maximum value the array contains"
                }
            ],
            "return": {
                "description": "The array of number values"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 348,
            "description": "Adds the given amount to the value, but never lets the value go over the specified maximum",
            "params": [
                {
                    "name": "value",
                    "description": "The value to add the amount to"
                },
                {
                    "name": "amount",
                    "description": "The amount to add to the value"
                },
                {
                    "name": "max",
                    "description": "The maximum the value is allowed to be"
                }
            ],
            "return": {
                "description": "The new value"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 369,
            "description": "Subtracts the given amount from the value, but never lets the value go below the specified minimum",
            "params": [
                {
                    "name": "value",
                    "description": "The base value"
                },
                {
                    "name": "amount",
                    "description": "The amount to subtract from the base value"
                },
                {
                    "name": "min",
                    "description": "The minimum the value is allowed to be"
                }
            ],
            "return": {
                "description": "The new value"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 390,
            "description": "Adds value to amount and ensures that the result always stays between 0 and max, by wrapping the value around.\n<p>Values must be positive integers, and are passed through Math.abs</p>",
            "params": [
                {
                    "name": "value",
                    "description": "The value to add the amount to"
                },
                {
                    "name": "amount",
                    "description": "The amount to add to the value"
                },
                {
                    "name": "max",
                    "description": "The maximum the value is allowed to be"
                }
            ],
            "return": {
                "description": "The wrapped value"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 411,
            "description": "Randomly returns either a 1 or -1",
            "return": {
                "description": "1 or -1"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 420,
            "description": "Returns true if the number given is odd.",
            "params": [
                {
                    "name": "n",
                    "description": "The number to check"
                }
            ],
            "return": {
                "description": "True if the given number is odd. False if the given number is even."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 433,
            "description": "Returns true if the number given is even.",
            "params": [
                {
                    "name": "n",
                    "description": "The number to check"
                }
            ],
            "return": {
                "description": "True if the given number is even. False if the given number is odd."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 453,
            "description": "Significantly faster version of Math.max\nSee http://jsperf.com/math-s-min-max-vs-homemade/5",
            "return": {
                "description": "The highest value from those given."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 473,
            "description": "Significantly faster version of Math.min\nSee http://jsperf.com/math-s-min-max-vs-homemade/5",
            "return": {
                "description": "The lowest value from those given."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 493,
            "description": "Keeps an angle value between -180 and +180<br>\nShould be called whenever the angle is updated on the Sprite to stop it from going insane.",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle value to check"
                }
            ],
            "return": {
                "description": "The new angle value, returns the same as the input angle if it was within bounds"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 523,
            "description": "Keeps an angle value between the given min and max values",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle value to check. Must be between -180 and +180"
                },
                {
                    "name": "min",
                    "description": "The minimum angle that is allowed (must be -180 or greater)"
                },
                {
                    "name": "max",
                    "description": "The maximum angle that is allowed (must be 180 or less)"
                }
            ],
            "return": {
                "description": "The new angle value, returns the same as the input angle if it was within bounds"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 542,
            "itemtype": "method",
            "name": "linearInterpolation",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 561,
            "itemtype": "method",
            "name": "bezierInterpolation",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 576,
            "itemtype": "method",
            "name": "catmullRomInterpolation",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 604,
            "itemtype": "method",
            "name": "Linear",
            "params": [
                {
                    "name": "p0",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "p1",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "t",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 615,
            "itemtype": "method",
            "name": "bernstein",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "i",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 625,
            "itemtype": "method",
            "name": "catmullRom",
            "params": [
                {
                    "name": "p0",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "p1",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "p3",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "t",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 643,
            "description": "Fetch a random entry from the given array.\nWill return null if random selection is missing, or array has no entries.",
            "params": [
                {
                    "name": "objects",
                    "description": "An array of objects."
                },
                {
                    "name": "startIndex",
                    "description": "Optional offset off the front of the array. Default value is 0, or the beginning of the array."
                },
                {
                    "name": "length",
                    "description": "Optional restriction on the number of values you want to randomly select from."
                }
            ],
            "return": {
                "description": "The random object that was selected."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 677,
            "description": "Round down to the next whole number. E.g. floor(1.7) == 1, and floor(-2.7) == -2.",
            "params": [
                {
                    "name": "Value",
                    "description": "Any number."
                }
            ],
            "return": {
                "description": "The rounded value of that number."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 692,
            "description": "Round up to the next whole number.  E.g. ceil(1.3) == 2, and ceil(-2.3) == -3.",
            "params": [
                {
                    "name": "Value",
                    "description": "Any number."
                }
            ],
            "return": {
                "description": "The rounded value of that number."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 704,
            "description": "Generate a sine and cosine table simultaneously and extremely quickly. Based on research by Franky of scene.at\n<p>\nThe parameters allow you to specify the length, amplitude and frequency of the wave. Once you have called this function\nyou should get the results via getSinTable() and getCosTable(). This generator is fast enough to be used in real-time.\n</p>",
            "params": [
                {
                    "name": "length",
                    "description": "The length of the wave"
                },
                {
                    "name": "sinAmplitude",
                    "description": "The amplitude to apply to the sine table (default 1.0) if you need values between say -+ 125 then give 125 as the value"
                },
                {
                    "name": "cosAmplitude",
                    "description": "The amplitude to apply to the cosine table (default 1.0) if you need values between say -+ 125 then give 125 as the value"
                },
                {
                    "name": "frequency",
                    "description": "The frequency of the sine and cosine table data"
                }
            ],
            "return": {
                "description": "Returns the sine table"
            },
            "see": [
                "getSinTable",
                "getCosTable"
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 745,
            "description": "Removes the top element from the stack and re-inserts it onto the bottom, then returns it.\nThe original stack is modified in the process.\nThis effectively moves the position of the data from the start to the end of the table.",
            "return": {
                "description": "The value."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 760,
            "description": "Shuffles the data in the given array into a new order",
            "params": [
                {
                    "name": "array",
                    "description": "The array to shuffle"
                }
            ],
            "return": {
                "description": "The array"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 779,
            "description": "Returns the distance between the two given set of coordinates.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance between this Point object and the destination Point object.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 803,
            "description": "force a value within the boundaries of two values\n\nClamp value to range <a, b>",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\Math.js",
            "line": 854,
            "description": "a value representing the sign of the value.\n-1 for negative, +1 for positive, 0 if value is 0",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 1,
            "description": "Phaser.RandomDataGenerator\n\nAn extremely useful repeatable random data generator. Access it via Phaser.Game.rnd\nBased on Nonsense by Josh Faul https://github.com/jocafa/Nonsense\nRandom number generator from http://baagoe.org/en/wiki/Better_random_numbers_for_javascript",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 18,
            "itemtype": "property",
            "name": "c",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 25,
            "itemtype": "property",
            "name": "s0",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 32,
            "itemtype": "property",
            "name": "s1",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 39,
            "itemtype": "property",
            "name": "s2",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 46,
            "description": "Private random helper",
            "itemtype": "method",
            "name": "rnd",
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 63,
            "description": "Reset the seed of the random data generator",
            "itemtype": "method",
            "name": "sow",
            "params": [
                {
                    "name": "seeds",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 89,
            "itemtype": "method",
            "name": "hash",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 115,
            "description": "Returns a random integer between 0 and 2^32",
            "itemtype": "method",
            "name": "integer",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 124,
            "description": "Returns a random real number between 0 and 1",
            "itemtype": "method",
            "name": "frac",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 133,
            "description": "Returns a random real number between 0 and 2^32",
            "itemtype": "method",
            "name": "real",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 142,
            "description": "Returns a random integer between min and max",
            "itemtype": "method",
            "name": "integerInRange",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 153,
            "description": "Returns a random real number between min and max",
            "itemtype": "method",
            "name": "realInRange",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 169,
            "description": "Returns a random real number between -1 and 1",
            "itemtype": "method",
            "name": "normal",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 178,
            "description": "Returns a valid RFC4122 version4 ID hex string (from https://gist.github.com/1308368)",
            "itemtype": "method",
            "name": "uuid",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 197,
            "description": "Returns a random member of `array`",
            "itemtype": "method",
            "name": "pick",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 206,
            "description": "Returns a random member of `array`, favoring the earlier entries",
            "itemtype": "method",
            "name": "weightedPick",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 215,
            "description": "Returns a random timestamp between min and max, or between the beginning of 2000 and the end of 2020 if min and max aren't specified",
            "itemtype": "method",
            "name": "timestamp",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "math\\RandomDataGenerator.js",
            "line": 225,
            "description": "Returns a random angle between -180 and 180",
            "itemtype": "method",
            "name": "angle",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "net\\Net.js",
            "line": 9,
            "description": "Returns the hostname given by the browser.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "net\\Net.js",
            "line": 22,
            "description": "Compares the given domain name against the hostname of the browser containing the game.\nIf the domain name is found it returns true.\nYou can specify a part of a domain, for example 'google' would match 'google.com', 'google.co.uk', etc.\nDo not include 'http://' at the start.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "net\\Net.js",
            "line": 32,
            "description": "Updates a value on the Query String and returns it in full.\nIf the value doesn't already exist it is set.\nIf the value exists it is replaced with the new value given. If you don't provide a new value it is removed from the query string.\nOptionally you can redirect to the new url, or just return it as a string.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "net\\Net.js",
            "line": 93,
            "description": "Returns the Query String as an object.\nIf you specify a parameter it will return just the value of that parameter, should it exist.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 1,
            "description": "Phaser - ArcadeEmitter\n\nEmitter is a lightweight particle emitter. It can be used for one-time explosions or for\ncontinuous effects like rain and fire. All it really does is launch Particle objects out\nat set intervals, and fixes their positions and velocities accorindgly.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 19,
            "description": "The X position of the top left corner of the emitter in world space.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 24,
            "description": "The Y position of the top left corner of emitter in world space.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 29,
            "description": "The width of the emitter.  Particles can be randomly generated from anywhere within this box.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 34,
            "description": "The height of the emitter.  Particles can be randomly generated from anywhere within this box.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 39,
            "description": "The minimum possible velocity of a particle.\nThe default value is (-100,-100).",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 45,
            "description": "The maximum possible velocity of a particle.\nThe default value is (100,100).",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 51,
            "description": "The minimum possible scale of a particle.\nThe default value is 1.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 57,
            "description": "The maximum possible scale of a particle.\nThe default value is 1.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 63,
            "description": "The minimum possible angular velocity of a particle.  The default value is -360.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 68,
            "description": "The maximum possible angular velocity of a particle.  The default value is 360.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 73,
            "description": "Sets the <code>gravity.y</code> of each particle to this value on launch.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 78,
            "description": "Set your own particle class type here.\nDefault is <code>Particle</code>.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 84,
            "description": "The X and Y drag component of particles launched from the emitter.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 89,
            "description": "The angular drag component of particles launched from the emitter if they are rotating.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 94,
            "description": "How often a particle is emitted in ms (if emitter is started with Explode == false).",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 99,
            "description": "The total number of particles in this emitter.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 104,
            "description": "How long each particle lives once it is emitted in ms. Default is 2 seconds.\nSet lifespan to 'zero' for particles to live forever.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 110,
            "description": "How much each particle should bounce on each axis.  1 = full bounce, 0 = no bounce.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 115,
            "description": "Internal helper for deciding how many particles to launch.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 120,
            "description": "Internal helper for deciding when to launch particles or kill them.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 125,
            "description": "Internal counter for figuring out how many particles to launch.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 130,
            "description": "Internal helper for the style of particle emission (all at once, or one at a time).",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 135,
            "description": "Determines whether the emitter is currently emitting particles.\nIt is totally safe to directly toggle this.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 141,
            "description": "Determines whether the emitter is being updated by the core game loop.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 146,
            "description": "The point the particles are emitted from.\nEmitter.x and Emitter.y control the containers location, which updates all current particles\nEmitter.emitX and Emitter.emitY control the emission location relative to the x/y position.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 159,
            "description": "Called automatically by the game loop, decides when to launch particles and when to \"die\".",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 202,
            "description": "This function generates a new array of particle sprites to attach to the emitter.",
            "params": [
                {
                    "name": "graphics",
                    "description": "If you opted to not pre-configure an array of Sprite objects, you can simply pass in a particle image or sprite sheet."
                },
                {
                    "name": "quantity",
                    "description": "The number of particles to generate when using the \"create from image\" option.",
                    "type": "Number"
                },
                {
                    "name": "multiple",
                    "description": "Whether the image in the Graphics param is a single particle or a bunch of particles (if it's a bunch, they need to be square!).",
                    "type": "Boolean"
                },
                {
                    "name": "collide",
                    "description": "Whether the particles should be flagged as not 'dead' (non-colliding particles are higher performance).  0 means no collisions, 0-1 controls scale of particle's bounding box.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This Emitter instance (nice for chaining stuff together, if you're into that)."
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 279,
            "description": "Call this function to turn off all the particles and the emitter.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 290,
            "description": "Handy for bringing game objects \"back to life\". Just sets alive and exists back to true.\nIn practice, this is most often called by <code>Object.reset()</code>.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 301,
            "description": "Call this function to start emitting particles.",
            "params": [
                {
                    "name": "explode",
                    "description": "Whether the particles should all burst out at once.",
                    "type": "Boolean"
                },
                {
                    "name": "lifespan",
                    "description": "How long each particle lives once emitted. 0 = forever.",
                    "type": "Number"
                },
                {
                    "name": "frequency",
                    "description": "Ignored if Explode is set to true. Frequency is how often to emit a particle in ms.",
                    "type": "Number"
                },
                {
                    "name": "quantity",
                    "description": "How many particles to launch. 0 = \"all of the particles\".",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 347,
            "description": "This function can be used both internally and externally to emit the next particle.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 413,
            "description": "A more compact way of setting the width and height of the emitter.",
            "params": [
                {
                    "name": "width",
                    "description": "The desired width of the emitter (particles are spawned randomly within these dimensions).",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The desired height of the emitter.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 426,
            "description": "A more compact way of setting the X velocity range of the emitter.",
            "params": [
                {
                    "name": "Min",
                    "description": "The minimum value for this range.",
                    "type": "Number"
                },
                {
                    "name": "Max",
                    "description": "The maximum value for this range.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 442,
            "description": "A more compact way of setting the Y velocity range of the emitter.",
            "params": [
                {
                    "name": "Min",
                    "description": "The minimum value for this range.",
                    "type": "Number"
                },
                {
                    "name": "Max",
                    "description": "The maximum value for this range.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 458,
            "description": "A more compact way of setting the angular velocity constraints of the emitter.",
            "params": [
                {
                    "name": "Min",
                    "description": "The minimum value for this range.",
                    "type": "Number"
                },
                {
                    "name": "Max",
                    "description": "The maximum value for this range.",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 474,
            "description": "Change the emitter's midpoint to match the midpoint of a <code>Object</code>.",
            "params": [
                {
                    "name": "Object",
                    "description": "The <code>Object</code> that you want to sync up with.",
                    "type": "Object"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 488,
            "description": "Get the emitter alpha.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 495,
            "description": "Set the emiter alpha value.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 506,
            "description": "Get the emitter visible state.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "particles\\arcade\\Emitter.js",
            "line": 513,
            "description": "Set the emitter visible state.",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 10,
            "description": "Used by the QuadTree to set the maximum number of objects",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 16,
            "description": "Used by the QuadTree to set the maximum number of levels",
            "type": "{number}",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 67,
            "description": "A tween-like function that takes a starting velocity and some other factors and returns an altered velocity.",
            "params": [
                {
                    "name": "Velocity",
                    "description": "Any component of velocity (e.g. 20).",
                    "type": "Number"
                },
                {
                    "name": "Acceleration",
                    "description": "Rate at which the velocity is changing.",
                    "type": "Number"
                },
                {
                    "name": "Drag",
                    "description": "Really kind of a deceleration, this is how much the velocity changes if Acceleration is not set.",
                    "type": "Number"
                },
                {
                    "name": "Max",
                    "description": "An absolute value cap for the velocity.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The altered Velocity value.",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 146,
            "description": "Checks for collision between two game objects. The objects can be Sprites, Groups, Emitters or Tilemaps.\nYou can perform Sprite vs. Sprite, Sprite vs. Group, Group vs. Group, Sprite vs. Tilemap or Group vs. Tilemap collisions.",
            "params": [
                {
                    "name": "object1",
                    "description": "The first object to check. Can be an instance of Phaser.Sprite, Phaser.Group, Phaser.Particles.Emitter, or Phaser.Tilemap"
                },
                {
                    "name": "object2",
                    "description": "The second object to check. Can be an instance of Phaser.Sprite, Phaser.Group, Phaser.Particles.Emitter or Phaser.Tilemap"
                },
                {
                    "name": "collideCallback",
                    "description": "An optional callback function that is called if the objects overlap. The two objects will be passed to this function in the same order in which you passed them to Collision.overlap."
                },
                {
                    "name": "processCallback",
                    "description": "A callback function that lets you perform additional checks against the two objects if they overlap. If this is set then collideCallback will only be called if processCallback returns true."
                },
                {
                    "name": "callbackContext",
                    "description": "The context in which to run the callbacks."
                }
            ],
            "return": {
                "description": "true if any collisions were detected, otherwise false.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 373,
            "description": "The core separation function to separate two physics bodies.",
            "params": [
                {
                    "name": "body1",
                    "description": "The first Sprite.Body to separate"
                },
                {
                    "name": "body2",
                    "description": "The second Sprite.Body to separate"
                }
            ],
            "return": {
                "description": "Returns true if the bodies were separated, otherwise false.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 391,
            "description": "Separates the two physics bodies on their X axis",
            "params": [
                {
                    "name": "body1",
                    "description": "The first Sprite.Body to separate"
                },
                {
                    "name": "body2",
                    "description": "The second Sprite.Body to separate"
                }
            ],
            "return": {
                "description": "Whether the objects in fact touched and were separated along the X axis.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 501,
            "description": "Separates the two physics bodies on their Y axis",
            "params": [
                {
                    "name": "body1",
                    "description": "The first Sprite.Body to separate"
                },
                {
                    "name": "body2",
                    "description": "The second Sprite.Body to separate"
                }
            ],
            "return": {
                "description": "Whether the bodys in fact touched and were separated along the Y axis.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 621,
            "description": "The core Collision separation function used by Collision.overlap.",
            "params": [
                {
                    "name": "object1",
                    "description": "The first GameObject to separate"
                },
                {
                    "name": "object2",
                    "description": "The second GameObject to separate"
                }
            ],
            "return": {
                "description": "Returns true if the objects were separated, otherwise false.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 642,
            "description": "Separates the two objects on their x axis",
            "params": [
                {
                    "name": "object",
                    "description": "The GameObject to separate"
                },
                {
                    "name": "tile",
                    "description": "The Tile to separate"
                }
            ],
            "return": {
                "description": "Whether the objects in fact touched and were separated along the X axis.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 729,
            "description": "Separates the two objects on their x axis",
            "params": [
                {
                    "name": "object",
                    "description": "The GameObject to separate"
                },
                {
                    "name": "tile",
                    "description": "The Tile to separate"
                }
            ],
            "return": {
                "description": "Whether the objects in fact touched and were separated along the X axis.",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 817,
            "description": "Given the angle and speed calculate the velocity and return it as a Point",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle (in degrees) calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)"
                },
                {
                    "name": "speed",
                    "description": "The speed it will move, in pixels per second sq"
                }
            ],
            "return": {
                "description": "A Point where Point.x contains the velocity x value and Point.y contains the velocity y value"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 836,
            "description": "Sets the source Sprite x/y velocity so it will move directly towards the destination Sprite at the speed given (in pixels per second)<br>\nIf you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.<br>\nTimings are approximate due to the way Flash timers work, and irrespective of SWF frame rate. Allow for a variance of +- 50ms.<br>\nThe source object doesn't stop moving automatically should it ever reach the destination coordinates.<br>\nIf you need the object to accelerate, see accelerateTowardsObject() instead\nNote: Doesn't take into account acceleration, maxVelocity or drag (if you set drag or acceleration too high this object may not move at all)",
            "params": [
                {
                    "name": "source",
                    "description": "The Sprite on which the velocity will be set"
                },
                {
                    "name": "dest",
                    "description": "The Sprite where the source object will move to"
                },
                {
                    "name": "speed",
                    "description": "The speed it will move, in pixels per second (default is 60 pixels/sec)"
                },
                {
                    "name": "maxTime",
                    "description": "Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the source will arrive at destination in the given number of ms"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 869,
            "description": "Sets the x/y acceleration on the source Sprite so it will move towards the destination Sprite at the speed given (in pixels per second)<br>\nYou must give a maximum speed value, beyond which the Sprite won't go any faster.<br>\nIf you don't need acceleration look at moveTowardsObject() instead.",
            "params": [
                {
                    "name": "source",
                    "description": "The Sprite on which the acceleration will be set"
                },
                {
                    "name": "dest",
                    "description": "The Sprite where the source object will move towards"
                },
                {
                    "name": "speed",
                    "description": "The speed it will accelerate in pixels per second"
                },
                {
                    "name": "xSpeedMax",
                    "description": "The maximum speed in pixels per second in which the sprite can move horizontally"
                },
                {
                    "name": "ySpeedMax",
                    "description": "The maximum speed in pixels per second in which the sprite can move vertically"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 898,
            "description": "Move the given Sprite towards the mouse pointer coordinates at a steady velocity\nIf you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.<br>\nTimings are approximate due to the way Flash timers work, and irrespective of SWF frame rate. Allow for a variance of +- 50ms.<br>\nThe source object doesn't stop moving automatically should it ever reach the destination coordinates.<br>",
            "params": [
                {
                    "name": "source",
                    "description": "The Sprite to move"
                },
                {
                    "name": "speed",
                    "description": "The speed it will move, in pixels per second (default is 60 pixels/sec)"
                },
                {
                    "name": "maxTime",
                    "description": "Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the source will arrive at destination in the given number of ms"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 928,
            "description": "Sets the x/y acceleration on the source Sprite so it will move towards the mouse coordinates at the speed given (in pixels per second)<br>\nYou must give a maximum speed value, beyond which the Sprite won't go any faster.<br>\nIf you don't need acceleration look at moveTowardsMouse() instead.",
            "params": [
                {
                    "name": "source",
                    "description": "The Sprite on which the acceleration will be set"
                },
                {
                    "name": "speed",
                    "description": "The speed it will accelerate in pixels per second"
                },
                {
                    "name": "xSpeedMax",
                    "description": "The maximum speed in pixels per second in which the sprite can move horizontally"
                },
                {
                    "name": "ySpeedMax",
                    "description": "The maximum speed in pixels per second in which the sprite can move vertically"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 956,
            "description": "Sets the x/y velocity on the source Sprite so it will move towards the target coordinates at the speed given (in pixels per second)<br>\nIf you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.<br>\nTimings are approximate due to the way Flash timers work, and irrespective of SWF frame rate. Allow for a variance of +- 50ms.<br>\nThe source object doesn't stop moving automatically should it ever reach the destination coordinates.<br>",
            "params": [
                {
                    "name": "source",
                    "description": "The Sprite to move"
                },
                {
                    "name": "target",
                    "description": "The Point coordinates to move the source Sprite towards"
                },
                {
                    "name": "speed",
                    "description": "The speed it will move, in pixels per second (default is 60 pixels/sec)"
                },
                {
                    "name": "maxTime",
                    "description": "Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the source will arrive at destination in the given number of ms"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 987,
            "description": "Sets the x/y acceleration on the source Sprite so it will move towards the target coordinates at the speed given (in pixels per second)<br>\nYou must give a maximum speed value, beyond which the Sprite won't go any faster.<br>\nIf you don't need acceleration look at moveTowardsPoint() instead.",
            "params": [
                {
                    "name": "source",
                    "description": "The Sprite on which the acceleration will be set"
                },
                {
                    "name": "target",
                    "description": "The Point coordinates to move the source Sprite towards"
                },
                {
                    "name": "speed",
                    "description": "The speed it will accelerate in pixels per second"
                },
                {
                    "name": "xSpeedMax",
                    "description": "The maximum speed in pixels per second in which the sprite can move horizontally"
                },
                {
                    "name": "ySpeedMax",
                    "description": "The maximum speed in pixels per second in which the sprite can move vertically"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1016,
            "description": "Find the distance (in pixels, rounded) between two Sprites, taking their origin into account",
            "params": [
                {
                    "name": "a",
                    "description": "The first Sprite"
                },
                {
                    "name": "b",
                    "description": "The second Sprite"
                }
            ],
            "return": {
                "description": "int Distance (in pixels)"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1032,
            "description": "Find the distance (in pixels, rounded) from an Sprite to the given Point, taking the source origin into account",
            "params": [
                {
                    "name": "a",
                    "description": "The Sprite"
                },
                {
                    "name": "target",
                    "description": "The Point"
                }
            ],
            "return": {
                "description": "int     Distance (in pixels)"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1048,
            "description": "Find the distance (in pixels, rounded) from the object x/y and the mouse x/y",
            "params": [
                {
                    "name": "a",
                    "description": "The Sprite to test against"
                }
            ],
            "return": {
                "description": "int The distance between the given sprite and the mouse coordinates"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1063,
            "description": "Find the angle (in radians) between an Sprite and an Point. The source sprite takes its x/y and origin into account.\nThe angle is calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)",
            "params": [
                {
                    "name": "a",
                    "description": "The Sprite to test from"
                },
                {
                    "name": "target",
                    "description": "The Point to angle the Sprite towards"
                },
                {
                    "name": "asDegrees",
                    "description": "If you need the value in degrees instead of radians, set to true"
                }
            ],
            "return": {
                "description": "Number The angle (in radians unless asDegrees is true)"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1091,
            "description": "Find the angle (in radians) between the two Sprite, taking their x/y and origin into account.\nThe angle is calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)",
            "params": [
                {
                    "name": "a",
                    "description": "The Sprite to test from"
                },
                {
                    "name": "b",
                    "description": "The Sprite to test to"
                },
                {
                    "name": "asDegrees",
                    "description": "If you need the value in degrees instead of radians, set to true"
                }
            ],
            "return": {
                "description": "Number The angle (in radians unless asDegrees is true)"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1119,
            "description": "Given the GameObject and speed calculate the velocity and return it as an Point based on the direction the sprite is facing",
            "params": [
                {
                    "name": "parent",
                    "description": "The Sprite to get the facing value from"
                },
                {
                    "name": "speed",
                    "description": "The speed it will move, in pixels per second sq"
                }
            ],
            "return": {
                "description": "An Point where Point.x contains the velocity x value and Point.y contains the velocity y value"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\ArcadePhysics.js",
            "line": 1154,
            "description": "Find the angle (in radians) between an Sprite and the mouse, taking their x/y and origin into account.\nThe angle is calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)",
            "params": [
                {
                    "name": "a",
                    "description": "The Object to test from"
                },
                {
                    "name": "asDegrees",
                    "description": "If you need the value in degrees instead of radians, set to true"
                }
            ],
            "return": {
                "description": "Number The angle (in radians unless asDegrees is true)"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\Body.js",
            "line": 236,
            "description": "The sum of the y and height properties. Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.",
            "itemtype": "method",
            "name": "bottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\Body.js",
            "line": 245,
            "description": "The sum of the y and height properties. Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.",
            "itemtype": "method",
            "name": "bottom",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\Body.js",
            "line": 267,
            "description": "The sum of the x and width properties. Changing the right property of a Rectangle object has no effect on the x, y and height properties.\nHowever it does affect the width property.",
            "itemtype": "method",
            "name": "right",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "physics\\arcade\\Body.js",
            "line": 277,
            "description": "The sum of the x and width properties. Changing the right property of a Rectangle object has no effect on the x, y and height properties.\nHowever it does affect the width property.",
            "itemtype": "method",
            "name": "right",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Circle.js",
            "line": 1,
            "author": "Chad Engler <chad@pantherdev.com>",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Circle.js",
            "line": 16,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Circle.js",
            "line": 23,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Circle.js",
            "line": 30,
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "default": "0",
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Circle.js",
            "line": 38,
            "description": "Creates a clone of this Circle instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Circle"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Circle.js",
            "line": 49,
            "description": "Checks if the x, and y coords passed to this function are contained within this circle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "Circle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 1,
            "author": "Chad Engler <chad@pantherdev.com>",
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 17,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 24,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 31,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 38,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 46,
            "description": "Creates a clone of this Ellipse instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the ellipse",
                "type": "Ellipse"
            },
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Ellipse.js",
            "line": 57,
            "description": "Checks if the x, and y coords passed to this function are contained within this ellipse",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this ellipse",
                "type": "Boolean"
            },
            "class": "Ellipse",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Point.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Point.js",
            "line": 15,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Point.js",
            "line": 22,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Point.js",
            "line": 30,
            "description": "Creates a clone of this point",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the point",
                "type": "Point"
            },
            "class": "Point",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Polygon.js",
            "line": 1,
            "author": "Adrien Brault <adrien.brault@gmail.com>",
            "class": "Polygon",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Polygon.js",
            "line": 35,
            "description": "Creates a clone of this polygon",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Polygon"
            },
            "class": "Polygon",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Polygon.js",
            "line": 51,
            "description": "Checks if the x, and y coords passed to this function are contained within this polygon",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "Polygon",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 17,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 24,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 31,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 38,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 46,
            "description": "Creates a clone of this Rectangle",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the rectangle",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\core\\Rectangle.js",
            "line": 57,
            "description": "Checks if the x, and y coords passed to this function are contained within this Rectangle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this Rectangle",
                "type": "Boolean"
            },
            "class": "Rectangle",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 16,
            "description": "The coordinate of the object relative to the local coordinates of the parent.",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 24,
            "description": "The scale factor of the object.",
            "itemtype": "property",
            "name": "scale",
            "type": "Point",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 32,
            "description": "The pivot point of the displayObject that it rotates around",
            "itemtype": "property",
            "name": "pivot",
            "type": "Point",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 40,
            "description": "The rotation of the object in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 48,
            "description": "The opacity of the object.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 56,
            "description": "The visibility of the object.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 64,
            "description": "This is the defined area that will pick up mouse / touch events. It is null by default.\nSetting it is a neat way of optimising the hitTest function that the interactionManager will use (as it will not need to hit test all the children)",
            "itemtype": "property",
            "name": "hitArea",
            "type": "Rectangle|Circle|Ellipse|Polygon",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 73,
            "description": "This is used to indicate if the displayObject should display a mouse hand cursor on rollover",
            "itemtype": "property",
            "name": "buttonMode",
            "type": "Boolean",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 81,
            "description": "Can this object be rendered",
            "itemtype": "property",
            "name": "renderable",
            "type": "Boolean",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 89,
            "description": "[read-only] The display object container that contains this display object.",
            "itemtype": "property",
            "name": "parent",
            "type": "DisplayObjectContainer",
            "readonly": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 98,
            "description": "[read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.",
            "itemtype": "property",
            "name": "stage",
            "type": "Stage",
            "readonly": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 107,
            "description": "[read-only] The multiplied alpha of the displayobject",
            "itemtype": "property",
            "name": "worldAlpha",
            "type": "Number",
            "readonly": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 116,
            "description": "[read-only] Whether or not the object is interactive, do not toggle directly! use the `interactive` property",
            "itemtype": "property",
            "name": "_interactive",
            "type": "Boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 126,
            "description": "[read-only] Current transform of the object based on world (parent) factors",
            "itemtype": "property",
            "name": "worldTransform",
            "type": "Mat3",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 136,
            "description": "[read-only] Current transform of the object locally",
            "itemtype": "property",
            "name": "localTransform",
            "type": "Mat3",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 146,
            "description": "[NYI] Unkown",
            "itemtype": "property",
            "name": "color",
            "type": "Array<>",
            "access": "private",
            "tagname": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 155,
            "description": "[NYI] Holds whether or not this object is dynamic, for rendering optimization",
            "itemtype": "property",
            "name": "dynamic",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 172,
            "description": "A callback that is used when the users clicks on the displayObject with their mouse",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 178,
            "description": "A callback that is used when the user clicks the mouse down over the sprite",
            "itemtype": "method",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 184,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject\nfor this callback to be fired the mouse must have been pressed down over the displayObject",
            "itemtype": "method",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 191,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject but is no longer over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "method",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 198,
            "description": "A callback that is used when the users mouse rolls over the displayObject",
            "itemtype": "method",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 204,
            "description": "A callback that is used when the users mouse leaves the displayObject",
            "itemtype": "method",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 215,
            "description": "A callback that is used when the users taps on the sprite with their finger\nbasically a touch version of click",
            "itemtype": "method",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 222,
            "description": "A callback that is used when the user touch's over the displayObject",
            "itemtype": "method",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 228,
            "description": "A callback that is used when the user releases a touch over the displayObject",
            "itemtype": "method",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 234,
            "description": "A callback that is used when the user releases the touch that was over the displayObject\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "method",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 245,
            "description": "[Deprecated] Indicates if the sprite will have touch and mouse interactivity. It is false by default\nInstead of using this function you can now simply set the interactive property to true or false",
            "itemtype": "method",
            "name": "setInteractive",
            "params": [
                {
                    "name": "interactive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Simply set the `interactive` property directly",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 258,
            "description": "Indicates if the sprite will have touch and mouse interactivity. It is false by default",
            "itemtype": "property",
            "name": "interactive",
            "type": "Boolean",
            "default": "false",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObject.js",
            "line": 278,
            "description": "Sets a mask for the displayObject. A mask is an object that limits the visibility of an object to the shape of the mask applied to it.\nIn PIXI a regular mask must be a PIXI.Ggraphics object. This allows for much faster masking in canvas as it utilises shape clipping.\nTo remove a mask, set this property to null.",
            "itemtype": "property",
            "name": "mask",
            "type": "Graphics",
            "class": "DisplayObject",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 18,
            "description": "[read-only] The of children of this container.",
            "itemtype": "property",
            "name": "children",
            "type": "Array<DisplayObject>",
            "readonly": "",
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 44,
            "description": "Adds a child to the container.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject to add to the container",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 132,
            "description": "Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The child to add",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index to place the child in",
                    "type": "Number"
                }
            ],
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 219,
            "description": "[NYI] Swaps the depth of 2 displayObjects",
            "itemtype": "method",
            "name": "swapChildren",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "child2",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 268,
            "description": "Returns the Child at the specified index",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to get the child from",
                    "type": "Number"
                }
            ],
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\DisplayObjectContainer.js",
            "line": 286,
            "description": "Removes a child from the container.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject to remove",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObjectContainer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 17,
            "description": "The array of textures that make up the animation",
            "itemtype": "property",
            "name": "textures",
            "type": "Array",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 25,
            "description": "The speed that the MovieClip will play at. Higher is faster, lower is slower",
            "itemtype": "property",
            "name": "animationSpeed",
            "type": "Number",
            "default": "1",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 34,
            "description": "Whether or not the movie clip repeats after playing.",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 43,
            "description": "Function to call when a MovieClip finishes playing",
            "itemtype": "property",
            "name": "onComplete",
            "type": "Function",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 51,
            "description": "[read-only] The index MovieClips current frame (this may not have to be a whole number)",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 61,
            "description": "[read-only] Indicates if the MovieClip is currently playing",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "readonly": "",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 75,
            "description": "Stops the MovieClip",
            "itemtype": "method",
            "name": "stop",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 85,
            "description": "Plays the MovieClip",
            "itemtype": "method",
            "name": "play",
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 95,
            "description": "Stops the MovieClip and goes to a specific frame",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "frameNumber",
                    "description": "frame index to stop at",
                    "type": "Number"
                }
            ],
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\MovieClip.js",
            "line": 109,
            "description": "Goes to a specific frame and begins playing the MovieClip",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "frameNumber",
                    "description": "frame index to start at",
                    "type": "Number"
                }
            ],
            "class": "MovieClip",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 23,
            "description": "The anchor sets the origin point of the texture.\nThe default is 0,0 this means the textures origin is the top left \nSetting than anchor to 0.5,0.5 means the textures origin is centered\nSetting the anchor to 1,1 would mean the textures origin points will be the bottom right",
            "itemtype": "property",
            "name": "anchor",
            "type": "Point",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 34,
            "description": "The texture that the sprite is using",
            "itemtype": "property",
            "name": "texture",
            "type": "Texture",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 42,
            "description": "The blend mode of sprite.\ncurrently supports PIXI.blendModes.NORMAL and PIXI.blendModes.SCREEN",
            "itemtype": "property",
            "name": "blendMode",
            "type": "Number",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 51,
            "description": "The width of the sprite (this is initially set by the texture)",
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 60,
            "description": "The height of the sprite (this is initially set by the texture)",
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 86,
            "description": "The width of the sprite, setting this will actually modify the scale to acheive the value set",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 102,
            "description": "The height of the sprite, setting this will actually modify the scale to acheive the value set",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 118,
            "description": "Sets the texture of the sprite",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "The PIXI texture that is displayed by the sprite",
                    "type": "Texture"
                }
            ],
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 145,
            "description": "When the texture is updated, this event will fire to update the scale and frame",
            "itemtype": "method",
            "name": "onTextureUpdate",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 165,
            "description": "Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n The frame ids are created when a Texture packer file has been loaded",
            "itemtype": "method",
            "name": "fromFrame",
            "static": 1,
            "params": [
                {
                    "name": "frameId",
                    "description": "The frame Id of the texture in the cache",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Sprite using a texture from the texture cache matching the frameId",
                "type": "Sprite"
            },
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Sprite.js",
            "line": 182,
            "description": "Helper function that creates a sprite that will contain a texture based on an image url\n If the image is not in the texture cache it will be loaded",
            "itemtype": "method",
            "name": "fromImage",
            "static": 1,
            "params": [
                {
                    "name": "imageId",
                    "description": "The image url of the texture",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Sprite using a texture from the texture cache matching the image id",
                "type": "Sprite"
            },
            "class": "Sprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 19,
            "description": "[read-only] Current transform of the object based on world (parent) factors",
            "itemtype": "property",
            "name": "worldTransform",
            "type": "Mat3",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 29,
            "description": "Whether or not the stage is interactive",
            "itemtype": "property",
            "name": "interactive",
            "type": "Boolean",
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 37,
            "description": "The interaction manage for this stage, manages all interactive activity on the stage",
            "itemtype": "property",
            "name": "interactive",
            "type": "InteractionManager",
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 45,
            "description": "Whether the stage is dirty and needs to have interactions updated",
            "itemtype": "property",
            "name": "dirty",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 98,
            "description": "Sets the background color for the stage",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "backgroundColor",
                    "description": "the color of the background, easiest way to pass this in is in hex format\n\t\tlike: 0xFFFFFF for white",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\display\\Stage.js",
            "line": 114,
            "description": "This will return the point containing global coords of the mouse.",
            "itemtype": "method",
            "name": "getMousePosition",
            "return": {
                "description": "The point containing the coords of the global InteractionData position.",
                "type": "Point"
            },
            "class": "Stage",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\CustomRenderable.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "CustomRenderable",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\CustomRenderable.js",
            "line": 23,
            "description": "If this object is being rendered by a CanvasRenderer it will call this callback",
            "itemtype": "method",
            "name": "renderCanvas",
            "params": [
                {
                    "name": "renderer",
                    "description": "The renderer instance",
                    "type": "CanvasRenderer"
                }
            ],
            "class": "CustomRenderable",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\CustomRenderable.js",
            "line": 34,
            "description": "If this object is being rendered by a WebGLRenderer it will call this callback to initialize",
            "itemtype": "method",
            "name": "initWebGL",
            "params": [
                {
                    "name": "renderer",
                    "description": "The renderer instance",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "CustomRenderable",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\CustomRenderable.js",
            "line": 45,
            "description": "If this object is being rendered by a WebGLRenderer it will call this callback",
            "itemtype": "method",
            "name": "renderWebGL",
            "params": [
                {
                    "name": "renderer",
                    "description": "The renderer instance",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "CustomRenderable",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Rope.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23\nbased on pixi impact spine implementation made by Eemeli Kelokorpi (@ekelokorpi) https://github.com/ekelokorpi\n\nAwesome JS run time provided by EsotericSoftware\nhttps://github.com/EsotericSoftware/spine-runtimes",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 327,
            "description": "cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 618,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 625,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 632,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 640,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 647,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 654,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 689,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 697,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 712,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 716,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 723,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 730,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 737,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 749,
            "description": "from the new skin are attached if the corresponding attachment from the old skin was attached.",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 756,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 760,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 769,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 960,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 966,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 972,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 978,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 996,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Spine.js",
            "line": 1415,
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\Strip.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 19,
            "description": "The texture that the sprite is using",
            "itemtype": "property",
            "name": "texture",
            "type": "Texture",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 27,
            "description": "The width of the tiling sprite",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 35,
            "description": "The height of the tiling sprite",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 43,
            "description": "The scaling of the image that is being tiled",
            "itemtype": "property",
            "name": "tileScale",
            "type": "Point",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 51,
            "description": "The offset position of the image that is being tiled",
            "itemtype": "property",
            "name": "tilePosition",
            "type": "Point",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 68,
            "description": "Sets the texture of the tiling sprite",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "The PIXI texture that is displayed by the sprite",
                    "type": "Texture"
                }
            ],
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\extras\\TilingSprite.js",
            "line": 84,
            "description": "When the texture is updated, this event will fire to update the frame",
            "itemtype": "method",
            "name": "onTextureUpdate",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "TilingSprite",
            "module": "Phaser"
        },
        {
            "file": "pixi\\filters\\FilterBlock.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\filters\\MaskFilter.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 25,
            "description": "The array of asset URLs that are going to be loaded",
            "itemtype": "property",
            "name": "assetURLs",
            "type": "Array<String>",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 33,
            "description": "Whether the requests should be treated as cross origin",
            "itemtype": "property",
            "name": "crossorigin",
            "type": "Boolean",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 41,
            "description": "Maps file extension to loader types",
            "itemtype": "property",
            "name": "loadersByType",
            "type": "Object",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 61,
            "description": "Fired when an item has loaded",
            "itemtype": "event",
            "name": "onProgress",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 66,
            "description": "Fired when all the assets have loaded",
            "itemtype": "event",
            "name": "onComplete",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 74,
            "description": "Starts loading the assets sequentially",
            "itemtype": "method",
            "name": "load",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\AssetLoader.js",
            "line": 104,
            "description": "Invoked after each file is loaded",
            "itemtype": "method",
            "name": "onAssetLoaded",
            "access": "private",
            "tagname": "",
            "class": "AssetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 26,
            "description": "The url of the bitmap font data",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 34,
            "description": "Whether the requests should be treated as cross origin",
            "itemtype": "property",
            "name": "crossorigin",
            "type": "Boolean",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 42,
            "description": "[read-only] The base url of the bitmap font data",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "readonly": "",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 51,
            "description": "[read-only] The texture of the bitmap font",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 63,
            "description": "Loads the XML font data",
            "itemtype": "method",
            "name": "load",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 82,
            "description": "Invoked when XML file is loaded, parses the data",
            "itemtype": "method",
            "name": "onXMLLoaded",
            "access": "private",
            "tagname": "",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\BitmapFontLoader.js",
            "line": 154,
            "description": "Invoked when all files are loaded (xml/fnt and texture)",
            "itemtype": "method",
            "name": "onLoaded",
            "access": "private",
            "tagname": "",
            "class": "BitmapFontLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\ImageLoader.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "ImageLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\ImageLoader.js",
            "line": 20,
            "description": "The texture being loaded",
            "itemtype": "property",
            "name": "texture",
            "type": "Texture",
            "class": "ImageLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\ImageLoader.js",
            "line": 32,
            "description": "Loads image or takes it from cache",
            "itemtype": "method",
            "name": "load",
            "class": "ImageLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\ImageLoader.js",
            "line": 53,
            "description": "Invoked when image file is loaded or it is already cached and ready to use",
            "itemtype": "method",
            "name": "onLoaded",
            "access": "private",
            "tagname": "",
            "class": "ImageLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 19,
            "description": "The url of the bitmap font data",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 27,
            "description": "Whether the requests should be treated as cross origin",
            "itemtype": "property",
            "name": "crossorigin",
            "type": "Boolean",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 35,
            "description": "[read-only] The base url of the bitmap font data",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "readonly": "",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 44,
            "description": "[read-only] Whether the data has loaded yet",
            "itemtype": "property",
            "name": "loaded",
            "type": "Boolean",
            "readonly": "",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 58,
            "description": "Loads the JSON data",
            "itemtype": "method",
            "name": "load",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 75,
            "description": "Invoke when JSON file is loaded",
            "itemtype": "method",
            "name": "onJSONLoaded",
            "access": "private",
            "tagname": "",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 140,
            "description": "Invoke when json file loaded",
            "itemtype": "method",
            "name": "onLoaded",
            "access": "private",
            "tagname": "",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\JsonLoader.js",
            "line": 154,
            "description": "Invoke when error occured",
            "itemtype": "method",
            "name": "onError",
            "access": "private",
            "tagname": "",
            "class": "JsonLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23\nbased on pixi impact spine implementation made by Eemeli Kelokorpi (@ekelokorpi) https://github.com/ekelokorpi\n\nAwesome JS run time provided by EsotericSoftware\nhttps://github.com/EsotericSoftware/spine-runtimes",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 28,
            "description": "The url of the bitmap font data",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 36,
            "description": "Whether the requests should be treated as cross origin",
            "itemtype": "property",
            "name": "crossorigin",
            "type": "Boolean",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 44,
            "description": "[read-only] Whether the data has loaded yet",
            "itemtype": "property",
            "name": "loaded",
            "type": "Boolean",
            "readonly": "",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 56,
            "description": "Loads the JSON data",
            "itemtype": "method",
            "name": "load",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 72,
            "description": "Invoke when JSON file is loaded",
            "itemtype": "method",
            "name": "onJSONLoaded",
            "access": "private",
            "tagname": "",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpineLoader.js",
            "line": 87,
            "description": "Invoke when JSON file is loaded",
            "itemtype": "method",
            "name": "onLoaded",
            "access": "private",
            "tagname": "",
            "class": "Spine",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 29,
            "description": "The url of the bitmap font data",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 37,
            "description": "Whether the requests should be treated as cross origin",
            "itemtype": "property",
            "name": "crossorigin",
            "type": "Boolean",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 45,
            "description": "[read-only] The base url of the bitmap font data",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "readonly": "",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 54,
            "description": "The texture being loaded",
            "itemtype": "property",
            "name": "texture",
            "type": "Texture",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 62,
            "description": "The frames of the sprite sheet",
            "itemtype": "property",
            "name": "frames",
            "type": "Object",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 74,
            "description": "This will begin loading the JSON file",
            "itemtype": "method",
            "name": "load",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 89,
            "description": "Invoke when JSON file is loaded",
            "itemtype": "method",
            "name": "onJSONLoaded",
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\loaders\\SpriteSheetLoader.js",
            "line": 126,
            "description": "Invoke when all files are loaded (json and texture)",
            "itemtype": "method",
            "name": "onLoaded",
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 21,
            "description": "The alpha of the fill of this graphics object",
            "itemtype": "property",
            "name": "fillAlpha",
            "type": "Number",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 29,
            "description": "The width of any lines drawn",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "Number",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 37,
            "description": "The color of any lines drawn",
            "itemtype": "property",
            "name": "lineColor",
            "type": "String",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 45,
            "description": "Graphics data",
            "itemtype": "property",
            "name": "graphicsData",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 54,
            "description": "Current path",
            "itemtype": "property",
            "name": "currentPath",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 68,
            "description": "Specifies a line style used for subsequent calls to Graphics methods such as the lineTo() method or the drawCircle() method.",
            "itemtype": "method",
            "name": "lineStyle",
            "params": [
                {
                    "name": "lineWidth",
                    "description": "width of the line to draw, will update the object's stored style",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the line to draw, will update the object's stored style",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "alpha of the line to draw, will update the object's stored style",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 90,
            "description": "Moves the current drawing position to (x, y).",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "the X coord to move to",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the Y coord to move to",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 109,
            "description": "Draws a line using the current line style from the current drawing position to (x, y);\nthe current drawing position is then set to (x, y).",
            "itemtype": "method",
            "name": "lineTo",
            "params": [
                {
                    "name": "x",
                    "description": "the X coord to draw to",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the Y coord to draw to",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 123,
            "description": "Specifies a simple one-color fill that subsequent calls to other Graphics methods\n(such as lineTo() or drawCircle()) use when drawing.",
            "itemtype": "method",
            "name": "beginFill",
            "params": [
                {
                    "name": "color",
                    "description": "the color of the fill",
                    "type": "Uint"
                },
                {
                    "name": "alpha",
                    "description": "the alpha",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 138,
            "description": "Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.",
            "itemtype": "method",
            "name": "endFill",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 150,
            "itemtype": "method",
            "name": "drawRect",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the top-left of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the top-left of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the rectangle",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 170,
            "description": "Draws a circle.",
            "itemtype": "method",
            "name": "drawCircle",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the center of the circle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the center of the circle",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 190,
            "description": "Draws an elipse.",
            "itemtype": "method",
            "name": "drawElipse",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\primitives\\Graphics.js",
            "line": 211,
            "description": "Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.",
            "itemtype": "method",
            "name": "clear",
            "class": "Graphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasGraphics.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 21,
            "description": "The width of the canvas view",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "800",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 30,
            "description": "The height of the canvas view",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "600",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 39,
            "description": "The canvas element that the everything is drawn to",
            "itemtype": "property",
            "name": "view",
            "type": "Canvas",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 47,
            "description": "The canvas context that the everything is drawn to",
            "itemtype": "property",
            "name": "context",
            "type": "Canvas 2d Context",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 66,
            "description": "Renders the stage to its canvas view",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "stage",
                    "description": "the Stage element to be rendered",
                    "type": "Stage"
                }
            ],
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 113,
            "description": "resizes the canvas view to the specified width and height",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "the new width of the canvas view",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the new height of the canvas view",
                    "type": "Number"
                }
            ],
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 129,
            "description": "Renders a display object",
            "itemtype": "method",
            "name": "renderDisplayObject",
            "params": [
                {
                    "name": "displayObject",
                    "description": "The displayObject to render",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 239,
            "description": "Renders a flat strip",
            "itemtype": "method",
            "name": "renderStripFlat",
            "params": [
                {
                    "name": "strip",
                    "description": "The Strip to render",
                    "type": "Strip"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 276,
            "description": "Renders a tiling sprite",
            "itemtype": "method",
            "name": "renderTilingSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The tilingsprite to render",
                    "type": "TilingSprite"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\canvas\\CanvasRenderer.js",
            "line": 309,
            "description": "Renders a strip",
            "itemtype": "method",
            "name": "renderStrip",
            "params": [
                {
                    "name": "strip",
                    "description": "The Strip to render",
                    "type": "Strip"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CanvasRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 7,
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 22,
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 31,
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 71,
            "description": "Cleans the batch so that is can be returned to an object pool and reused",
            "itemtype": "method",
            "name": "clean",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 90,
            "description": "Recreates the buffers in the event of a context loss",
            "itemtype": "method",
            "name": "restoreLostContext",
            "params": [
                {
                    "name": "gl",
                    "description": "",
                    "type": "WebGLContext"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 105,
            "description": "inits the batch's texture and blend mode based if the supplied sprite",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "sprite",
                    "description": "the first sprite to be added to the batch. Only sprites with\n\t\tthe same base texture and blend mode will be allowed to be added to this batch",
                    "type": "Sprite"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 125,
            "description": "inserts a sprite before the specified sprite",
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "sprite",
                    "description": "the sprite to be added",
                    "type": "Sprite"
                },
                {
                    "name": "nextSprite",
                    "description": "the first sprite will be inserted before this sprite",
                    "type": "NextSprite"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 153,
            "description": "inserts a sprite after the specified sprite",
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "sprite",
                    "description": "the sprite to be added",
                    "type": "Sprite"
                },
                {
                    "name": "previousSprite",
                    "description": "the first sprite will be inserted after this sprite",
                    "type": "Sprite"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 182,
            "description": "removes a sprite from the batch",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "sprite",
                    "description": "the sprite to be removed",
                    "type": "Sprite"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 226,
            "description": "Splits the batch into two with the specified sprite being the start of the new batch.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "sprite",
                    "description": "the sprite that indicates where the batch should be split",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "the new batch",
                "type": "WebGLBatch"
            },
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 267,
            "description": "Merges two batchs together",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "batch",
                    "description": "the batch that will be merged",
                    "type": "WebGLBatch"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 292,
            "description": "Grows the size of the batch. As the elements in the batch cannot have a dynamic size this\nfunction is used to increase the size of the batch. It also creates a little extra room so\nthat the batch does not need to be resized every time a sprite is added",
            "itemtype": "method",
            "name": "growBatch",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 347,
            "description": "Refresh's all the data in the batch and sync's it with the webGL buffers",
            "itemtype": "method",
            "name": "refresh",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 403,
            "description": "Updates all the relevant geometry and uploads the data to the GPU",
            "itemtype": "method",
            "name": "update",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLBatch.js",
            "line": 515,
            "description": "Draws the batch to the frame buffer",
            "itemtype": "method",
            "name": "render",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 15,
            "description": "Renders the graphics object",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "renderGraphics",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 85,
            "description": "Updates the graphics object",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "updateGraphics",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                }
            ],
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 137,
            "description": "Builds a rectangle to draw",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildRectangle",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                },
                {
                    "name": "webGLData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 202,
            "description": "Builds a circle to draw",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildCircle",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                },
                {
                    "name": "webGLData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 270,
            "description": "Builds a line to draw",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildLine",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                },
                {
                    "name": "webGLData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLGraphics.js",
            "line": 461,
            "description": "Builds a polygon to draw",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildPoly",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                },
                {
                    "name": "webGLData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CanvasGraphics",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 31,
            "description": "Add a display object to the webgl renderer",
            "itemtype": "method",
            "name": "setRenderable",
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 53,
            "description": "Renders the stage to its webgl view",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "projection",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 125,
            "description": "Renders the stage to its webgl view",
            "itemtype": "method",
            "name": "handleFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "FilterBlock"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 137,
            "description": "Renders a specific displayObject",
            "itemtype": "method",
            "name": "renderSpecific",
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 295,
            "description": "Renders a specific renderable",
            "itemtype": "method",
            "name": "renderSpecial",
            "params": [
                {
                    "name": "renderable",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 353,
            "description": "Updates a webgl texture",
            "itemtype": "method",
            "name": "updateTexture",
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 395,
            "description": "Adds filter blocks",
            "itemtype": "method",
            "name": "addFilterBlocks",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "FilterBlock"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "FilterBlock"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 435,
            "description": "Remove filter blocks",
            "itemtype": "method",
            "name": "removeFilterBlocks",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "FilterBlock"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "FilterBlock"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 449,
            "description": "Adds a display object and children to the webgl context",
            "itemtype": "method",
            "name": "addDisplayObjectAndChildren",
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 506,
            "description": "Removes a display object and children to the webgl context",
            "itemtype": "method",
            "name": "removeDisplayObjectAndChildren",
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 528,
            "description": "Inserts a displayObject into the linked list",
            "itemtype": "method",
            "name": "insertObject",
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "previousObject",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "nextObject",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 666,
            "description": "Inserts a displayObject into the linked list",
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "displayObject",
                    "description": "The object to insert",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 721,
            "description": "Removes a displayObject from the linked list",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "displayObject",
                    "description": "The object to remove",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 799,
            "description": "Initializes a tiling sprite",
            "itemtype": "method",
            "name": "initTilingSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The tiling sprite to initialize",
                    "type": "TilingSprite"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 858,
            "description": "Renders a Strip",
            "itemtype": "method",
            "name": "renderStrip",
            "params": [
                {
                    "name": "strip",
                    "description": "The strip to render",
                    "type": "Strip"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 950,
            "description": "Renders a TilingSprite",
            "itemtype": "method",
            "name": "renderTilingSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The tiling sprite to render",
                    "type": "TilingSprite"
                },
                {
                    "name": "projectionMatrix",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderGroup.js",
            "line": 990,
            "description": "Initializes a strip to be rendered",
            "itemtype": "method",
            "name": "initStrip",
            "params": [
                {
                    "name": "strip",
                    "description": "The strip to initialize",
                    "type": "Strip"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLBatch",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 87,
            "description": "Gets a new WebGLBatch from the pool",
            "static": 1,
            "itemtype": "method",
            "name": "getBatch",
            "return": {
                "description": "",
                "type": "WebGLBatch"
            },
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 107,
            "description": "Puts a batch back into the pool",
            "static": 1,
            "itemtype": "method",
            "name": "returnBatch",
            "params": [
                {
                    "name": "batch",
                    "description": "The batch to return",
                    "type": "WebGLBatch"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 121,
            "description": "Renders the stage to its webGL view",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "stage",
                    "description": "the Stage element to be rendered",
                    "type": "Stage"
                }
            ],
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 197,
            "description": "Updates the textures loaded into this webgl renderer",
            "static": 1,
            "itemtype": "method",
            "name": "updateTextures",
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 213,
            "description": "Updates a loaded webgl texture",
            "static": 1,
            "itemtype": "method",
            "name": "updateTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to update",
                    "type": "Texture"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 257,
            "description": "Destroys a loaded webgl texture",
            "itemtype": "method",
            "name": "destroyTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to update",
                    "type": "Texture"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 276,
            "description": "resizes the webGL view to the specified width and height",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "the new width of the webGL view",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the new height of the webGL view",
                    "type": "Number"
                }
            ],
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 304,
            "description": "Handles a lost webgl context",
            "itemtype": "method",
            "name": "handleContextLost",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLRenderer.js",
            "line": 317,
            "description": "Handles a restored webgl context",
            "itemtype": "method",
            "name": "handleContextRestored",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebGLRenderer",
            "module": "Phaser"
        },
        {
            "file": "pixi\\renderers\\webgl\\WebGLShaders.js",
            "line": 2,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "BitmapText",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\BitmapText.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "BitmapText",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\BitmapText.js",
            "line": 34,
            "description": "Set the copy for the text object",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                }
            ],
            "class": "BitmapText",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\BitmapText.js",
            "line": 46,
            "description": "Set the style of the text",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "font",
                            "description": "The size (optional) and bitmap font id (required) eq \"Arial\" or \"20px Arial\" (must have loaded previously)",
                            "type": "String"
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        }
                    ]
                }
            ],
            "class": "BitmapText",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\BitmapText.js",
            "line": 67,
            "description": "Renders text",
            "itemtype": "method",
            "name": "updateText",
            "access": "private",
            "tagname": "",
            "class": "BitmapText",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\BitmapText.js",
            "line": 142,
            "description": "Updates the transfor of this object",
            "itemtype": "method",
            "name": "updateTransform",
            "access": "private",
            "tagname": "",
            "class": "BitmapText",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 38,
            "description": "Set the style of the text",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fill",
                            "description": "A canvas fillstyle that will be used on the text eg \"red\", \"#00FF00\"",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "\"black\""
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "stroke",
                            "description": "A canvas fillstyle that will be used on the text stroke eg \"blue\", \"#FCFF00\"",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"black\""
                        },
                        {
                            "name": "strokeThickness",
                            "description": "A number that represents the thickness of the stroke. Default is 0 (no stroke)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "wordWrap",
                            "description": "Indicates if word wrap should be used",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "wordWrapWidth",
                            "description": "The width at which text will wrap",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                },
                {
                    "name": "[style.font=\"bold",
                    "description": "20pt Arial\"]  The style and size of the font",
                    "type": "String"
                }
            ],
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 65,
            "description": "Set the copy for the text object. To split a line you can use \"\\n\"",
            "methos": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                }
            ],
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 77,
            "description": "Renders text",
            "itemtype": "method",
            "name": "updateText",
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 148,
            "description": "Updates texture size based on canvas size",
            "itemtype": "method",
            "name": "updateTexture",
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 167,
            "description": "Updates the transfor of this object",
            "itemtype": "method",
            "name": "updateTransform",
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 216,
            "description": "A Text Object will apply wordwrap",
            "itemtype": "method",
            "name": "wordWrap",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\text\\Text.js",
            "line": 270,
            "description": "Destroys this text object",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "destroyTexture",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Text",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 21,
            "description": "[read-only] The width of the base texture set when the image has loaded",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "readonly": "",
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 30,
            "description": "[read-only] The height of the base texture set when the image has loaded",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "readonly": "",
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 39,
            "description": "[read-only] Describes if the base texture has loaded or not",
            "itemtype": "property",
            "name": "hasLoaded",
            "type": "Boolean",
            "readonly": "",
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 48,
            "description": "The source that is loaded to create the texture",
            "itemtype": "property",
            "name": "source",
            "type": "Image",
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 99,
            "description": "Destroys this base texture",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\BaseTexture.js",
            "line": 114,
            "description": "Helper function that returns a base texture based on an image url\nIf the image is not in the base texture cache it will be  created and loaded",
            "static": 1,
            "itemtype": "method",
            "name": "fromImage",
            "params": [
                {
                    "name": "imageUrl",
                    "description": "The image url of the texture",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BaseTexture"
            },
            "class": "BaseTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\RenderTexture.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "RenderTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\RenderTexture.js",
            "line": 57,
            "description": "Initializes the webgl data for this texture",
            "itemtype": "method",
            "name": "initWebGL",
            "access": "private",
            "tagname": "",
            "class": "RenderTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\RenderTexture.js",
            "line": 127,
            "description": "Initializes the canvas data for this texture",
            "itemtype": "method",
            "name": "initCanvas",
            "access": "private",
            "tagname": "",
            "class": "RenderTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\RenderTexture.js",
            "line": 143,
            "description": "This function will draw the display object to the texture.",
            "itemtype": "method",
            "name": "renderWebGL",
            "params": [
                {
                    "name": "displayObject",
                    "description": "The display object to render this texture on",
                    "type": "DisplayObject"
                },
                {
                    "name": "clear",
                    "description": "If true the texture will be cleared before the displayObject is drawn",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RenderTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\RenderTexture.js",
            "line": 217,
            "description": "This function will draw the display object to the texture.",
            "itemtype": "method",
            "name": "renderCanvas",
            "params": [
                {
                    "name": "displayObject",
                    "description": "The display object to render this texture on",
                    "type": "DisplayObject"
                },
                {
                    "name": "clear",
                    "description": "If true the texture will be cleared before the displayObject is drawn",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RenderTexture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 31,
            "description": "The base texture of this texture",
            "itemtype": "property",
            "name": "baseTexture",
            "type": "BaseTexture",
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 39,
            "description": "The frame specifies the region of the base texture that this texture uses",
            "itemtype": "property",
            "name": "frame",
            "type": "Rectangle",
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 47,
            "description": "The trim point",
            "itemtype": "property",
            "name": "trim",
            "type": "Point",
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 73,
            "description": "Called when the base texture is loaded",
            "itemtype": "method",
            "name": "onBaseTextureLoaded",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 93,
            "description": "Destroys this texture",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "destroyBase",
                    "description": "Whether to destroy the base texture as well",
                    "type": "Boolean"
                }
            ],
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 104,
            "description": "Specifies the rectangle region of the baseTexture",
            "itemtype": "method",
            "name": "setFrame",
            "params": [
                {
                    "name": "frame",
                    "description": "The frame of the texture to set it to",
                    "type": "Rectangle"
                }
            ],
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 127,
            "description": "Helper function that returns a texture based on an image url\nIf the image is not in the texture cache it will be  created and loaded",
            "static": 1,
            "itemtype": "method",
            "name": "fromImage",
            "params": [
                {
                    "name": "imageUrl",
                    "description": "The image url of the texture",
                    "type": "String"
                },
                {
                    "name": "crossorigin",
                    "description": "Whether requests should be treated as crossorigin",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Texture"
            },
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 150,
            "description": "Helper function that returns a texture based on a frame id\nIf the frame id is not in the texture cache an error will be thrown",
            "static": 1,
            "itemtype": "method",
            "name": "fromFrame",
            "params": [
                {
                    "name": "frameId",
                    "description": "The frame id of the texture",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Texture"
            },
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 166,
            "description": "Helper function that returns a texture based on a canvas element\nIf the canvas is not in the texture cache it will be  created and loaded",
            "static": 1,
            "itemtype": "method",
            "name": "fromCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas element source of the texture",
                    "type": "Canvas"
                }
            ],
            "return": {
                "description": "Texture"
            },
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 182,
            "description": "Adds a texture to the textureCache.",
            "static": 1,
            "itemtype": "method",
            "name": "addTextureToCache",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "id",
                    "description": "the id that the texture will be stored against.",
                    "type": "String"
                }
            ],
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\textures\\Texture.js",
            "line": 195,
            "description": "Remove a texture from the textureCache.",
            "static": 1,
            "itemtype": "method",
            "name": "removeTextureFromCache",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the texture to be removed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the texture that was removed",
                "type": "Texture"
            },
            "class": "Texture",
            "module": "Phaser"
        },
        {
            "file": "pixi\\utils\\Detector.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "EventTarget",
            "module": "Phaser"
        },
        {
            "file": "pixi\\utils\\Detector.js",
            "line": 5,
            "description": "This helper function will automatically detect which renderer you should be using.\nWebGL is the preferred renderer as it is a lot fastest. If webGL is not supported by\nthe browser then this function will return a canvas renderer",
            "itemtype": "method",
            "name": "autoDetectRenderer",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "the width of the renderers view",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the renderers view",
                    "type": "Number"
                },
                {
                    "name": "view",
                    "description": "the canvas to use as a view, optional",
                    "type": "Canvas"
                },
                {
                    "name": "transparent=false",
                    "description": "the transparency of the render view, default false",
                    "type": "Boolean"
                },
                {
                    "name": "antialias=false",
                    "description": "sets antialias (only applicable in webGL chrome at the moment)\n\nantialias",
                    "type": "Boolean"
                }
            ],
            "class": "EventTarget",
            "module": "Phaser"
        },
        {
            "file": "pixi\\utils\\EventTarget.js",
            "line": 1,
            "description": "https://github.com/mrdoob/eventtarget.js/\nTHankS mr DOob!",
            "class": "EventTarget",
            "module": "Phaser"
        },
        {
            "file": "pixi\\utils\\Polyk.js",
            "line": 36,
            "description": "Triangulates shapes for webGL graphic fills",
            "itemtype": "method",
            "name": "Triangulate",
            "is_constructor": 1,
            "class": "PolyK._PointInTriangle",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\utils\\Utils.js",
            "line": 8,
            "description": "A polyfill for requestAnimationFrame",
            "itemtype": "method",
            "name": "requestAnimationFrame",
            "class": "PolyK.AjaxRequest",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\utils\\Utils.js",
            "line": 13,
            "description": "A polyfill for cancelAnimationFrame",
            "itemtype": "method",
            "name": "cancelAnimationFrame",
            "class": "PolyK.AjaxRequest",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\utils\\Utils.js",
            "line": 43,
            "description": "Converts a hex color number to an [R, G, B] array",
            "itemtype": "method",
            "name": "HEXtoRGB",
            "params": [
                {
                    "name": "hex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "PolyK.AjaxRequest",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\utils\\Utils.js",
            "line": 53,
            "description": "A polyfill for Function.prototype.bind",
            "itemtype": "method",
            "name": "bind",
            "class": "PolyK.AjaxRequest",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 17,
            "description": "a refference to the stage",
            "itemtype": "property",
            "name": "stage",
            "type": "Stage",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 25,
            "description": "the mouse data",
            "itemtype": "property",
            "name": "mouse",
            "type": "InteractionData",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 33,
            "description": "an object that stores current touches (InteractionData) by id reference",
            "itemtype": "property",
            "name": "touchs",
            "type": "Object",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 61,
            "description": "Collects an interactive sprite recursively to have their interactions managed",
            "itemtype": "method",
            "name": "collectInteractiveSprite",
            "params": [
                {
                    "name": "displayObject",
                    "description": "the displayObject to collect",
                    "type": "DisplayObject"
                },
                {
                    "name": "iParent",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 105,
            "description": "Sets the target for event delegation",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "the renderer to bind events to",
                    "type": "WebGLRenderer|CanvasRenderer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 135,
            "description": "updates the state of interactive objects",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 223,
            "description": "Is called when the mouse moves accross the renderer element",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The DOM event of the mouse moving",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 255,
            "description": "Is called when the mouse button is pressed down on the renderer element",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The DOM event of a mouse button being pressed down",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 320,
            "description": "Is called when the mouse button is released on the renderer element",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The DOM event of a mouse button being released",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 372,
            "description": "Tests if the current mouse coords hit a sprite",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "item",
                    "description": "The displayObject to test for a hit",
                    "type": "DisplayObject"
                },
                {
                    "name": "interactionData",
                    "description": "The interactiondata object to update in the case of a hit",
                    "type": "InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 445,
            "description": "Is called when a touch is moved accross the renderer element",
            "itemtype": "method",
            "name": "onTouchMove",
            "params": [
                {
                    "name": "event",
                    "description": "The DOM event of a touch moving accross the renderer view",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 476,
            "description": "Is called when a touch is started on the renderer element",
            "itemtype": "method",
            "name": "onTouchStart",
            "params": [
                {
                    "name": "event",
                    "description": "The DOM event of a touch starting on the renderer view",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 525,
            "description": "Is called when a touch is ended on the renderer element",
            "itemtype": "method",
            "name": "onTouchEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The DOM event of a touch ending on the renderer view",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PolyK.InteractionManager",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 604,
            "description": "This point stores the global coords of where the touch/mouse event happened",
            "itemtype": "property",
            "name": "global",
            "type": "Point",
            "class": "PolyK.InteractionData",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 615,
            "description": "The target Sprite that was interacted with",
            "itemtype": "property",
            "name": "target",
            "type": "Sprite",
            "class": "PolyK.InteractionData",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 623,
            "description": "When passed to an event handler, this will be the original DOM Event that was captured",
            "itemtype": "property",
            "name": "originalEvent",
            "type": "Event",
            "class": "PolyK.InteractionData",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\InteractionManager.js",
            "line": 632,
            "description": "This will return the local coords of the specified displayObject for this InteractionData",
            "itemtype": "method",
            "name": "getLocalPosition",
            "params": [
                {
                    "name": "displayObject",
                    "description": "The DisplayObject that you would like the local coords off",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "A point containing the coords of the InteractionData position relative to the DisplayObject",
                "type": "Point"
            },
            "class": "PolyK.InteractionData",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\Intro.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Sound",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\Outro.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Sound",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "pixi\\Pixi.js",
            "line": 1,
            "author": "Mat Groves http://matgroves.com/ @Doormat23",
            "class": "Sound",
            "module": "Phaser",
            "namespace": "PolyK"
        },
        {
            "file": "sound\\Sound.js",
            "line": 16,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Game}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 24,
            "description": "Name of the sound",
            "itemtype": "property",
            "name": "name",
            "access": "public",
            "tagname": "",
            "type": "{string}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 32,
            "description": "Asset key for the sound.",
            "itemtype": "property",
            "name": "key",
            "access": "public",
            "tagname": "",
            "type": "{string}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 40,
            "description": "Whether or not the sound will loop.",
            "itemtype": "property",
            "name": "loop",
            "access": "public",
            "tagname": "",
            "type": "{bool}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 48,
            "description": "The global audio volume. A value between 0 (silence) and 1 (full volume)",
            "itemtype": "property",
            "name": "_volume",
            "access": "private",
            "tagname": "",
            "type": "{number}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 56,
            "description": "The sound markers, empty by default",
            "itemtype": "property",
            "name": "markers",
            "access": "public",
            "tagname": "",
            "type": "{object}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 65,
            "description": "Reference to AudioContext instance.",
            "itemtype": "property",
            "name": "context",
            "access": "public",
            "tagname": "",
            "type": "{AudioContext}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 73,
            "description": "Decoded data buffer / Audio tag.",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 78,
            "description": "Boolean indicating whether the game is on \"mute\"",
            "itemtype": "property",
            "name": "_muted",
            "access": "private",
            "tagname": "",
            "type": "{bool}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 86,
            "description": "Boolean indicating whether the sound should start automatically",
            "itemtype": "property",
            "name": "autoplay",
            "access": "public",
            "tagname": "",
            "type": "{bool}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 94,
            "description": "The total duration of the sound, in milliseconds",
            "itemtype": "property",
            "name": "autoplay",
            "access": "public",
            "tagname": "",
            "type": "{bool}",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 252,
            "description": "Play this sound, or a marked section of it.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "marker",
                    "description": "Assets key of the sound you want to play.",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "The starting position",
                    "type": "Number"
                },
                {
                    "name": "volume",
                    "description": "Volume of the sound you want to play.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "loop",
                    "description": "Loop when it finished playing? (Default to false)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "return": {
                "description": "The playing sound object.",
                "type": "Sound"
            },
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 430,
            "description": "Restart the sound, or a marked section of it.",
            "itemtype": "method",
            "name": "restart",
            "params": [
                {
                    "name": "marker",
                    "description": "Assets key of the sound you want to play.",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "The starting position",
                    "type": "Number"
                },
                {
                    "name": "volume",
                    "description": "Volume of the sound you want to play.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "loop",
                    "description": "Loop when it finished playing? (Default to false)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 449,
            "description": "Pauses the sound",
            "itemtype": "method",
            "name": "pause",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 464,
            "description": "Resumes the sound",
            "itemtype": "method",
            "name": "pause",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 496,
            "description": "Stop playing this sound.",
            "itemtype": "method",
            "name": "stop",
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 551,
            "description": "Mutes sound.",
            "itemtype": "method",
            "name": "mute",
            "return": {
                "description": "whether or not the sound is muted",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 559,
            "description": "Mutes sound.",
            "itemtype": "method",
            "name": "mute",
            "return": {
                "description": "whether or not the sound is muted",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 605,
            "itemtype": "method",
            "name": "volume",
            "return": {
                "description": "The current volume. A value between 0 (silence) and 1 (full volume)",
                "type": "Number"
            },
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\Sound.js",
            "line": 613,
            "itemtype": "method",
            "name": "volume",
            "return": {
                "description": "Sets the current volume. A value between 0 (silence) and 1 (full volume)",
                "type": "Number"
            },
            "class": "Sound",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 10,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "access": "public",
            "tagname": "",
            "type": "{Phaser.Game}",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 21,
            "description": "Boolean indicating whether the game is on \"mute\"",
            "itemtype": "property",
            "name": "_muted",
            "access": "private",
            "tagname": "",
            "type": "{bool}",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 30,
            "description": "The global audio volume. A value between 0 (silence) and 1 (full volume)",
            "itemtype": "property",
            "name": "_volume",
            "access": "private",
            "tagname": "",
            "type": "{number}",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 38,
            "description": "An array containing all the sounds",
            "itemtype": "property",
            "name": "_sounds",
            "access": "private",
            "tagname": "",
            "type": "{array}",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 60,
            "description": "Initialises the sound manager",
            "itemtype": "method",
            "name": "boot",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 142,
            "description": "Enables the audio, usually after the first touch",
            "itemtype": "method",
            "name": "unlock",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 176,
            "description": "Stops all the sounds in the game",
            "itemtype": "method",
            "name": "stopAll",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 192,
            "description": "Pauses all the sounds in the game",
            "itemtype": "method",
            "name": "pauseAll",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 208,
            "description": "resumes every sound in the game",
            "itemtype": "method",
            "name": "resumeAll",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 224,
            "description": "Decode a sound with its assets key.",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "key",
                    "description": "Assets key of the sound to be decoded.",
                    "type": "String"
                },
                {
                    "name": "sound",
                    "description": "its bufer will be set to decoded data.",
                    "type": "Phaser.Sound",
                    "optional": true
                }
            ],
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 256,
            "description": "updates every sound in the game",
            "itemtype": "method",
            "name": "update",
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 284,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key for the sound.",
                    "type": "String"
                },
                {
                    "name": "volume",
                    "description": "Default value for the volume.",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "Whether or not the sound will loop.",
                    "type": "Bool"
                }
            ],
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 310,
            "description": "A global audio mute toggle.",
            "itemtype": "method",
            "name": "mute",
            "return": {
                "description": "whether or not the game is on \"mute\"",
                "type": "Bool"
            },
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 321,
            "description": "Mute sounds.",
            "itemtype": "method",
            "name": "mute",
            "return": {
                "description": "whether or not the game is on \"mute\"",
                "type": "Bool"
            },
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 383,
            "itemtype": "method",
            "name": "volume",
            "return": {
                "description": "The global audio volume. A value between 0 (silence) and 1 (full volume)",
                "type": "Number"
            },
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "sound\\SoundManager.js",
            "line": 400,
            "description": "Sets the global volume",
            "itemtype": "method",
            "name": "volume",
            "return": {
                "description": "The global audio volume. A value between 0 (silence) and 1 (full volume)",
                "type": "Number"
            },
            "class": "SoundManager",
            "module": "PIXI"
        },
        {
            "file": "system\\Canvas.js",
            "line": 16,
            "description": "Creates the <canvas> tag",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "width",
                    "description": "The desired width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The desired height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the newly created <canvas> tag",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 38,
            "description": "Get the DOM offset values of any given element",
            "itemtype": "method",
            "name": "getOffset",
            "params": [
                {
                    "name": "element",
                    "description": "The targeted element that we want to retrieve the offset",
                    "type": "HTMLElement"
                },
                {
                    "name": "point",
                    "description": "The point we want to take the x/y values of the offset",
                    "type": "Phaser.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "point  A point objet with the offsetX and Y as its properties",
                "type": "Phaser.Point"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 62,
            "description": "Returns the aspect ratio of the given canvas.",
            "itemtype": "method",
            "name": "getAspectRatio",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas to get the aspect ratio from.",
                    "type": "HTMLCanvasElement"
                }
            ],
            "return": {
                "description": "Returns true on success",
                "type": "Number"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 73,
            "description": "Sets the background color behind the canvas. This changes the canvas style property.",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas to set the background color on.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "color",
                    "description": "The color to set. Can be in the format 'rgb(r,g,b)', or '#RRGGBB' or any valid CSS color.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the source canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 91,
            "description": "Sets the touch-action property on the canvas style. Can be used to disable default browser touch actions.",
            "itemtype": "method",
            "name": "setTouchAction",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas to set the touch action on.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "value",
                    "description": "The touch action to set. Defaults to 'none'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the source canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 111,
            "description": "Adds the given canvas element to the DOM. The canvas will be added as a child of the given parent.\nIf no parent is given it will be added as a child of the document.body.",
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas to set the touch action on.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "parent",
                    "description": "The DOM element to add the canvas to. Defaults to ''.",
                    "type": "String"
                },
                {
                    "name": "overflowHidden",
                    "description": "If set to true it will add the overflow='hidden' style to the parent DOM element.",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "Returns the source canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 152,
            "description": "Sets the transform of the given canvas to the matrix values provided.",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "context",
                    "description": "The context to set the transform on.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translateX",
                    "description": "The value to translate horizontally by.",
                    "type": "Number"
                },
                {
                    "name": "translateY",
                    "description": "The value to translate vertically by.",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "The value to scale horizontally by.",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "The value to scale vertically by.",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "The value to skew horizontaly by.",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "The value to skew vertically by.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the source context.",
                "type": "CanvasRenderingContext2D"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 173,
            "description": "Sets the Image Smoothing property on the given context. Set to false to disable image smoothing.\nBy default browsers have image smoothing enabled, which isn't always what you visually want, especially\nwhen using pixel art in a game. Note that this sets the property on the context itself, so that any image\ndrawn to the context will be affected. This sets the property across all current browsers but support is\npatchy on earlier browsers, especially on mobile.",
            "itemtype": "method",
            "name": "setSmoothingEnabled",
            "params": [
                {
                    "name": "context",
                    "description": "The context to enable or disable the image smoothing on.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "value",
                    "description": "If set to true it will enable image smoothing, false will disable it.",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "Returns the source context.",
                "type": "CanvasRenderingContext2D"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 197,
            "description": "Sets the CSS image-rendering property on the given canvas to be 'crisp' (aka 'optimize contrast on webkit').\nNote that if this doesn't given the desired result then see the setSmoothingEnabled.",
            "itemtype": "method",
            "name": "setImageRenderingCrisp",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas to set image-rendering crisp on.",
                    "type": "HTMLCanvasElement"
                }
            ],
            "return": {
                "description": "Returns the source canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Canvas.js",
            "line": 216,
            "description": "Sets the CSS image-rendering property on the given canvas to be 'bicubic' (aka 'auto').\nNote that if this doesn't given the desired result then see the CanvasUtils.setSmoothingEnabled method.",
            "itemtype": "method",
            "name": "setImageRenderingBicubic",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas to set image-rendering bicubic on.",
                    "type": "HTMLCanvasElement"
                }
            ],
            "return": {
                "description": "Returns the source canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvas",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 1,
            "description": "Phaser - Device\n\nDetects device support capabilities. Using some elements from System.js by MrDoob and Modernizr\nhttps://github.com/Modernizr/Modernizr/blob/master/feature-detects/audio.js",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 10,
            "description": "An optional 'fix' for the horrendous Android stock browser bug\nhttps://code.google.com/p/android/issues/detail?id=39247",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 19,
            "description": "Is running desktop?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 25,
            "description": "Is running on iOS?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 31,
            "description": "Is running on android?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 37,
            "description": "Is running on chromeOS?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 43,
            "description": "Is running on linux?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 49,
            "description": "Is running on maxOS?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 55,
            "description": "Is running on windows?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 63,
            "description": "Is canvas available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 69,
            "description": "Is file available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 75,
            "description": "Is fileSystem available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 81,
            "description": "Is localStorage available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 87,
            "description": "Is webGL available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 93,
            "description": "Is worker available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 99,
            "description": "Is touch available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 105,
            "description": "Is mspointer available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 111,
            "description": "Is css3D available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 117,
            "description": "Is Pointer Lock available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 125,
            "description": "Is running in arora?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 131,
            "description": "Is running in chrome?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 137,
            "description": "Is running in epiphany?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 143,
            "description": "Is running in firefox?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 149,
            "description": "Is running in ie?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 155,
            "description": "Version of ie?",
            "type": "Number",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 161,
            "description": "Is running in mobileSafari?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 167,
            "description": "Is running in midori?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 173,
            "description": "Is running in opera?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 179,
            "description": "Is running in safari?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 188,
            "description": "Are Audio tags available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 194,
            "description": "Is the WebAudio API available?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 200,
            "description": "Can this device play ogg files?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 206,
            "description": "Can this device play opus files?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 212,
            "description": "Can this device play mp3 files?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 218,
            "description": "Can this device play wav files?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 223,
            "description": "Can this device play m4a files?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 229,
            "description": "Can this device play webm files?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 237,
            "description": "Is running on iPhone?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 243,
            "description": "Is running on iPhone4?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 249,
            "description": "Is running on iPad?",
            "type": "{boolean}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 255,
            "description": "PixelRatio of the host device?",
            "type": "Number",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 273,
            "description": "Check which OS is game running on.",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 301,
            "description": "Check HTML5 features of the host environment.",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 333,
            "description": "Check what browser is game running in.",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 369,
            "description": "Check audio support.",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 415,
            "description": "Check PixelRatio of devices.",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\Device.js",
            "line": 428,
            "description": "Check whether the host environment support 3D CSS.",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 1,
            "description": "Phaser - RequestAnimationFrame\n\nAbstracts away the use of RAF or setTimeOut for the core game update loop.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 29,
            "description": "The function called by the update",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 35,
            "description": "Starts the requestAnimatioFrame running or setTimeout if unavailable in browser",
            "itemtype": "method",
            "name": "start",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 68,
            "description": "The update method for the requestAnimationFrame",
            "itemtype": "method",
            "name": "RAFUpdate",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 80,
            "description": "The update method for the setTimeout",
            "itemtype": "method",
            "name": "SetTimeoutUpdate",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 92,
            "description": "Stops the requestAnimationFrame from running",
            "itemtype": "method",
            "name": "stop",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 111,
            "description": "Is the browser using setTimeout?",
            "itemtype": "method",
            "name": "isSetTimeOut",
            "return": {
                "description": "bool"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\RequestAnimationFrame.js",
            "line": 120,
            "description": "Is the browser using requestAnimationFrame?",
            "itemtype": "method",
            "name": "isRAF",
            "return": {
                "description": "bool"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 3,
            "description": "Stage height when start the game.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 9,
            "description": "If the game should be forced to use Landscape mode, this is set to true by Game.Stage",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 15,
            "description": "If the game should be forced to use Portrait mode, this is set to true by Game.Stage",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 21,
            "description": "If the game should be forced to use a specific orientation and the device currently isn't in that orientation this is set to true.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 27,
            "description": "If you wish to align your game in the middle of the page then you can set this value to true.\nIt will place a re-calculated margin-left pixel value onto the canvas element which is updated on orientation/resizing.\nIt doesn't care about any other DOM element that may be on the page, it literally just sets the margin.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 35,
            "description": "If you wish to align your game in the middle of the page then you can set this value to true.\nIt will place a re-calculated margin-left pixel value onto the canvas element which is updated on orientation/resizing.\nIt doesn't care about any other DOM element that may be on the page, it literally just sets the margin.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 43,
            "description": "Minimum width the canvas should be scaled to (in pixels)",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 49,
            "description": "Maximum width the canvas should be scaled to (in pixels).\nIf null it will scale to whatever width the browser can handle.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 56,
            "description": "Minimum height the canvas should be scaled to (in pixels)",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 62,
            "description": "Maximum height the canvas should be scaled to (in pixels).\nIf null it will scale to whatever height the browser can handle.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 69,
            "description": "Width of the stage after calculation.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 75,
            "description": "Height of the stage after calculation.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 81,
            "description": "The maximum number of times it will try to resize the canvas to fill the browser (default is 5)",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 197,
            "description": "Handle window.orientationchange events",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 220,
            "description": "Handle window.resize events",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 249,
            "description": "Re-calculate scale mode and update screen size.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "system\\StageScaleMode.js",
            "line": 283,
            "description": "Set screen size automatically based on the scaleMode.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 1,
            "description": "Phaser - Tile\n\nA Tile is a single representation of a tile within a Tilemap",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 7,
            "description": "Tile constructor\nCreate a new <code>Tile</code>.",
            "params": [
                {
                    "name": "tilemap",
                    "description": "the tilemap this tile belongs to.",
                    "type": "Tilemap"
                },
                {
                    "name": "index",
                    "description": "The index of this tile type in the core map data.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of the tile.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "number} Height of the tile."
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 18,
            "description": "The virtual mass of the tile.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 24,
            "description": "Indicating this Tile doesn't collide at all.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 30,
            "description": "Indicating collide with any object on the left.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 36,
            "description": "Indicating collide with any object on the right.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 42,
            "description": "Indicating collide with any object on the top.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 48,
            "description": "Indicating collide with any object on the bottom.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 54,
            "description": "Enable separation at x-axis.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 60,
            "description": "Enable separation at y-axis.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 76,
            "description": "Clean up memory.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 83,
            "description": "Set collision configs.",
            "params": [
                {
                    "name": "collision",
                    "description": "Bit field of flags. (see Tile.allowCollision)",
                    "type": "Number"
                },
                {
                    "name": "resetCollisions",
                    "description": "Reset collision flags before set.",
                    "type": "Bool"
                },
                {
                    "name": "separateX",
                    "description": "Enable seprate at x-axis.",
                    "type": "Bool"
                },
                {
                    "name": "separateY",
                    "description": "Enable seprate at y-axis.",
                    "type": "Bool"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 113,
            "description": "Reset collision status flags.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tile.js",
            "line": 126,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the object.",
                "type": "String"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 1,
            "description": "Phaser - Tilemap\n\nThis GameObject allows for the display of a tilemap within the game world. Tile maps consist of an image, tile data and a size.\nInternally it creates a TilemapLayer for each layer in the tilemap.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 8,
            "description": "Tilemap constructor\nCreate a new <code>Tilemap</code>.",
            "params": [
                {
                    "name": "game",
                    "description": "Current game instance.",
                    "type": "Phaser.Game"
                },
                {
                    "name": "key",
                    "description": "Asset key for this map.",
                    "type": "String"
                },
                {
                    "name": "mapData",
                    "description": "Data of this map. (a big 2d array, normally in csv)",
                    "type": "String"
                },
                {
                    "name": "format",
                    "description": "Format of this map data, available: Tilemap.CSV or Tilemap.JSON.",
                    "type": "Number"
                },
                {
                    "name": "resizeWorld",
                    "description": "Resize the world bound automatically based on this tilemap?",
                    "type": "Bool"
                },
                {
                    "name": "tileWidth",
                    "description": "Width of tiles in this map (used for CSV maps).",
                    "type": "Number"
                },
                {
                    "name": "tileHeight",
                    "description": "Height of tiles in this map (used for CSV maps).",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 31,
            "description": "Render iteration counter",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 36,
            "description": "Tilemap collision callback.",
            "type": "{function}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 85,
            "description": "Parset csv map data and generate tiles.",
            "params": [
                {
                    "name": "data",
                    "description": "CSV map data.",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "Asset key for tileset image.",
                    "type": "String"
                },
                {
                    "name": "tileWidth",
                    "description": "Width of its tile.",
                    "type": "Number"
                },
                {
                    "name": "tileHeight",
                    "description": "Height of its tile.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 124,
            "description": "Parse JSON map data and generate tiles.",
            "params": [
                {
                    "name": "data",
                    "description": "JSON map data.",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "Asset key for tileset image.",
                    "type": "String"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 180,
            "description": "Create tiles of given quantity.",
            "params": [
                {
                    "name": "qty",
                    "description": "Quentity of tiles to be generated.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 193,
            "description": "Set callback to be called when this tilemap collides.",
            "params": [
                {
                    "name": "context",
                    "description": "Callback will be called with this context.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 205,
            "description": "Set collision configs of tiles in a range index.",
            "params": [
                {
                    "name": "start",
                    "description": "First index of tiles.",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "Last index of tiles.",
                    "type": "Number"
                },
                {
                    "name": "collision",
                    "description": "Bit field of flags. (see Tile.allowCollision)",
                    "type": "Number"
                },
                {
                    "name": "resetCollisions",
                    "description": "Reset collision flags before set.",
                    "type": "Bool"
                },
                {
                    "name": "separateX",
                    "description": "Enable seprate at x-axis.",
                    "type": "Bool"
                },
                {
                    "name": "separateY",
                    "description": "Enable seprate at y-axis.",
                    "type": "Bool"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 227,
            "description": "Set collision configs of tiles with given index.",
            "params": [
                {
                    "name": "values",
                    "description": "Index array which contains all tile indexes. The tiles with those indexes will be setup with rest parameters.",
                    "type": "Number[]"
                },
                {
                    "name": "collision",
                    "description": "Bit field of flags. (see Tile.allowCollision)",
                    "type": "Number"
                },
                {
                    "name": "resetCollisions",
                    "description": "Reset collision flags before set.",
                    "type": "Bool"
                },
                {
                    "name": "separateX",
                    "description": "Enable seprate at x-axis.",
                    "type": "Bool"
                },
                {
                    "name": "separateY",
                    "description": "Enable seprate at y-axis.",
                    "type": "Bool"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 250,
            "description": "Get the tile by its index.",
            "params": [
                {
                    "name": "value",
                    "description": "Index of the tile you want to get.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The tile with given index.",
                "type": "Tile"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 266,
            "description": "Get the tile located at specific position and layer.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of this tile located.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of this tile located.",
                    "type": "Number"
                },
                {
                    "name": "layer",
                    "description": "layer of this tile located.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The tile with specific properties.",
                "type": "Tile"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 281,
            "description": "Get the tile located at specific position (in world coordinate) and layer. (thus you give a position of a point which is within the tile)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the point in target tile.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "Y position of the point in target tile.",
                    "type": "Number"
                },
                {
                    "name": "layer",
                    "description": "layer of this tile located.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The tile with specific properties.",
                "type": "Tile"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 296,
            "description": "Gets the tile underneath the Input.x/y position",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer to check, defaults to 0"
                }
            ],
            "return": {
                "description": "",
                "type": "Tile"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 309,
            "description": "Get tiles overlaps the given object.",
            "params": [
                {
                    "name": "object",
                    "description": "Tiles you want to get that overlaps this.",
                    "type": "GameObject"
                }
            ],
            "return": {
                "description": "Array with tiles information. (Each contains x, y and the tile.)",
                "type": "Array"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 322,
            "description": "Check whether this tilemap collides with the given game object or group of objects.",
            "params": [
                {
                    "name": "objectOrGroup",
                    "description": "Target object of group you want to check.",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "This is called if objectOrGroup collides the tilemap.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "Callback will be called with this context.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return true if this collides with given object, otherwise return false.",
                "type": "Bool"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 352,
            "description": "Check whether this tilemap collides with the given game object.",
            "params": [
                {
                    "name": "object",
                    "description": "Target object you want to check.",
                    "type": "GameObject"
                }
            ],
            "return": {
                "description": "Return true if this collides with given object, otherwise return false.",
                "type": "Bool"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 382,
            "description": "Set a tile to a specific layer.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of this tile.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of this tile.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "The index of this tile type in the core map data.",
                    "type": "Number"
                },
                {
                    "name": "layer",
                    "description": "which layer you want to set the tile to.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\Tilemap.js",
            "line": 397,
            "description": "Calls the renderer",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 1,
            "description": "Phaser - TilemapLayer\n\nA Tilemap Layer. Tiled format maps can have multiple overlapping layers.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 7,
            "description": "TilemapLayer constructor\nCreate a new <code>TilemapLayer</code>.",
            "params": [
                {
                    "name": "parent",
                    "description": "The tilemap that contains this layer.",
                    "type": "Tilemap"
                },
                {
                    "name": "id",
                    "description": "The ID of this layer within the Tilemap array.",
                    "type": "Number"
                },
                {
                    "name": "key",
                    "description": "Asset key for this map.",
                    "type": "String"
                },
                {
                    "name": "mapFormat",
                    "description": "Format of this map data, available: Tilemap.CSV or Tilemap.JSON.",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "Name of this layer, so you can get this layer by its name.",
                    "type": "String"
                },
                {
                    "name": "tileWidth",
                    "description": "Width of tiles in this map.",
                    "type": "Number"
                },
                {
                    "name": "tileHeight",
                    "description": "Height of tiles in this map.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 21,
            "description": "Controls whether update() and draw() are automatically called.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 27,
            "description": "Controls whether draw() are automatically called.",
            "type": "{bool}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 33,
            "description": "How many tiles in each row.\nRead-only variable, do NOT recommend changing after the map is loaded!",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 40,
            "description": "How many tiles in each column.\nRead-only variable, do NOT recommend changing after the map is loaded!",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 47,
            "description": "Read-only variable, do NOT recommend changing after the map is loaded!",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 53,
            "description": "Read-only variable, do NOT recommend changing after the map is loaded!",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 59,
            "description": "Distance between REAL tiles to the tileset texture bound.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 65,
            "description": "Distance between every 2 neighbor tile in the tileset texture.",
            "type": "{number}",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 104,
            "description": "Set a specific tile with its x and y in tiles.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of this tile in world coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of this tile in world coordinates.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "The index of this tile type in the core map data.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 125,
            "description": "Set a specific tile with its x and y in tiles.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of this tile.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of this tile.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "The index of this tile type in the core map data.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 143,
            "description": "Swap tiles with 2 kinds of indexes.",
            "params": [
                {
                    "name": "tileA",
                    "description": "First tile index.",
                    "type": "Number"
                },
                {
                    "name": "tileB",
                    "description": "Second tile index.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "specify a Rectangle of tiles to operate. The x position in tiles of Rectangle's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "specify a Rectangle of tiles to operate. The y position in tiles of Rectangle's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "specify a Rectangle of tiles to operate. The width in tiles.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "specify a Rectangle of tiles to operate. The height in tiles.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 187,
            "description": "Fill a tile block with a specific tile index.",
            "params": [
                {
                    "name": "index",
                    "description": "Index of tiles you want to fill with.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x position (in tiles) of block's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y position (in tiles) of block's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "width of block.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of block.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 211,
            "description": "Set random tiles to a specific tile block.",
            "params": [
                {
                    "name": "tiles",
                    "description": "Tiles with indexes in this array will be randomly set to the given block.",
                    "type": "Number[]"
                },
                {
                    "name": "x",
                    "description": "x position (in tiles) of block's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y position (in tiles) of block's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "width of block.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of block.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 235,
            "description": "Replace one kind of tiles to another kind.",
            "params": [
                {
                    "name": "tileA",
                    "description": "Index of tiles you want to replace.",
                    "type": "Number"
                },
                {
                    "name": "tileB",
                    "description": "Index of tiles you want to set.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x position (in tiles) of block's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y position (in tiles) of block's left-top corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "width of block.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of block.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 263,
            "description": "Get a tile block with specific position and size.(both are in tiles)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of block's left-top corner.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of block's left-top corner.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of block.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of block.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 289,
            "description": "Get a tile with specific position (in world coordinate). (thus you give a position of a point which is within the tile)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the point in target tile.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "Y position of the point in target tile.",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 303,
            "description": "Get tiles overlaps the given object.",
            "params": [
                {
                    "name": "object",
                    "description": "Tiles you want to get that overlaps this.",
                    "type": "GameObject"
                }
            ],
            "return": {
                "description": "Array with tiles informations. (Each contains x, y and the tile.)",
                "type": "Array"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 340,
            "description": "Get a tile block with its position and size. (This method does not return, it'll set result to _tempTileBlock)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of block's left-top corner.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of block's left-top corner.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of block.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of block.",
                    "type": "Number"
                },
                {
                    "name": "collisionOnly",
                    "description": "Whethor or not ONLY return tiles which will collide (its allowCollisions value is not Collision.NONE).",
                    "type": "Bool"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 405,
            "description": "Get the tile index of specific position (in tiles).",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the tile.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the tile.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Index of the tile at that position. Return null if there isn't a tile there.",
                "type": "Number"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 425,
            "description": "Add a column of tiles into the layer.",
            "params": [
                {
                    "name": "column",
                    "description": "An array of tile indexes to be added.",
                    "type": "String[]/number[]"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 477,
            "description": "Update boundsInTiles with widthInTiles and heightInTiles.",
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapLayer.js",
            "line": 486,
            "description": "Parse tile offsets from map data.\nBasically this creates a large array of objects that contain the x/y coordinates to grab each tile from\nfor the entire map. Yes we could calculate this at run-time by using the tile index and some math, but we're\ntrading a quite small bit of memory here to not have to process that in our main render loop.",
            "return": {
                "description": "length of tileOffsets array.",
                "type": "Number"
            },
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "tilemap\\TilemapRenderer.js",
            "line": 23,
            "description": "Render a tilemap to a canvas.",
            "params": [
                {
                    "name": "tilemap",
                    "description": "The tilemap data to render.",
                    "type": "Tilemap"
                }
            ],
            "class": "Time",
            "module": "Phaser.Canvas"
        },
        {
            "file": "time\\Time.js",
            "line": 18,
            "description": "A reference to the currently running Game.",
            "itemtype": "property",
            "name": "game",
            "type": "{Phaser.Game}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 25,
            "description": "The time at which the Game instance started.",
            "itemtype": "property",
            "name": "_started",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 33,
            "description": "The time (in ms) that the last second counter ticked over.",
            "itemtype": "property",
            "name": "_timeLastSecond",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 41,
            "description": "The time the game started being paused.",
            "itemtype": "property",
            "name": "_pauseStarted",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 49,
            "description": "The elapsed time calculated for the physics motion updates.",
            "itemtype": "property",
            "name": "physicsElapsed",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 57,
            "description": "Game time counter.",
            "itemtype": "property",
            "name": "time",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 65,
            "description": "Records how long the game has been paused for. Is reset each time the game pauses.",
            "itemtype": "property",
            "name": "pausedTime",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 73,
            "description": "The time right now.",
            "itemtype": "property",
            "name": "now",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 81,
            "description": "Elapsed time since the last frame.",
            "itemtype": "property",
            "name": "elapsed",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 89,
            "description": "Frames per second.",
            "itemtype": "property",
            "name": "fps",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 97,
            "description": "The lowest rate the fps has dropped to.",
            "itemtype": "property",
            "name": "fpsMin",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 105,
            "description": "The highest rate the fps has reached (usually no higher than 60fps).",
            "itemtype": "property",
            "name": "fpsMax",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 113,
            "description": "The minimum amount of time the game has taken between two frames.",
            "itemtype": "property",
            "name": "msMin",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 121,
            "description": "The maximum amount of time the game has taken between two frames.",
            "itemtype": "property",
            "name": "msMax",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 129,
            "description": "The number of frames record in the last second.",
            "itemtype": "property",
            "name": "frames",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 137,
            "description": "Records how long the game was paused for in miliseconds.",
            "itemtype": "property",
            "name": "pauseDuration",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 145,
            "description": "The value that setTimeout needs to work out when to next update",
            "itemtype": "property",
            "name": "timeToCall",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 153,
            "description": "Internal value used by timeToCall as part of the setTimeout loop",
            "itemtype": "property",
            "name": "lastTime",
            "access": "public",
            "tagname": "",
            "type": "{Number}",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 171,
            "description": "The number of seconds that have elapsed since the game was started.",
            "itemtype": "method",
            "name": "totalElapsedSeconds",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 180,
            "description": "Updates the game clock and calculate the fps.\nThis is called automatically by Phaser.Game",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "time",
                    "description": "The current timestamp, either performance.now or Date.now depending on the browser",
                    "type": "Number"
                }
            ],
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 226,
            "description": "Called when the game enters a paused state.",
            "itemtype": "method",
            "name": "gamePaused",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 237,
            "description": "Called when the game resumes from a paused state.",
            "itemtype": "method",
            "name": "gameResumed",
            "access": "private",
            "tagname": "",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 251,
            "description": "How long has passed since the given time.",
            "itemtype": "method",
            "name": "elapsedSince",
            "params": [
                {
                    "name": "since",
                    "description": "The time you want to measure against.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The difference between the given time and now.",
                "type": "Number"
            },
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 261,
            "description": "How long has passed since the given time (in seconds).",
            "itemtype": "method",
            "name": "elapsedSecondsSince",
            "params": [
                {
                    "name": "since",
                    "description": "The time you want to measure (in seconds).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Duration between given time and now (in seconds).",
                "type": "Number"
            },
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "time\\Time.js",
            "line": 271,
            "description": "Resets the private _started value to now.",
            "itemtype": "method",
            "name": "reset",
            "class": "Time",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\Tween.js",
            "line": 1,
            "description": "Tween constructor\nCreate a new <code>Tween</code>.",
            "params": [
                {
                    "name": "object",
                    "description": "Target object will be affected by this tween.",
                    "type": "Object"
                },
                {
                    "name": "game",
                    "description": "Current game instance.",
                    "type": "Phaser.Game"
                }
            ],
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\Tween.js",
            "line": 11,
            "description": "Reference to the target object.",
            "type": "{object}",
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\Tween.js",
            "line": 55,
            "description": "Configure the Tween",
            "params": [
                {
                    "name": "properties",
                    "description": "Propertis you want to tween.",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "duration of this tween.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "ease",
                    "description": "Easing function.",
                    "type": "Any",
                    "optional": true
                },
                {
                    "name": "autoStart",
                    "description": "Whether this tween will start automatically or not.",
                    "type": "Bool",
                    "optional": true
                },
                {
                    "name": "delay",
                    "description": "delay before this tween will start, defaults to 0 (no delay)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "loop",
                    "description": "Should the tween automatically restart once complete? (ignores any chained tweens)",
                    "type": "Bool",
                    "optional": true
                }
            ],
            "return": {
                "description": "Itself.",
                "type": "Tween"
            },
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 1,
            "description": "Phaser - TweenManager\n\nPhaser.Game has a single instance of the TweenManager through which all Tween objects are created and updated.\nTweens are hooked into the game clock and pause system, adjusting based on the game state.\n\nTweenManager is based heavily on tween.js by sole (http://soledadpenades.com).\nThe difference being that tweens belong to a games instance of TweenManager, rather than to a global TWEEN object.\nIt also has callbacks swapped for Signals and a few issues patched with regard to properties and completion errors.\nPlease see https://github.com/sole/tween.js for a full list of contributors.",
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 27,
            "description": "Get all the tween objects in an array.",
            "return": {
                "description": "Array with all tween objects.",
                "type": "Phaser.Tween[]"
            },
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 37,
            "description": "Remove all tween objects.",
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 46,
            "description": "Add a new tween into the TweenManager.",
            "params": [
                {
                    "name": "tween",
                    "description": "The tween object you want to add.",
                    "type": "Phaser.Tween"
                }
            ],
            "return": {
                "description": "The tween object you added to the manager.",
                "type": "Phaser.Tween"
            },
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 58,
            "description": "Create a tween object for a specific object. The object can be any JavaScript object or Phaser object such as Sprite.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object the tween will be run on.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The newly created tween object.",
                "type": "Phaser.Tween"
            },
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 70,
            "description": "Remove a tween from this manager.",
            "params": [
                {
                    "name": "tween",
                    "description": "The tween object you want to remove.",
                    "type": "Phaser.Tween"
                }
            ],
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 87,
            "description": "Update all the tween objects you added to this manager.",
            "return": {
                "description": "Return false if there's no tween to update, otherwise return true.",
                "type": "Bool"
            },
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 126,
            "description": "Pauses all currently running tweens.",
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "tween\\TweenManager.js",
            "line": 137,
            "description": "Pauses all currently paused tweens.",
            "class": "Color",
            "module": "Phaser.Time"
        },
        {
            "file": "utils\\Color.js",
            "line": 13,
            "description": "Given an alpha and 3 color values this will return an integer representation of it",
            "itemtype": "method",
            "name": "getColor32",
            "params": [
                {
                    "name": "alpha",
                    "description": "The Alpha value (between 0 and 255)",
                    "type": "Number"
                },
                {
                    "name": "red",
                    "description": "The Red channel value (between 0 and 255)",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "The Green channel value (between 0 and 255)",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "The Blue channel value (between 0 and 255)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A native color value integer (format: 0xAARRGGBB)",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 27,
            "description": "Given 3 color values this will return an integer representation of it.",
            "itemtype": "method",
            "name": "getColor",
            "params": [
                {
                    "name": "red",
                    "description": "The Red channel value (between 0 and 255)",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "The Green channel value (between 0 and 255)",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "The Blue channel value (between 0 and 255)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A native color value integer (format: 0xRRGGBB)",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 40,
            "description": "Converts the given hex string into an object containing the RGB values.",
            "itemtype": "method",
            "name": "hexToRGB",
            "params": [
                {
                    "name": "The",
                    "description": "string hex color to convert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object with 3 properties: r,g and b.",
                "type": "Object"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 58,
            "description": "Returns a string containing handy information about the given color including string hex value,\nRGB format information and HSL information. Each section starts on a newline, 3 lines in total.",
            "itemtype": "method",
            "name": "getColorInfo",
            "params": [
                {
                    "name": "color",
                    "description": "A color value in the format 0xAARRGGBB",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "string containing the 3 lines of information",
                "type": "String"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 78,
            "description": "Return a string representation of the color in the format 0xAARRGGBB",
            "itemtype": "method",
            "name": "RGBtoHexstring",
            "params": [
                {
                    "name": "color",
                    "description": "The color to get the string representation for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "{String A string of length 10 characters in the format 0xAARRGGBB"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 90,
            "description": "Return a string representation of the color in the format #RRGGBB",
            "itemtype": "method",
            "name": "RGBtoWebstring",
            "params": [
                {
                    "name": "color",
                    "description": "The color to get the string representation for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A string of length 10 characters in the format 0xAARRGGBB",
                "type": "String"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 102,
            "description": "Return a string containing a hex representation of the given color",
            "itemtype": "method",
            "name": "colorToHexstring",
            "params": [
                {
                    "name": "color",
                    "description": "The color channel to get the hex value for, must be a value between 0 and 255)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A string of length 2 characters, i.e. 255 = FF, 0 = 00",
                "type": "String"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 117,
            "description": "Interpolates the two given colours based on the supplied step and currentStep properties.",
            "itemtype": "method",
            "name": "interpolateColor",
            "params": [
                {
                    "name": "color1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "color2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "steps",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "currentStep",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The interpolated color value.",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 137,
            "description": "Interpolates the two given colours based on the supplied step and currentStep properties.",
            "itemtype": "method",
            "name": "interpolateColorWithRGB",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "steps",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "currentStep",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The interpolated color value.",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 156,
            "description": "Interpolates the two given colours based on the supplied step and currentStep properties.",
            "itemtype": "method",
            "name": "interpolateRGB",
            "params": [
                {
                    "name": "r1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "steps",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "currentStep",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The interpolated color value.",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 176,
            "description": "Returns a random color value between black and white\n<p>Set the min value to start each channel from the given offset.</p>\n<p>Set the max value to restrict the maximum color used per channel</p>",
            "itemtype": "method",
            "name": "getRandomColor",
            "params": [
                {
                    "name": "min",
                    "description": "The lowest value to use for the color",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The highest value to use for the color",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "The alpha value of the returning color (default 255 = fully opaque)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "32-bit color value with alpha",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 204,
            "description": "Return the component parts of a color as an Object with the properties alpha, red, green, blue\n\n<p>Alpha will only be set if it exist in the given color (0xAARRGGBB)</p>",
            "itemtype": "method",
            "name": "getRGB",
            "params": [
                {
                    "name": "color",
                    "description": "in RGB (0xRRGGBB) or ARGB format (0xAARRGGBB)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An Object with properties: alpha, red, green, blue",
                "type": "Object"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 222,
            "description": "Returns a CSS friendly string value from the given color.",
            "itemtype": "method",
            "name": "getWebRGB",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A string in the format: 'rgba(r,g,b,a)'",
                "type": "String"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 236,
            "description": "Given a native color value (in the format 0xAARRGGBB) this will return the Alpha component, as a value between 0 and 255",
            "itemtype": "method",
            "name": "getAlpha",
            "params": [
                {
                    "name": "color",
                    "description": "In the format 0xAARRGGBB",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Alpha component of the color, will be between 0 and 1 (0 being no Alpha (opaque), 1 full Alpha (transparent))",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 247,
            "description": "Given a native color value (in the format 0xAARRGGBB) this will return the Alpha component as a value between 0 and 1",
            "itemtype": "method",
            "name": "getAlphaFloat",
            "params": [
                {
                    "name": "color",
                    "description": "In the format 0xAARRGGBB",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Alpha component of the color, will be between 0 and 1 (0 being no Alpha (opaque), 1 full Alpha (transparent))",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 258,
            "description": "Given a native color value (in the format 0xAARRGGBB) this will return the Red component, as a value between 0 and 255",
            "itemtype": "method",
            "name": "getRed",
            "params": [
                {
                    "name": "color",
                    "description": "In the format 0xAARRGGBB",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Red component of the color, will be between 0 and 255 (0 being no color, 255 full Red)",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 269,
            "description": "Given a native color value (in the format 0xAARRGGBB) this will return the Green component, as a value between 0 and 255",
            "itemtype": "method",
            "name": "getGreen",
            "params": [
                {
                    "name": "color",
                    "description": "In the format 0xAARRGGBB",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Green component of the color, will be between 0 and 255 (0 being no color, 255 full Green)",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Color.js",
            "line": 280,
            "description": "Given a native color value (in the format 0xAARRGGBB) this will return the Blue component, as a value between 0 and 255",
            "itemtype": "method",
            "name": "getBlue",
            "params": [
                {
                    "name": "color",
                    "description": "In the format 0xAARRGGBB",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Blue component of the color, will be between 0 and 255 (0 being no color, 255 full Blue)",
                "type": "Number"
            },
            "class": "Color",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 30,
            "description": "Internal method that resets the debug output values.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "x",
                    "description": "The X value the debug info will start from.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y value the debug info will start from.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "The color the debug info will drawn in.",
                    "type": "String"
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 72,
            "description": "Internal method that outputs a single line of text.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "text",
                    "description": "The line of text to draw.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The X value the debug info will start from.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y value the debug info will start from.",
                    "type": "Number"
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 191,
            "description": "Render debug infos. (including id, position, rotation, scrolling factor, worldBounds and some other properties)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the debug info to be rendered. (format is css color string)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 226,
            "description": "Render debug infos. (including id, position, rotation, scrolling factor, worldBounds and some other properties)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the debug info to be rendered. (format is css color string)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 248,
            "description": "Renders the Pointer.circle object onto the stage in green if down or red if up.",
            "itemtype": "method",
            "name": "renderDebug",
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 303,
            "description": "Render Sprite Input Debug information",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the debug info to be rendered. (format is css color string)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 339,
            "description": "Render debug information about the Input object.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the debug info to be rendered. (format is css color string)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 364,
            "description": "Render debug infos. (including name, bounds info, position and some other properties)",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the debug info to be rendered. (format is css color string)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Debug.js",
            "line": 580,
            "description": "Render text",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the debug info to be rendered.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "color of the debug info to be rendered. (format is css color string)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "DebugUtils",
            "module": "Phaser"
        },
        {
            "file": "utils\\Utils.js",
            "line": 15,
            "description": "Javascript string pad\nhttp://www.webtoolkit.info/\n pad = the string to pad it out with (defaults to a space)\n dir = 1 (left), 2 (right), 3 (both)",
            "itemtype": "method",
            "name": "pad",
            "params": [
                {
                    "name": "str",
                    "description": "the target string",
                    "type": "String"
                },
                {
                    "name": "pad",
                    "description": "the string to pad it out with (defaults to a space)",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "dir",
                    "description": "the direction dir = 1 (left), 2 (right), 3 (both)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "3"
                }
            ],
            "class": "Utils",
            "module": "Phaser.Utils"
        },
        {
            "file": "utils\\Utils.js",
            "line": 56,
            "description": "This is a slightly modified version of jQuery.isPlainObject",
            "itemtype": "method",
            "name": "isPlainObject",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Utils",
            "module": "Phaser.Utils"
        },
        {
            "file": "utils\\Utils.js",
            "line": 97,
            "description": "This is a slightly modified version of jQuery.extend (http://api.jquery.com/jQuery.extend/)",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "deep",
                    "description": "If true, the merge becomes recursive (aka. deep copy).",
                    "type": "Bool",
                    "optional": true
                },
                {
                    "name": "target",
                    "description": "The object to add to",
                    "type": "Object"
                },
                {
                    "name": "objets",
                    "description": "Objects to recurse and copy from",
                    "type": "Object"
                }
            ],
            "class": "Utils",
            "module": "Phaser.Utils"
        },
        {
            "file": "utils\\Utils.js",
            "line": 179,
            "description": "Converts a hex color number to an [R, G, B] array",
            "itemtype": "method",
            "name": "HEXtoRGB",
            "params": [
                {
                    "name": "hex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Utils",
            "module": "Phaser.Utils"
        },
        {
            "file": "utils\\Utils.js",
            "line": 190,
            "description": "A polyfill for Function.prototype.bind",
            "itemtype": "method",
            "name": "bind",
            "class": "Utils",
            "module": "Phaser.Utils"
        },
        {
            "file": "Intro.js",
            "line": 1,
            "description": "Phaser - http://www.phaser.io\n\nv{version} - Built at: {buildDate}",
            "author": "Richard Davey http://www.photonstorm.com @photonstorm\n\nA feature-packed 2D HTML5 game framework born from the smouldering pits of Flixel and\nconstructed via plenty of blood, sweat, tears and coffee by Richard Davey (@photonstorm).\n\nPhaser uses Pixi.js for rendering, created by Mat Groves http://matgroves.com/ @Doormat23.\n\nFollow Phaser development progress at http://www.photonstorm.com\n\nMany thanks to Adam Saltsman (@ADAMATOMIC) for releasing Flixel, from both which Phaser\nand my love of game development originate.\n\n\"If you want your children to be intelligent,  read them fairy tales.\"\n\"If you want them to be more intelligent, read them more fairy tales.\"\n                                                    -- Albert Einstein",
            "class": "",
            "module": "Phaser.Utils"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: copyright",
            "line": " animation\\Animation.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " animation\\Animation.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " animation\\AnimationManager.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " animation\\AnimationManager.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " animation\\Frame.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " animation\\Frame.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " animation\\FrameData.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " animation\\FrameData.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " animation\\Parser.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " animation\\Parser.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " core\\Camera.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " core\\Camera.js:1"
        },
        {
            "message": "unknown tag: package",
            "line": " core\\Game.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " core\\Game.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " core\\Game.js:1"
        },
        {
            "message": "unknown tag: internal",
            "line": " core\\SignalBinding.js:1"
        },
        {
            "message": "unknown tag: name",
            "line": " core\\SignalBinding.js:1"
        },
        {
            "message": "unknown tag: memberof",
            "line": " core\\SignalBinding.js:34"
        },
        {
            "message": "unknown tag: name",
            "line": " core\\SignalBinding.js:34"
        },
        {
            "message": "unknown tag: copyright",
            "line": " core\\Stage.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " core\\Stage.js:1"
        },
        {
            "message": "unknown tag: package",
            "line": " core\\State.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " core\\State.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " core\\State.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " core\\World.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " core\\World.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " gameobjects\\Button.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " gameobjects\\Button.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " gameobjects\\GameObjectFactory.js:19"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " gameobjects\\GameObjectFactory.js:34"
        },
        {
            "message": "unknown tag: copyright",
            "line": " geom\\Point.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " geom\\Point.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " input\\InputHandler.js:552"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " input\\InputHandler.js:566"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " input\\InputHandler.js:580"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " input\\InputHandler.js:594"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " input\\InputHandler.js:608"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " input\\InputHandler.js:625"
        },
        {
            "message": "unknown tag: package",
            "line": " loader\\Cache.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " loader\\Cache.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " loader\\Cache.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:146"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:373"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:391"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:501"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:621"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:642"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " physics\\arcade\\ArcadePhysics.js:729"
        },
        {
            "message": "unknown tag: contructor",
            "line": " pixi\\renderers\\webgl\\WebGLRenderGroup.js:5"
        },
        {
            "message": "unknown tag: methos",
            "line": " pixi\\text\\Text.js:65"
        },
        {
            "message": "unknown tag: copyright",
            "line": " system\\Canvas.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " system\\Canvas.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " tilemap\\Tilemap.js:296"
        },
        {
            "message": "unknown tag: copyright",
            "line": " time\\Time.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " time\\Time.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " utils\\Color.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " utils\\Color.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " utils\\Debug.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " utils\\Debug.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " utils\\Utils.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " utils\\Utils.js:1"
        },
        {
            "message": "Missing item type\nPhaser.Game\n\nThis is where the magic happens. The Game object is the heart of your game,\nproviding quick access to common functions and handling the boot process.\n\n\"Hell, there are no rules here - we're trying to accomplish something.\"\n                                                      Thomas A. Edison",
            "line": " core\\Game.js:1"
        },
        {
            "message": "Missing item type\nGame constructor\n\nInstantiate a new <code>Phaser.Game</code> object.",
            "line": " core\\Game.js:16"
        },
        {
            "message": "Missing item type\nPhaser Game ID (for when Pixi supports multiple instances)",
            "line": " core\\Game.js:37"
        },
        {
            "message": "Missing item type\nThe Games DOM parent.",
            "line": " core\\Game.js:43"
        },
        {
            "message": "Missing item type\nThe Game width (in pixels).",
            "line": " core\\Game.js:51"
        },
        {
            "message": "Missing item type\nThe Game height (in pixels).",
            "line": " core\\Game.js:57"
        },
        {
            "message": "Missing item type\nUse a transparent canvas background or not.",
            "line": " core\\Game.js:63"
        },
        {
            "message": "Missing item type\nAnti-alias graphics (in WebGL this helps with edges, in Canvas2D it retains pixel-art quality)",
            "line": " core\\Game.js:69"
        },
        {
            "message": "Missing item type\nThe Pixi Renderer",
            "line": " core\\Game.js:75"
        },
        {
            "message": "Missing item type\nThe StateManager.",
            "line": " core\\Game.js:81"
        },
        {
            "message": "Missing item type\nIs game paused?",
            "line": " core\\Game.js:87"
        },
        {
            "message": "Missing item type\nThe Renderer this Phaser.Game will use. Either Phaser.RENDERER_AUTO, Phaser.RENDERER_CANVAS or Phaser.RENDERER_WEBGL",
            "line": " core\\Game.js:93"
        },
        {
            "message": "Missing item type\nWhether load complete loading or not.",
            "line": " core\\Game.js:99"
        },
        {
            "message": "Missing item type\nWhether the game engine is booted, aka available.",
            "line": " core\\Game.js:105"
        },
        {
            "message": "Missing item type\nIs game running or paused?",
            "line": " core\\Game.js:111"
        },
        {
            "message": "Missing item type\nAutomatically handles the core game loop via requestAnimationFrame or setTimeout",
            "line": " core\\Game.js:117"
        },
        {
            "message": "Missing item type\nReference to the GameObject Factory.",
            "line": " core\\Game.js:123"
        },
        {
            "message": "Missing item type\nReference to the assets cache.",
            "line": " core\\Game.js:129"
        },
        {
            "message": "Missing item type\nReference to the input manager",
            "line": " core\\Game.js:135"
        },
        {
            "message": "Missing item type\nReference to the assets loader.",
            "line": " core\\Game.js:141"
        },
        {
            "message": "Missing item type\nReference to the math helper.",
            "line": " core\\Game.js:147"
        },
        {
            "message": "Missing item type\nReference to the network class.",
            "line": " core\\Game.js:153"
        },
        {
            "message": "Missing item type\nReference to the sound manager.",
            "line": " core\\Game.js:159"
        },
        {
            "message": "Missing item type\nReference to the stage.",
            "line": " core\\Game.js:165"
        },
        {
            "message": "Missing item type\nReference to game clock.",
            "line": " core\\Game.js:171"
        },
        {
            "message": "Missing item type\nReference to the tween manager.",
            "line": " core\\Game.js:177"
        },
        {
            "message": "Missing item type\nReference to the world.",
            "line": " core\\Game.js:183"
        },
        {
            "message": "Missing item type\nReference to the physics manager.",
            "line": " core\\Game.js:189"
        },
        {
            "message": "Missing item type\nInstance of repeatable random data generator helper.",
            "line": " core\\Game.js:195"
        },
        {
            "message": "Missing item type\nContains device information and capabilities.",
            "line": " core\\Game.js:201"
        },
        {
            "message": "Missing item type\nA handy reference to world.camera",
            "line": " core\\Game.js:207"
        },
        {
            "message": "Missing item type\nA handy reference to renderer.view",
            "line": " core\\Game.js:213"
        },
        {
            "message": "Missing item type\nA handy reference to renderer.context (only set for CANVAS games)",
            "line": " core\\Game.js:219"
        },
        {
            "message": "Missing item type\nA set of useful debug utilities",
            "line": " core\\Game.js:225"
        },
        {
            "message": "Missing item type\nThe Particle Manager",
            "line": " core\\Game.js:231"
        },
        {
            "message": "Missing item type\nInitialize engine sub modules and start the game.",
            "line": " core\\Game.js:259"
        },
        {
            "message": "Missing item type\nCalled when the load has finished, after preload was run.",
            "line": " core\\Game.js:366"
        },
        {
            "message": "Missing item type\nNuke the entire game from orbit",
            "line": " core\\Game.js:403"
        },
        {
            "message": "Missing item type\nHelper for sort.",
            "line": " core\\Group.js:43"
        },
        {
            "message": "Missing item type\nCalls a function on all of the children regardless if they are dead or alive (see callAllExists if you need control over that)\nYou must pass the context in which the callback is applied.\nAfter the context you can add as many parameters as you like, which will all be passed to the child.",
            "line": " core\\Group.js:402"
        },
        {
            "message": "Missing item type\nCall this function to retrieve the first object with exists == (the given state) in the group.",
            "line": " core\\Group.js:494"
        },
        {
            "message": "Missing item type\nCall this function to retrieve the first object with alive == true in the group.\nThis is handy for checking if everything's wiped out, or choosing a squad leader, etc.",
            "line": " core\\Group.js:526"
        },
        {
            "message": "Missing item type\nCall this function to retrieve the first object with alive == false in the group.\nThis is handy for checking if everything's wiped out, or choosing a squad leader, etc.",
            "line": " core\\Group.js:554"
        },
        {
            "message": "Missing item type\nCall this function to find out how many members of the group are alive.",
            "line": " core\\Group.js:582"
        },
        {
            "message": "Missing item type\nCall this function to find out how many members of the group are dead.",
            "line": " core\\Group.js:611"
        },
        {
            "message": "Missing item type\nReturns a member at random from the group.",
            "line": " core\\Group.js:640"
        },
        {
            "message": "Missing item type\nPhaser - Plugin\n\nThis is a base Plugin template to use for any Phaser plugin development",
            "line": " core\\Plugin.js:1"
        },
        {
            "message": "Missing item type\nPre-update is called at the start of the update cycle, before any other updates have taken place (including Physics).\nIt is only called if active is set to true.",
            "line": " core\\Plugin.js:23"
        },
        {
            "message": "Missing item type\nUpdate is called after all the core subsystems (Input, Tweens, Sound, etc) and the State have updated, but before the render.\nIt is only called if active is set to true.",
            "line": " core\\Plugin.js:30"
        },
        {
            "message": "Missing item type\nRender is called right after the Game Renderer completes, but before the State.render.\nIt is only called if visible is set to true.",
            "line": " core\\Plugin.js:37"
        },
        {
            "message": "Missing item type\nPost-render is called after the Game Renderer and State.render have run.\nIt is only called if visible is set to true.",
            "line": " core\\Plugin.js:44"
        },
        {
            "message": "Missing item type\nClear down this Plugin and null out references",
            "line": " core\\Plugin.js:51"
        },
        {
            "message": "Missing item type\nPhaser - PluginManager\n\nTODO: We can optimise this a lot by using separate hashes per function (update, render, etc)",
            "line": " core\\PluginManager.js:1"
        },
        {
            "message": "Missing item type\nAdd a new Plugin to the PluginManager.\nThe plugins game and parent reference are set to this game and pluginmanager parent.",
            "line": " core\\PluginManager.js:18"
        },
        {
            "message": "Missing item type\nPhaser.Signal\n\nA Signal is used for object communication via a custom broadcaster instead of Events.",
            "line": " core\\Signal.js:1"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:11"
        },
        {
            "message": "Missing item type\nIf Signal should keep record of previously dispatched parameters and\nautomatically execute listener during `add()`/`addOnce()` if Signal was\nalready dispatched before.",
            "line": " core\\Signal.js:29"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:37"
        },
        {
            "message": "Missing item type\nIf Signal is active and should broadcast events.\n<p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>",
            "line": " core\\Signal.js:43"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:56"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:86"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:97"
        },
        {
            "message": "Missing item type\nCheck if listener was attached to Signal.",
            "line": " core\\Signal.js:114"
        },
        {
            "message": "Missing item type\nAdd a listener to the signal.",
            "line": " core\\Signal.js:124"
        },
        {
            "message": "Missing item type\nAdd listener to the signal that should be removed after first execution (will be executed only once).",
            "line": " core\\Signal.js:136"
        },
        {
            "message": "Missing item type\nRemove a single listener from the dispatch queue.",
            "line": " core\\Signal.js:148"
        },
        {
            "message": "Missing item type\nRemove all listeners from the Signal.",
            "line": " core\\Signal.js:165"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:176"
        },
        {
            "message": "Missing item type\nStop propagation of the event, blocking the dispatch to next listeners on the queue.\n<p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>",
            "line": " core\\Signal.js:183"
        },
        {
            "message": "Missing item type\nDispatch/Broadcast Signal to all listeners added to the queue.",
            "line": " core\\Signal.js:192"
        },
        {
            "message": "Missing item type\nForget memorized arguments.",
            "line": " core\\Signal.js:222"
        },
        {
            "message": "Missing item type\nRemove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n<p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>",
            "line": " core\\Signal.js:230"
        },
        {
            "message": "Missing item type",
            "line": " core\\Signal.js:240"
        },
        {
            "message": "Missing item type\nPhaser.SignalBinding\n\nObject that represents a binding between a Signal and a listener function.\n<br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n<br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.",
            "line": " core\\SignalBinding.js:1"
        },
        {
            "message": "Missing item type\nHandler function bound to the signal.",
            "line": " core\\SignalBinding.js:20"
        },
        {
            "message": "Missing item type\nIf binding should be executed just once.",
            "line": " core\\SignalBinding.js:27"
        },
        {
            "message": "Missing item type\nContext on which listener will be executed (object that should represent the `this` variable inside listener function).",
            "line": " core\\SignalBinding.js:34"
        },
        {
            "message": "Missing item type\nReference to Signal object that listener is currently bound to.",
            "line": " core\\SignalBinding.js:42"
        },
        {
            "message": "Missing item type\nListener priority",
            "line": " core\\SignalBinding.js:49"
        },
        {
            "message": "Missing item type\nIf binding is active and should be executed.",
            "line": " core\\SignalBinding.js:60"
        },
        {
            "message": "Missing item type\nDefault parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)",
            "line": " core\\SignalBinding.js:66"
        },
        {
            "message": "Missing item type\nCall listener passing arbitrary parameters.\n<p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>",
            "line": " core\\SignalBinding.js:72"
        },
        {
            "message": "Missing item type\nDetach binding from signal.\n- alias to: mySignal.remove(myBinding.getListener());",
            "line": " core\\SignalBinding.js:97"
        },
        {
            "message": "Missing item type",
            "line": " core\\SignalBinding.js:106"
        },
        {
            "message": "Missing item type",
            "line": " core\\SignalBinding.js:113"
        },
        {
            "message": "Missing item type",
            "line": " core\\SignalBinding.js:120"
        },
        {
            "message": "Missing item type",
            "line": " core\\SignalBinding.js:127"
        },
        {
            "message": "Missing item type\nDelete instance properties",
            "line": " core\\SignalBinding.js:134"
        },
        {
            "message": "Missing item type",
            "line": " core\\SignalBinding.js:144"
        },
        {
            "message": "Missing item type\nState\n\nThis is a base State class which can be extended if you are creating your own game.\nIt provides quick access to common functions such as the camera, cache, input, match, sound and more.",
            "line": " core\\State.js:1"
        },
        {
            "message": "Missing item type\nOverride this method to add some load operations.\nIf you need to use the loader, you may need to use them here.",
            "line": " core\\State.js:34"
        },
        {
            "message": "Missing item type\nThis method is called after the game engine successfully switches states.\nFeel free to add any setup code here.(Do not load anything here, override preload() instead)",
            "line": " core\\State.js:41"
        },
        {
            "message": "Missing item type\nPut update logic here.",
            "line": " core\\State.js:48"
        },
        {
            "message": "Missing item type\nPut render operations here.",
            "line": " core\\State.js:54"
        },
        {
            "message": "Missing item type\nThis method will be called when game paused.",
            "line": " core\\State.js:60"
        },
        {
            "message": "Missing item type\nThis method will be called when the state is destroyed",
            "line": " core\\State.js:66"
        },
        {
            "message": "Missing item type",
            "line": " core\\StateManager.js:16"
        },
        {
            "message": "Missing item type\nThe state to be switched to in the next frame.",
            "line": " core\\StateManager.js:21"
        },
        {
            "message": "Missing item type\nFlag that sets if the State has been created or not.",
            "line": " core\\StateManager.js:27"
        },
        {
            "message": "Missing item type\nThe state to be switched to in the next frame.",
            "line": " core\\StateManager.js:33"
        },
        {
            "message": "Missing item type\nThe current active State object (defaults to null)",
            "line": " core\\StateManager.js:39"
        },
        {
            "message": "Missing item type\nThis will be called when the state is started (i.e. set as the current active state)",
            "line": " core\\StateManager.js:45"
        },
        {
            "message": "Missing item type\nThis will be called when init states. (loading assets...)",
            "line": " core\\StateManager.js:51"
        },
        {
            "message": "Missing item type\nThis will be called when create states. (setup states...)",
            "line": " core\\StateManager.js:57"
        },
        {
            "message": "Missing item type\nThis will be called when State is updated, this doesn't happen during load (see onLoadUpdateCallback)",
            "line": " core\\StateManager.js:63"
        },
        {
            "message": "Missing item type\nThis will be called when the State is rendered, this doesn't happen during load (see onLoadRenderCallback)",
            "line": " core\\StateManager.js:69"
        },
        {
            "message": "Missing item type\nThis will be called before the State is rendered and before the stage is cleared",
            "line": " core\\StateManager.js:75"
        },
        {
            "message": "Missing item type\nThis will be called when the State is updated but only during the load process",
            "line": " core\\StateManager.js:81"
        },
        {
            "message": "Missing item type\nThis will be called when the State is rendered but only during the load process",
            "line": " core\\StateManager.js:87"
        },
        {
            "message": "Missing item type\nThis will be called when states paused.",
            "line": " core\\StateManager.js:93"
        },
        {
            "message": "Missing item type\nThis will be called when the state is shut down (i.e. swapped to another state)",
            "line": " core\\StateManager.js:99"
        },
        {
            "message": "Missing item type\nAdd a new State.",
            "line": " core\\StateManager.js:128"
        },
        {
            "message": "Missing item type\nStart the given state",
            "line": " core\\StateManager.js:204"
        },
        {
            "message": "Missing item type\nNuke the entire game from orbit",
            "line": " core\\StateManager.js:433"
        },
        {
            "message": "Missing item type\nAutomatically called by World.update",
            "line": " gameobjects\\BitmapText.js:61"
        },
        {
            "message": "Missing item type\nAutomatically called by World.update. You can create your own update in Objects that extend Phaser.Bullet.",
            "line": " gameobjects\\Bullet.js:149"
        },
        {
            "message": "Missing item type\nIs this sprite visible to the camera or not?",
            "line": " gameobjects\\Bullet.js:356"
        },
        {
            "message": "Missing item type\nThe Events component is a collection of events fired by the parent game object and its components.",
            "line": " gameobjects\\Events.js:1"
        },
        {
            "message": "Missing item type\nCreate a new Sprite with specific position and sprite sheet key.",
            "line": " gameobjects\\GameObjectFactory.js:19"
        },
        {
            "message": "Missing item type\nCreate a new Sprite with specific position and sprite sheet key that will automatically be added as a child of the given parent.",
            "line": " gameobjects\\GameObjectFactory.js:34"
        },
        {
            "message": "Missing item type\nCreate a tween object for a specific object. The object can be any JavaScript object or Phaser object such as Sprite.",
            "line": " gameobjects\\GameObjectFactory.js:51"
        },
        {
            "message": "Missing item type\nAutomatically called by World.update",
            "line": " gameobjects\\Graphics.js:98"
        },
        {
            "message": "Missing item type\nThe Signals you can subscribe to that are dispatched when certain things happen on this Sprite or its components",
            "line": " gameobjects\\Sprite.js:28"
        },
        {
            "message": "Missing item type\nThis manages animations of the sprite. You can modify animations through it. (see AnimationManager)",
            "line": " gameobjects\\Sprite.js:34"
        },
        {
            "message": "Missing item type\nThe Input Handler Component",
            "line": " gameobjects\\Sprite.js:40"
        },
        {
            "message": "Missing item type\nAutomatically called by World.update. You can create your own update in Objects that extend Phaser.Sprite.",
            "line": " gameobjects\\Sprite.js:184"
        },
        {
            "message": "Missing item type\nMoves the sprite so its center is located on the given x and y coordinates.\nDoesn't change the origin of the sprite.",
            "line": " gameobjects\\Sprite.js:328"
        },
        {
            "message": "Missing item type\nGet the animation frame number.",
            "line": " gameobjects\\Sprite.js:482"
        },
        {
            "message": "Missing item type\nSet the animation frame by frame number.",
            "line": " gameobjects\\Sprite.js:489"
        },
        {
            "message": "Missing item type\nGet the animation frame name.",
            "line": " gameobjects\\Sprite.js:500"
        },
        {
            "message": "Missing item type\nSet the animation frame by frame name.",
            "line": " gameobjects\\Sprite.js:507"
        },
        {
            "message": "Missing item type\nIs this sprite visible to the camera or not?",
            "line": " gameobjects\\Sprite.js:518"
        },
        {
            "message": "Missing item type\nGet the input enabled state of this Sprite.",
            "line": " gameobjects\\Sprite.js:529"
        },
        {
            "message": "Missing item type\nSet the ability for this sprite to receive input events.",
            "line": " gameobjects\\Sprite.js:538"
        },
        {
            "message": "Missing item type\nGet the input enabled state of this Sprite.",
            "line": " gameobjects\\Sprite.js:571"
        },
        {
            "message": "Missing item type\nSet the ability for this sprite to receive input events.",
            "line": " gameobjects\\Sprite.js:580"
        },
        {
            "message": "Missing item type\nGet the location of the Rectangles bottom right corner as a Point object.",
            "line": " geom\\Rectangle.js:314"
        },
        {
            "message": "Missing item type\nGet the location of the Rectangles top left corner as a Point object.",
            "line": " geom\\Rectangle.js:491"
        },
        {
            "message": "Missing item type\nPhaser.Input\n\nA game specific Input manager that looks after the mouse, keyboard and touch objects.\nThis is updated by the core game loop.",
            "line": " input\\Input.js:1"
        },
        {
            "message": "Missing item type\nHow often should the input pointers be checked for updates?\nA value of 0 means every single frame (60fps), a value of 1 means every other frame (30fps) and so on.",
            "line": " input\\Input.js:24"
        },
        {
            "message": "Missing item type\nX coordinate of the most recent Pointer event",
            "line": " input\\Input.js:39"
        },
        {
            "message": "Missing item type\nX coordinate of the most recent Pointer event",
            "line": " input\\Input.js:46"
        },
        {
            "message": "Missing item type\nYou can disable all Input by setting Input.disabled: true. While set all new input related events will be ignored.\nIf you need to disable just one type of input, for example mouse, use Input.mouse.disabled: true instead",
            "line": " input\\Input.js:53"
        },
        {
            "message": "Missing item type\nControls the expected behaviour when using a mouse and touch together on a multi-input device",
            "line": " input\\Input.js:60"
        },
        {
            "message": "Missing item type\nThe scale by which all input coordinates are multiplied, calculated by the StageScaleMode.\nIn an un-scaled game the values will be x: 1 and y: 1.",
            "line": " input\\Input.js:88"
        },
        {
            "message": "Missing item type\nThe maximum number of Pointers allowed to be active at any one time.\nFor lots of games it's useful to set this to 1",
            "line": " input\\Input.js:95"
        },
        {
            "message": "Missing item type\nThe current number of active Pointers.",
            "line": " input\\Input.js:102"
        },
        {
            "message": "Missing item type\nThe PriorityID controls which Sprite receives an Input event first if they should overlap.",
            "line": " input\\InputHandler.js:15"
        },
        {
            "message": "Missing item type\nShould we use pixel perfect hit detection? Warning: expensive. Only enable if you really need it!",
            "line": " input\\InputHandler.js:32"
        },
        {
            "message": "Missing item type\nThe alpha tolerance threshold. If the alpha value of the pixel matches or is above this value, it's considered a hit.",
            "line": " input\\InputHandler.js:38"
        },
        {
            "message": "Missing item type\nIs this sprite allowed to be dragged by the mouse? true = yes, false = no",
            "line": " input\\InputHandler.js:44"
        },
        {
            "message": "Missing item type\nA region of the game world within which the sprite is restricted during drag",
            "line": " input\\InputHandler.js:50"
        },
        {
            "message": "Missing item type\nAn Sprite the bounds of which this sprite is restricted during drag",
            "line": " input\\InputHandler.js:56"
        },
        {
            "message": "Missing item type\nIf this object is set to consume the pointer event then it will stop all propogation from this object on.\nFor example if you had a stack of 6 sprites with the same priority IDs and one consumed the event, none of the others would receive it.",
            "line": " input\\InputHandler.js:62"
        },
        {
            "message": "Missing item type\nClean up memory.",
            "line": " input\\InputHandler.js:167"
        },
        {
            "message": "Missing item type\nThe x coordinate of the Input pointer, relative to the top-left of the parent Sprite.\nThis value is only set when the pointer is over this Sprite.",
            "line": " input\\InputHandler.js:181"
        },
        {
            "message": "Missing item type\nThe y coordinate of the Input pointer, relative to the top-left of the parent Sprite\nThis value is only set when the pointer is over this Sprite.",
            "line": " input\\InputHandler.js:194"
        },
        {
            "message": "Missing item type\nIs this sprite being dragged by the mouse or not?",
            "line": " input\\InputHandler.js:311"
        },
        {
            "message": "Missing item type\nChecks if the given pointer is over this Sprite.",
            "line": " input\\InputHandler.js:323"
        },
        {
            "message": "Missing item type\nUpdate",
            "line": " input\\InputHandler.js:386"
        },
        {
            "message": "Missing item type\nUpdates the Pointer drag on this Sprite.",
            "line": " input\\InputHandler.js:511"
        },
        {
            "message": "Missing item type\nReturns true if the pointer has entered the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "line": " input\\InputHandler.js:552"
        },
        {
            "message": "Missing item type\nReturns true if the pointer has left the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "line": " input\\InputHandler.js:566"
        },
        {
            "message": "Missing item type\nReturns true if the pointer has entered the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "line": " input\\InputHandler.js:580"
        },
        {
            "message": "Missing item type\nReturns true if the pointer has left the Sprite within the specified delay time (defaults to 500ms, half a second)",
            "line": " input\\InputHandler.js:594"
        },
        {
            "message": "Missing item type\nIf the pointer is currently over this Sprite this returns how long it has been there for in milliseconds.",
            "line": " input\\InputHandler.js:608"
        },
        {
            "message": "Missing item type\nIf the pointer is currently over this Sprite this returns how long it has been there for in milliseconds.",
            "line": " input\\InputHandler.js:625"
        },
        {
            "message": "Missing item type\nMake this Sprite draggable by the mouse. You can also optionally set mouseStartDragCallback and mouseStopDragCallback",
            "line": " input\\InputHandler.js:642"
        },
        {
            "message": "Missing item type\nStops this sprite from being able to be dragged. If it is currently the target of an active drag it will be stopped immediately. Also disables any set callbacks.",
            "line": " input\\InputHandler.js:683"
        },
        {
            "message": "Missing item type\nCalled by Pointer when drag starts on this Sprite. Should not usually be called directly.",
            "line": " input\\InputHandler.js:702"
        },
        {
            "message": "Missing item type\nCalled by Pointer when drag is stopped on this Sprite. Should not usually be called directly.",
            "line": " input\\InputHandler.js:732"
        },
        {
            "message": "Missing item type\nRestricts this sprite to drag movement only on the given axis. Note: If both are set to false the sprite will never move!",
            "line": " input\\InputHandler.js:752"
        },
        {
            "message": "Missing item type\nMake this Sprite snap to the given grid either during drag or when it's released.\nFor example 16x16 as the snapX and snapY would make the sprite snap to every 16 pixels.",
            "line": " input\\InputHandler.js:768"
        },
        {
            "message": "Missing item type\nStops the sprite from snapping to a grid during drag or release.",
            "line": " input\\InputHandler.js:789"
        },
        {
            "message": "Missing item type\nBounds Rect check for the sprite drag",
            "line": " input\\InputHandler.js:799"
        },
        {
            "message": "Missing item type\nParent Sprite Bounds check for the sprite drag",
            "line": " input\\InputHandler.js:824"
        },
        {
            "message": "Missing item type\nYou can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "line": " input\\Keyboard.js:13"
        },
        {
            "message": "Missing item type\nBy default when a key is pressed Phaser will not stop the event from propagating up to the browser.\nThere are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\nYou can use addKeyCapture to consume the keyboard event for specific keys so it doesn't bubble up to the the browser.\nPass in either a single keycode or an array/hash of keycodes.",
            "line": " input\\Keyboard.js:46"
        },
        {
            "message": "Missing item type",
            "line": " input\\Keyboard.js:68"
        },
        {
            "message": "Missing item type",
            "line": " input\\Keyboard.js:83"
        },
        {
            "message": "Missing item type",
            "line": " input\\Keyboard.js:114"
        },
        {
            "message": "Missing item type",
            "line": " input\\Keyboard.js:154"
        },
        {
            "message": "Missing item type",
            "line": " input\\Keyboard.js:172"
        },
        {
            "message": "Missing item type",
            "line": " input\\Keyboard.js:190"
        },
        {
            "message": "Missing item type\nPhaser.MSPointer\n\nThe MSPointer class handles touch interactions with the game and the resulting Pointer objects.\nIt will work only in Internet Explorer 10 and Windows Store or Windows Phone 8 apps using JavaScript.\nhttp://msdn.microsoft.com/en-us/library/ie/hh673557(v=vs.85).aspx",
            "line": " input\\MSPointer.js:1"
        },
        {
            "message": "Missing item type\nYou can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "line": " input\\MSPointer.js:23"
        },
        {
            "message": "Missing item type\nYou can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "line": " input\\Mouse.js:20"
        },
        {
            "message": "Missing item type\nIf the mouse has been Pointer Locked successfully this will be set to true.",
            "line": " input\\Mouse.js:26"
        },
        {
            "message": "Missing item type",
            "line": " input\\Mouse.js:64"
        },
        {
            "message": "Missing item type",
            "line": " input\\Mouse.js:85"
        },
        {
            "message": "Missing item type",
            "line": " input\\Mouse.js:106"
        },
        {
            "message": "Missing item type\nPhaser - Pointer\n\nA Pointer object is used by the Mouse, Touch and MSPoint managers and represents a single finger on the touch screen.",
            "line": " input\\Pointer.js:1"
        },
        {
            "message": "Missing item type\nGets the X value of this Pointer in world coordinates based on the given camera.",
            "line": " input\\Pointer.js:620"
        },
        {
            "message": "Missing item type\nGets the Y value of this Pointer in world coordinates based on the given camera.",
            "line": " input\\Pointer.js:634"
        },
        {
            "message": "Missing item type\nPhaser - Touch\n\nThe Touch class handles touch interactions with the game and the resulting Pointer objects.\nhttp://www.w3.org/TR/touch-events/\nhttps://developer.mozilla.org/en-US/docs/DOM/TouchList\nhttp://www.html5rocks.com/en/mobile/touchandmouse/\nNote: Android 2.x only supports 1 touch event at once, no multi-touch",
            "line": " input\\Touch.js:1"
        },
        {
            "message": "Missing item type\nYou can disable all Input by setting disabled = true. While set all new input related events will be ignored.",
            "line": " input\\Touch.js:30"
        },
        {
            "message": "Missing item type\nCache\n\nA game only has one instance of a Cache and it is used to store all externally loaded assets such\nas images, sounds and data files as a result of Loader calls. Cache items use string based keys for look-up.",
            "line": " loader\\Cache.js:1"
        },
        {
            "message": "Missing item type\nLocal reference to Game.",
            "line": " loader\\Cache.js:14"
        },
        {
            "message": "Missing item type\nCanvas key-value container.",
            "line": " loader\\Cache.js:19"
        },
        {
            "message": "Missing item type\nImage key-value container.",
            "line": " loader\\Cache.js:26"
        },
        {
            "message": "Missing item type\nRenderTexture key-value container.",
            "line": " loader\\Cache.js:32"
        },
        {
            "message": "Missing item type\nSound key-value container.",
            "line": " loader\\Cache.js:38"
        },
        {
            "message": "Missing item type\nText key-value container.",
            "line": " loader\\Cache.js:44"
        },
        {
            "message": "Missing item type\nTilemap key-value container.",
            "line": " loader\\Cache.js:50"
        },
        {
            "message": "Missing item type\nAdd a new canvas.",
            "line": " loader\\Cache.js:64"
        },
        {
            "message": "Missing item type\nAdd a new canvas.",
            "line": " loader\\Cache.js:76"
        },
        {
            "message": "Missing item type\nAdd a new sprite sheet.",
            "line": " loader\\Cache.js:89"
        },
        {
            "message": "Missing item type\nAdd a new tilemap.",
            "line": " loader\\Cache.js:109"
        },
        {
            "message": "Missing item type\nAdd a new texture atlas.",
            "line": " loader\\Cache.js:125"
        },
        {
            "message": "Missing item type\nAdd a new Bitmap Font.",
            "line": " loader\\Cache.js:154"
        },
        {
            "message": "Missing item type\nAdds a default image to be used when a key is wrong / missing.\nIs mapped to the key __default",
            "line": " loader\\Cache.js:173"
        },
        {
            "message": "Missing item type\nAdd a new image.",
            "line": " loader\\Cache.js:192"
        },
        {
            "message": "Missing item type\nAdd a new sound.",
            "line": " loader\\Cache.js:208"
        },
        {
            "message": "Missing item type\nAdd a new decoded sound.",
            "line": " loader\\Cache.js:266"
        },
        {
            "message": "Missing item type\nAdd a new text data.",
            "line": " loader\\Cache.js:279"
        },
        {
            "message": "Missing item type\nGet canvas by key.",
            "line": " loader\\Cache.js:294"
        },
        {
            "message": "Missing item type\nChecks if an image key exists.",
            "line": " loader\\Cache.js:309"
        },
        {
            "message": "Missing item type\nGet image data by key.",
            "line": " loader\\Cache.js:325"
        },
        {
            "message": "Missing item type\nGet tilemap data by key.",
            "line": " loader\\Cache.js:340"
        },
        {
            "message": "Missing item type\nGet frame data by key.",
            "line": " loader\\Cache.js:355"
        },
        {
            "message": "Missing item type\nGet a single frame out of a frameData set by key.",
            "line": " loader\\Cache.js:370"
        },
        {
            "message": "Missing item type\nGet a single frame out of a frameData set by key.",
            "line": " loader\\Cache.js:385"
        },
        {
            "message": "Missing item type\nGet a single frame by key. You'd only do this to get the default Frame created for a non-atlas/spritesheet image.",
            "line": " loader\\Cache.js:400"
        },
        {
            "message": "Missing item type\nGet a single frame by key. You'd only do this to get the default Frame created for a non-atlas/spritesheet image.",
            "line": " loader\\Cache.js:415"
        },
        {
            "message": "Missing item type\nGet a RenderTexture by key.",
            "line": " loader\\Cache.js:430"
        },
        {
            "message": "Missing item type\nGet sound by key.",
            "line": " loader\\Cache.js:446"
        },
        {
            "message": "Missing item type\nGet sound data by key.",
            "line": " loader\\Cache.js:462"
        },
        {
            "message": "Missing item type\nCheck whether an asset is decoded sound.",
            "line": " loader\\Cache.js:478"
        },
        {
            "message": "Missing item type\nCheck whether an asset is decoded sound.",
            "line": " loader\\Cache.js:492"
        },
        {
            "message": "Missing item type\nCheck whether an asset is sprite sheet.",
            "line": " loader\\Cache.js:503"
        },
        {
            "message": "Missing item type\nGet text data by key.",
            "line": " loader\\Cache.js:519"
        },
        {
            "message": "Missing item type\nReturns an array containing all of the keys of Images in the Cache.",
            "line": " loader\\Cache.js:551"
        },
        {
            "message": "Missing item type\nReturns an array containing all of the keys of Sounds in the Cache.",
            "line": " loader\\Cache.js:559"
        },
        {
            "message": "Missing item type\nReturns an array containing all of the keys of Text Files in the Cache.",
            "line": " loader\\Cache.js:567"
        },
        {
            "message": "Missing item type\nClean up cache memory.",
            "line": " loader\\Cache.js:591"
        },
        {
            "message": "Missing item type\nPhaser.Loader\n\nThe Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\nIt uses a combination of Image() loading and xhr and provides progress and completion callbacks.",
            "line": " loader\\Loader.js:1"
        },
        {
            "message": "Missing item type\nLocal reference to Game.",
            "line": " loader\\Loader.js:9"
        },
        {
            "message": "Missing item type\nArray stores assets keys. So you can get that asset by its unique key.",
            "line": " loader\\Loader.js:14"
        },
        {
            "message": "Missing item type\nContains all the assets file infos.",
            "line": " loader\\Loader.js:19"
        },
        {
            "message": "Missing item type\nIndicates assets loading progress. (from 0 to 100)",
            "line": " loader\\Loader.js:24"
        },
        {
            "message": "Missing item type\nAn XMLHttpRequest object used for loading text and audio data",
            "line": " loader\\Loader.js:30"
        },
        {
            "message": "Missing item type\nLength of assets queue.",
            "line": " loader\\Loader.js:36"
        },
        {
            "message": "Missing item type\nTrue if the Loader is in the process of loading the queue.",
            "line": " loader\\Loader.js:42"
        },
        {
            "message": "Missing item type\nTrue if all assets in the queue have finished loading.",
            "line": " loader\\Loader.js:48"
        },
        {
            "message": "Missing item type\nThe Load progress percentage value (from 0 to 100)",
            "line": " loader\\Loader.js:54"
        },
        {
            "message": "Missing item type\nYou can optionally link a sprite to the preloader.\nIf you do so the Sprite's width or height will be cropped based on the percentage loaded.",
            "line": " loader\\Loader.js:60"
        },
        {
            "message": "Missing item type\nThe crossOrigin value applied to loaded images",
            "line": " loader\\Loader.js:66"
        },
        {
            "message": "Missing item type\nIf you want to append a URL before the path of any asset you can set this here.\nUseful if you need to allow an asset url to be configured outside of the game code.\nMUST have / on the end of it!",
            "line": " loader\\Loader.js:72"
        },
        {
            "message": "Missing item type\nEvent Signals",
            "line": " loader\\Loader.js:80"
        },
        {
            "message": "Missing item type\nTextureAtlas data format constants",
            "line": " loader\\Loader.js:90"
        },
        {
            "message": "Missing item type\nCheck whether asset exists with a specific key.",
            "line": " loader\\Loader.js:120"
        },
        {
            "message": "Missing item type\nReset loader, this will remove all loaded assets.",
            "line": " loader\\Loader.js:138"
        },
        {
            "message": "Missing item type\nInternal function that adds a new entry to the file list.",
            "line": " loader\\Loader.js:149"
        },
        {
            "message": "Missing item type\nAdd an image to the Loader.",
            "line": " loader\\Loader.js:179"
        },
        {
            "message": "Missing item type\nAdd a text file to the Loader.",
            "line": " loader\\Loader.js:196"
        },
        {
            "message": "Missing item type\nAdd a new sprite sheet loading request.",
            "line": " loader\\Loader.js:212"
        },
        {
            "message": "Missing item type\nAdd a new audio file loading request.",
            "line": " loader\\Loader.js:231"
        },
        {
            "message": "Missing item type\nAdd a new tilemap loading request.",
            "line": " loader\\Loader.js:248"
        },
        {
            "message": "Missing item type\nAdd a new bitmap font loading request.",
            "line": " loader\\Loader.js:294"
        },
        {
            "message": "Missing item type\nAdd a new texture atlas loading request.",
            "line": " loader\\Loader.js:370"
        },
        {
            "message": "Missing item type\nRemove loading request of a file.",
            "line": " loader\\Loader.js:449"
        },
        {
            "message": "Missing item type\nRemove all file loading requests.",
            "line": " loader\\Loader.js:459"
        },
        {
            "message": "Missing item type\nLoad assets.",
            "line": " loader\\Loader.js:468"
        },
        {
            "message": "Missing item type\nLoad files. Private method ONLY used by loader.",
            "line": " loader\\Loader.js:498"
        },
        {
            "message": "Missing item type\nError occured when load a file.",
            "line": " loader\\Loader.js:612"
        },
        {
            "message": "Missing item type\nCalled when a file is successfully loaded.",
            "line": " loader\\Loader.js:629"
        },
        {
            "message": "Missing item type\nSuccessfully loaded a JSON file.",
            "line": " loader\\Loader.js:792"
        },
        {
            "message": "Missing item type\nSuccessfully loaded a CSV file.",
            "line": " loader\\Loader.js:814"
        },
        {
            "message": "Missing item type\nError occured when load a JSON.",
            "line": " loader\\Loader.js:829"
        },
        {
            "message": "Missing item type\nHandle loading next file.",
            "line": " loader\\Loader.js:889"
        },
        {
            "message": "Missing item type\nParse frame data from an XML file.",
            "line": " loader\\Parser.js:3"
        },
        {
            "message": "Missing item type\nSnap a value to nearest grid slice, using rounding.\n\nexample if you have an interval gap of 5 and a position of 12... you will snap to 10. Where as 14 will snap to 15",
            "line": " math\\Math.js:56"
        },
        {
            "message": "Missing item type\nSnap a value to nearest grid slice, using floor.\n\nexample if you have an interval gap of 5 and a position of 12... you will snap to 10. As will 14 snap to 10... but 16 will snap to 15",
            "line": " math\\Math.js:80"
        },
        {
            "message": "Missing item type\nSnap a value to nearest grid slice, using ceil.\n\nexample if you have an interval gap of 5 and a position of 12... you will snap to 15. As will 14 will snap to 15... but 16 will snap to 20",
            "line": " math\\Math.js:104"
        },
        {
            "message": "Missing item type\nSnaps a value to the nearest value in an array.",
            "line": " math\\Math.js:129"
        },
        {
            "message": "Missing item type\nroundTo some place comparative to a 'base', default is 10 for decimal place\n\n'place' is represented by the power applied to 'base' to get that place",
            "line": " math\\Math.js:157"
        },
        {
            "message": "Missing item type\na one dimensional linear interpolation of a value.",
            "line": " math\\Math.js:226"
        },
        {
            "message": "Missing item type\nFind the angle of a segment from (x1, y1) -> (x2, y2 )",
            "line": " math\\Math.js:233"
        },
        {
            "message": "Missing item type\nset an angle within the bounds of -PI to PI",
            "line": " math\\Math.js:240"
        },
        {
            "message": "Missing item type\nclosest angle between two angles from a1 to a2\nabsolute value the return for exact angle",
            "line": " math\\Math.js:252"
        },
        {
            "message": "Missing item type\ninterpolate across the shortest arc between two angles",
            "line": " math\\Math.js:278"
        },
        {
            "message": "Missing item type\nGenerate a random bool result based on the chance value\n<p>\nReturns true or false based on the chance value (default 50%). For example if you wanted a player to have a 30% chance\nof getting a bonus, call chanceRoll(30) - true means the chance passed, false means it failed.\n</p>",
            "line": " math\\Math.js:293"
        },
        {
            "message": "Missing item type\nReturns an Array containing the numbers from min to max (inclusive)",
            "line": " math\\Math.js:328"
        },
        {
            "message": "Missing item type\nAdds the given amount to the value, but never lets the value go over the specified maximum",
            "line": " math\\Math.js:348"
        },
        {
            "message": "Missing item type\nSubtracts the given amount from the value, but never lets the value go below the specified minimum",
            "line": " math\\Math.js:369"
        },
        {
            "message": "Missing item type\nAdds value to amount and ensures that the result always stays between 0 and max, by wrapping the value around.\n<p>Values must be positive integers, and are passed through Math.abs</p>",
            "line": " math\\Math.js:390"
        },
        {
            "message": "Missing item type\nRandomly returns either a 1 or -1",
            "line": " math\\Math.js:411"
        },
        {
            "message": "Missing item type\nReturns true if the number given is odd.",
            "line": " math\\Math.js:420"
        },
        {
            "message": "Missing item type\nReturns true if the number given is even.",
            "line": " math\\Math.js:433"
        },
        {
            "message": "Missing item type\nSignificantly faster version of Math.max\nSee http://jsperf.com/math-s-min-max-vs-homemade/5",
            "line": " math\\Math.js:453"
        },
        {
            "message": "Missing item type\nSignificantly faster version of Math.min\nSee http://jsperf.com/math-s-min-max-vs-homemade/5",
            "line": " math\\Math.js:473"
        },
        {
            "message": "Missing item type\nKeeps an angle value between -180 and +180<br>\nShould be called whenever the angle is updated on the Sprite to stop it from going insane.",
            "line": " math\\Math.js:493"
        },
        {
            "message": "Missing item type\nKeeps an angle value between the given min and max values",
            "line": " math\\Math.js:523"
        },
        {
            "message": "Missing item type\nFetch a random entry from the given array.\nWill return null if random selection is missing, or array has no entries.",
            "line": " math\\Math.js:643"
        },
        {
            "message": "Missing item type\nRound down to the next whole number. E.g. floor(1.7) == 1, and floor(-2.7) == -2.",
            "line": " math\\Math.js:677"
        },
        {
            "message": "Missing item type\nRound up to the next whole number.  E.g. ceil(1.3) == 2, and ceil(-2.3) == -3.",
            "line": " math\\Math.js:692"
        },
        {
            "message": "Missing item type\nGenerate a sine and cosine table simultaneously and extremely quickly. Based on research by Franky of scene.at\n<p>\nThe parameters allow you to specify the length, amplitude and frequency of the wave. Once you have called this function\nyou should get the results via getSinTable() and getCosTable(). This generator is fast enough to be used in real-time.\n</p>",
            "line": " math\\Math.js:704"
        },
        {
            "message": "Missing item type\nRemoves the top element from the stack and re-inserts it onto the bottom, then returns it.\nThe original stack is modified in the process.\nThis effectively moves the position of the data from the start to the end of the table.",
            "line": " math\\Math.js:745"
        },
        {
            "message": "Missing item type\nShuffles the data in the given array into a new order",
            "line": " math\\Math.js:760"
        },
        {
            "message": "Missing item type\nforce a value within the boundaries of two values\n\nClamp value to range <a, b>",
            "line": " math\\Math.js:803"
        },
        {
            "message": "Missing item type\na value representing the sign of the value.\n-1 for negative, +1 for positive, 0 if value is 0",
            "line": " math\\Math.js:854"
        },
        {
            "message": "Missing item type\nPhaser.RandomDataGenerator\n\nAn extremely useful repeatable random data generator. Access it via Phaser.Game.rnd\nBased on Nonsense by Josh Faul https://github.com/jocafa/Nonsense\nRandom number generator from http://baagoe.org/en/wiki/Better_random_numbers_for_javascript",
            "line": " math\\RandomDataGenerator.js:1"
        },
        {
            "message": "Missing item type\nReturns the hostname given by the browser.",
            "line": " net\\Net.js:9"
        },
        {
            "message": "Missing item type\nCompares the given domain name against the hostname of the browser containing the game.\nIf the domain name is found it returns true.\nYou can specify a part of a domain, for example 'google' would match 'google.com', 'google.co.uk', etc.\nDo not include 'http://' at the start.",
            "line": " net\\Net.js:22"
        },
        {
            "message": "Missing item type\nUpdates a value on the Query String and returns it in full.\nIf the value doesn't already exist it is set.\nIf the value exists it is replaced with the new value given. If you don't provide a new value it is removed from the query string.\nOptionally you can redirect to the new url, or just return it as a string.",
            "line": " net\\Net.js:32"
        },
        {
            "message": "Missing item type\nReturns the Query String as an object.\nIf you specify a parameter it will return just the value of that parameter, should it exist.",
            "line": " net\\Net.js:93"
        },
        {
            "message": "Missing item type\nPhaser - ArcadeEmitter\n\nEmitter is a lightweight particle emitter. It can be used for one-time explosions or for\ncontinuous effects like rain and fire. All it really does is launch Particle objects out\nat set intervals, and fixes their positions and velocities accorindgly.",
            "line": " particles\\arcade\\Emitter.js:1"
        },
        {
            "message": "Missing item type\nThe X position of the top left corner of the emitter in world space.",
            "line": " particles\\arcade\\Emitter.js:19"
        },
        {
            "message": "Missing item type\nThe Y position of the top left corner of emitter in world space.",
            "line": " particles\\arcade\\Emitter.js:24"
        },
        {
            "message": "Missing item type\nThe width of the emitter.  Particles can be randomly generated from anywhere within this box.",
            "line": " particles\\arcade\\Emitter.js:29"
        },
        {
            "message": "Missing item type\nThe height of the emitter.  Particles can be randomly generated from anywhere within this box.",
            "line": " particles\\arcade\\Emitter.js:34"
        },
        {
            "message": "Missing item type\nThe minimum possible velocity of a particle.\nThe default value is (-100,-100).",
            "line": " particles\\arcade\\Emitter.js:39"
        },
        {
            "message": "Missing item type\nThe maximum possible velocity of a particle.\nThe default value is (100,100).",
            "line": " particles\\arcade\\Emitter.js:45"
        },
        {
            "message": "Missing item type\nThe minimum possible scale of a particle.\nThe default value is 1.",
            "line": " particles\\arcade\\Emitter.js:51"
        },
        {
            "message": "Missing item type\nThe maximum possible scale of a particle.\nThe default value is 1.",
            "line": " particles\\arcade\\Emitter.js:57"
        },
        {
            "message": "Missing item type\nThe minimum possible angular velocity of a particle.  The default value is -360.",
            "line": " particles\\arcade\\Emitter.js:63"
        },
        {
            "message": "Missing item type\nThe maximum possible angular velocity of a particle.  The default value is 360.",
            "line": " particles\\arcade\\Emitter.js:68"
        },
        {
            "message": "Missing item type\nSets the <code>gravity.y</code> of each particle to this value on launch.",
            "line": " particles\\arcade\\Emitter.js:73"
        },
        {
            "message": "Missing item type\nSet your own particle class type here.\nDefault is <code>Particle</code>.",
            "line": " particles\\arcade\\Emitter.js:78"
        },
        {
            "message": "Missing item type\nThe X and Y drag component of particles launched from the emitter.",
            "line": " particles\\arcade\\Emitter.js:84"
        },
        {
            "message": "Missing item type\nThe angular drag component of particles launched from the emitter if they are rotating.",
            "line": " particles\\arcade\\Emitter.js:89"
        },
        {
            "message": "Missing item type\nHow often a particle is emitted in ms (if emitter is started with Explode == false).",
            "line": " particles\\arcade\\Emitter.js:94"
        },
        {
            "message": "Missing item type\nThe total number of particles in this emitter.",
            "line": " particles\\arcade\\Emitter.js:99"
        },
        {
            "message": "Missing item type\nHow long each particle lives once it is emitted in ms. Default is 2 seconds.\nSet lifespan to 'zero' for particles to live forever.",
            "line": " particles\\arcade\\Emitter.js:104"
        },
        {
            "message": "Missing item type\nHow much each particle should bounce on each axis.  1 = full bounce, 0 = no bounce.",
            "line": " particles\\arcade\\Emitter.js:110"
        },
        {
            "message": "Missing item type\nInternal helper for deciding how many particles to launch.",
            "line": " particles\\arcade\\Emitter.js:115"
        },
        {
            "message": "Missing item type\nInternal helper for deciding when to launch particles or kill them.",
            "line": " particles\\arcade\\Emitter.js:120"
        },
        {
            "message": "Missing item type\nInternal counter for figuring out how many particles to launch.",
            "line": " particles\\arcade\\Emitter.js:125"
        },
        {
            "message": "Missing item type\nInternal helper for the style of particle emission (all at once, or one at a time).",
            "line": " particles\\arcade\\Emitter.js:130"
        },
        {
            "message": "Missing item type\nDetermines whether the emitter is currently emitting particles.\nIt is totally safe to directly toggle this.",
            "line": " particles\\arcade\\Emitter.js:135"
        },
        {
            "message": "Missing item type\nDetermines whether the emitter is being updated by the core game loop.",
            "line": " particles\\arcade\\Emitter.js:141"
        },
        {
            "message": "Missing item type\nThe point the particles are emitted from.\nEmitter.x and Emitter.y control the containers location, which updates all current particles\nEmitter.emitX and Emitter.emitY control the emission location relative to the x/y position.",
            "line": " particles\\arcade\\Emitter.js:146"
        },
        {
            "message": "Missing item type\nCalled automatically by the game loop, decides when to launch particles and when to \"die\".",
            "line": " particles\\arcade\\Emitter.js:159"
        },
        {
            "message": "Missing item type\nThis function generates a new array of particle sprites to attach to the emitter.",
            "line": " particles\\arcade\\Emitter.js:202"
        },
        {
            "message": "Missing item type\nCall this function to turn off all the particles and the emitter.",
            "line": " particles\\arcade\\Emitter.js:279"
        },
        {
            "message": "Missing item type\nHandy for bringing game objects \"back to life\". Just sets alive and exists back to true.\nIn practice, this is most often called by <code>Object.reset()</code>.",
            "line": " particles\\arcade\\Emitter.js:290"
        },
        {
            "message": "Missing item type\nCall this function to start emitting particles.",
            "line": " particles\\arcade\\Emitter.js:301"
        },
        {
            "message": "Missing item type\nThis function can be used both internally and externally to emit the next particle.",
            "line": " particles\\arcade\\Emitter.js:347"
        },
        {
            "message": "Missing item type\nA more compact way of setting the width and height of the emitter.",
            "line": " particles\\arcade\\Emitter.js:413"
        },
        {
            "message": "Missing item type\nA more compact way of setting the X velocity range of the emitter.",
            "line": " particles\\arcade\\Emitter.js:426"
        },
        {
            "message": "Missing item type\nA more compact way of setting the Y velocity range of the emitter.",
            "line": " particles\\arcade\\Emitter.js:442"
        },
        {
            "message": "Missing item type\nA more compact way of setting the angular velocity constraints of the emitter.",
            "line": " particles\\arcade\\Emitter.js:458"
        },
        {
            "message": "Missing item type\nChange the emitter's midpoint to match the midpoint of a <code>Object</code>.",
            "line": " particles\\arcade\\Emitter.js:474"
        },
        {
            "message": "Missing item type\nGet the emitter alpha.",
            "line": " particles\\arcade\\Emitter.js:488"
        },
        {
            "message": "Missing item type\nSet the emiter alpha value.",
            "line": " particles\\arcade\\Emitter.js:495"
        },
        {
            "message": "Missing item type\nGet the emitter visible state.",
            "line": " particles\\arcade\\Emitter.js:506"
        },
        {
            "message": "Missing item type\nSet the emitter visible state.",
            "line": " particles\\arcade\\Emitter.js:513"
        },
        {
            "message": "Missing item type\nUsed by the QuadTree to set the maximum number of objects",
            "line": " physics\\arcade\\ArcadePhysics.js:10"
        },
        {
            "message": "Missing item type\nUsed by the QuadTree to set the maximum number of levels",
            "line": " physics\\arcade\\ArcadePhysics.js:16"
        },
        {
            "message": "Missing item type\nA tween-like function that takes a starting velocity and some other factors and returns an altered velocity.",
            "line": " physics\\arcade\\ArcadePhysics.js:67"
        },
        {
            "message": "Missing item type\nChecks for collision between two game objects. The objects can be Sprites, Groups, Emitters or Tilemaps.\nYou can perform Sprite vs. Sprite, Sprite vs. Group, Group vs. Group, Sprite vs. Tilemap or Group vs. Tilemap collisions.",
            "line": " physics\\arcade\\ArcadePhysics.js:146"
        },
        {
            "message": "Missing item type\nThe core separation function to separate two physics bodies.",
            "line": " physics\\arcade\\ArcadePhysics.js:373"
        },
        {
            "message": "Missing item type\nSeparates the two physics bodies on their X axis",
            "line": " physics\\arcade\\ArcadePhysics.js:391"
        },
        {
            "message": "Missing item type\nSeparates the two physics bodies on their Y axis",
            "line": " physics\\arcade\\ArcadePhysics.js:501"
        },
        {
            "message": "Missing item type\nThe core Collision separation function used by Collision.overlap.",
            "line": " physics\\arcade\\ArcadePhysics.js:621"
        },
        {
            "message": "Missing item type\nSeparates the two objects on their x axis",
            "line": " physics\\arcade\\ArcadePhysics.js:642"
        },
        {
            "message": "Missing item type\nSeparates the two objects on their x axis",
            "line": " physics\\arcade\\ArcadePhysics.js:729"
        },
        {
            "message": "Missing item type\nGiven the angle and speed calculate the velocity and return it as a Point",
            "line": " physics\\arcade\\ArcadePhysics.js:817"
        },
        {
            "message": "Missing item type\nSets the source Sprite x/y velocity so it will move directly towards the destination Sprite at the speed given (in pixels per second)<br>\nIf you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.<br>\nTimings are approximate due to the way Flash timers work, and irrespective of SWF frame rate. Allow for a variance of +- 50ms.<br>\nThe source object doesn't stop moving automatically should it ever reach the destination coordinates.<br>\nIf you need the object to accelerate, see accelerateTowardsObject() instead\nNote: Doesn't take into account acceleration, maxVelocity or drag (if you set drag or acceleration too high this object may not move at all)",
            "line": " physics\\arcade\\ArcadePhysics.js:836"
        },
        {
            "message": "Missing item type\nSets the x/y acceleration on the source Sprite so it will move towards the destination Sprite at the speed given (in pixels per second)<br>\nYou must give a maximum speed value, beyond which the Sprite won't go any faster.<br>\nIf you don't need acceleration look at moveTowardsObject() instead.",
            "line": " physics\\arcade\\ArcadePhysics.js:869"
        },
        {
            "message": "Missing item type\nMove the given Sprite towards the mouse pointer coordinates at a steady velocity\nIf you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.<br>\nTimings are approximate due to the way Flash timers work, and irrespective of SWF frame rate. Allow for a variance of +- 50ms.<br>\nThe source object doesn't stop moving automatically should it ever reach the destination coordinates.<br>",
            "line": " physics\\arcade\\ArcadePhysics.js:898"
        },
        {
            "message": "Missing item type\nSets the x/y acceleration on the source Sprite so it will move towards the mouse coordinates at the speed given (in pixels per second)<br>\nYou must give a maximum speed value, beyond which the Sprite won't go any faster.<br>\nIf you don't need acceleration look at moveTowardsMouse() instead.",
            "line": " physics\\arcade\\ArcadePhysics.js:928"
        },
        {
            "message": "Missing item type\nSets the x/y velocity on the source Sprite so it will move towards the target coordinates at the speed given (in pixels per second)<br>\nIf you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.<br>\nTimings are approximate due to the way Flash timers work, and irrespective of SWF frame rate. Allow for a variance of +- 50ms.<br>\nThe source object doesn't stop moving automatically should it ever reach the destination coordinates.<br>",
            "line": " physics\\arcade\\ArcadePhysics.js:956"
        },
        {
            "message": "Missing item type\nSets the x/y acceleration on the source Sprite so it will move towards the target coordinates at the speed given (in pixels per second)<br>\nYou must give a maximum speed value, beyond which the Sprite won't go any faster.<br>\nIf you don't need acceleration look at moveTowardsPoint() instead.",
            "line": " physics\\arcade\\ArcadePhysics.js:987"
        },
        {
            "message": "Missing item type\nFind the distance (in pixels, rounded) between two Sprites, taking their origin into account",
            "line": " physics\\arcade\\ArcadePhysics.js:1016"
        },
        {
            "message": "Missing item type\nFind the distance (in pixels, rounded) from an Sprite to the given Point, taking the source origin into account",
            "line": " physics\\arcade\\ArcadePhysics.js:1032"
        },
        {
            "message": "Missing item type\nFind the distance (in pixels, rounded) from the object x/y and the mouse x/y",
            "line": " physics\\arcade\\ArcadePhysics.js:1048"
        },
        {
            "message": "Missing item type\nFind the angle (in radians) between an Sprite and an Point. The source sprite takes its x/y and origin into account.\nThe angle is calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)",
            "line": " physics\\arcade\\ArcadePhysics.js:1063"
        },
        {
            "message": "Missing item type\nFind the angle (in radians) between the two Sprite, taking their x/y and origin into account.\nThe angle is calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)",
            "line": " physics\\arcade\\ArcadePhysics.js:1091"
        },
        {
            "message": "Missing item type\nGiven the GameObject and speed calculate the velocity and return it as an Point based on the direction the sprite is facing",
            "line": " physics\\arcade\\ArcadePhysics.js:1119"
        },
        {
            "message": "Missing item type\nFind the angle (in radians) between an Sprite and the mouse, taking their x/y and origin into account.\nThe angle is calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)",
            "line": " physics\\arcade\\ArcadePhysics.js:1154"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\core\\Circle.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\core\\Ellipse.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\core\\Point.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\core\\Polygon.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\core\\Rectangle.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\display\\DisplayObject.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\display\\DisplayObjectContainer.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\display\\MovieClip.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\display\\Sprite.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\display\\Stage.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\CustomRenderable.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Rope.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:1"
        },
        {
            "message": "Missing item type\ncx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of",
            "line": " pixi\\extras\\Spine.js:327"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:618"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:625"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:632"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:640"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:647"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:654"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:689"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:697"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:712"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:716"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:723"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:730"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:737"
        },
        {
            "message": "Missing item type\nfrom the new skin are attached if the corresponding attachment from the old skin was attached.",
            "line": " pixi\\extras\\Spine.js:749"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:756"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:760"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:769"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:960"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:966"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:972"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:978"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:996"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Spine.js:1415"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\Strip.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\extras\\TilingSprite.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\filters\\FilterBlock.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\filters\\MaskFilter.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\loaders\\AssetLoader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\loaders\\BitmapFontLoader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\loaders\\ImageLoader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\loaders\\JsonLoader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\loaders\\SpineLoader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\loaders\\SpriteSheetLoader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\primitives\\Graphics.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\canvas\\CanvasGraphics.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\canvas\\CanvasRenderer.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLBatch.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLBatch.js:7"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLBatch.js:22"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLBatch.js:31"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLGraphics.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLRenderGroup.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLRenderer.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\renderers\\webgl\\WebGLShaders.js:2"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\text\\BitmapText.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\text\\Text.js:1"
        },
        {
            "message": "Missing item type\nSet the copy for the text object. To split a line you can use \"\\n\"",
            "line": " pixi\\text\\Text.js:65"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\textures\\BaseTexture.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\textures\\RenderTexture.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\textures\\Texture.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\utils\\Detector.js:1"
        },
        {
            "message": "Missing item type\nhttps://github.com/mrdoob/eventtarget.js/\nTHankS mr DOob!",
            "line": " pixi\\utils\\EventTarget.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\InteractionManager.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\Intro.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\Outro.js:1"
        },
        {
            "message": "Missing item type",
            "line": " pixi\\Pixi.js:1"
        },
        {
            "message": "Missing item type\nDecoded data buffer / Audio tag.",
            "line": " sound\\Sound.js:73"
        },
        {
            "message": "Missing item type\nPhaser - Device\n\nDetects device support capabilities. Using some elements from System.js by MrDoob and Modernizr\nhttps://github.com/Modernizr/Modernizr/blob/master/feature-detects/audio.js",
            "line": " system\\Device.js:1"
        },
        {
            "message": "Missing item type\nAn optional 'fix' for the horrendous Android stock browser bug\nhttps://code.google.com/p/android/issues/detail?id=39247",
            "line": " system\\Device.js:10"
        },
        {
            "message": "Missing item type\nIs running desktop?",
            "line": " system\\Device.js:19"
        },
        {
            "message": "Missing item type\nIs running on iOS?",
            "line": " system\\Device.js:25"
        },
        {
            "message": "Missing item type\nIs running on android?",
            "line": " system\\Device.js:31"
        },
        {
            "message": "Missing item type\nIs running on chromeOS?",
            "line": " system\\Device.js:37"
        },
        {
            "message": "Missing item type\nIs running on linux?",
            "line": " system\\Device.js:43"
        },
        {
            "message": "Missing item type\nIs running on maxOS?",
            "line": " system\\Device.js:49"
        },
        {
            "message": "Missing item type\nIs running on windows?",
            "line": " system\\Device.js:55"
        },
        {
            "message": "Missing item type\nIs canvas available?",
            "line": " system\\Device.js:63"
        },
        {
            "message": "Missing item type\nIs file available?",
            "line": " system\\Device.js:69"
        },
        {
            "message": "Missing item type\nIs fileSystem available?",
            "line": " system\\Device.js:75"
        },
        {
            "message": "Missing item type\nIs localStorage available?",
            "line": " system\\Device.js:81"
        },
        {
            "message": "Missing item type\nIs webGL available?",
            "line": " system\\Device.js:87"
        },
        {
            "message": "Missing item type\nIs worker available?",
            "line": " system\\Device.js:93"
        },
        {
            "message": "Missing item type\nIs touch available?",
            "line": " system\\Device.js:99"
        },
        {
            "message": "Missing item type\nIs mspointer available?",
            "line": " system\\Device.js:105"
        },
        {
            "message": "Missing item type\nIs css3D available?",
            "line": " system\\Device.js:111"
        },
        {
            "message": "Missing item type\nIs Pointer Lock available?",
            "line": " system\\Device.js:117"
        },
        {
            "message": "Missing item type\nIs running in arora?",
            "line": " system\\Device.js:125"
        },
        {
            "message": "Missing item type\nIs running in chrome?",
            "line": " system\\Device.js:131"
        },
        {
            "message": "Missing item type\nIs running in epiphany?",
            "line": " system\\Device.js:137"
        },
        {
            "message": "Missing item type\nIs running in firefox?",
            "line": " system\\Device.js:143"
        },
        {
            "message": "Missing item type\nIs running in ie?",
            "line": " system\\Device.js:149"
        },
        {
            "message": "Missing item type\nVersion of ie?",
            "line": " system\\Device.js:155"
        },
        {
            "message": "Missing item type\nIs running in mobileSafari?",
            "line": " system\\Device.js:161"
        },
        {
            "message": "Missing item type\nIs running in midori?",
            "line": " system\\Device.js:167"
        },
        {
            "message": "Missing item type\nIs running in opera?",
            "line": " system\\Device.js:173"
        },
        {
            "message": "Missing item type\nIs running in safari?",
            "line": " system\\Device.js:179"
        },
        {
            "message": "Missing item type\nAre Audio tags available?",
            "line": " system\\Device.js:188"
        },
        {
            "message": "Missing item type\nIs the WebAudio API available?",
            "line": " system\\Device.js:194"
        },
        {
            "message": "Missing item type\nCan this device play ogg files?",
            "line": " system\\Device.js:200"
        },
        {
            "message": "Missing item type\nCan this device play opus files?",
            "line": " system\\Device.js:206"
        },
        {
            "message": "Missing item type\nCan this device play mp3 files?",
            "line": " system\\Device.js:212"
        },
        {
            "message": "Missing item type\nCan this device play wav files?",
            "line": " system\\Device.js:218"
        },
        {
            "message": "Missing item type\nCan this device play m4a files?",
            "line": " system\\Device.js:223"
        },
        {
            "message": "Missing item type\nCan this device play webm files?",
            "line": " system\\Device.js:229"
        },
        {
            "message": "Missing item type\nIs running on iPhone?",
            "line": " system\\Device.js:237"
        },
        {
            "message": "Missing item type\nIs running on iPhone4?",
            "line": " system\\Device.js:243"
        },
        {
            "message": "Missing item type\nIs running on iPad?",
            "line": " system\\Device.js:249"
        },
        {
            "message": "Missing item type\nPixelRatio of the host device?",
            "line": " system\\Device.js:255"
        },
        {
            "message": "Missing item type\nCheck which OS is game running on.",
            "line": " system\\Device.js:273"
        },
        {
            "message": "Missing item type\nCheck HTML5 features of the host environment.",
            "line": " system\\Device.js:301"
        },
        {
            "message": "Missing item type\nCheck what browser is game running in.",
            "line": " system\\Device.js:333"
        },
        {
            "message": "Missing item type\nCheck audio support.",
            "line": " system\\Device.js:369"
        },
        {
            "message": "Missing item type\nCheck PixelRatio of devices.",
            "line": " system\\Device.js:415"
        },
        {
            "message": "Missing item type\nCheck whether the host environment support 3D CSS.",
            "line": " system\\Device.js:428"
        },
        {
            "message": "Missing item type\nPhaser - RequestAnimationFrame\n\nAbstracts away the use of RAF or setTimeOut for the core game update loop.",
            "line": " system\\RequestAnimationFrame.js:1"
        },
        {
            "message": "Missing item type\nThe function called by the update",
            "line": " system\\RequestAnimationFrame.js:29"
        },
        {
            "message": "Missing item type\nStage height when start the game.",
            "line": " system\\StageScaleMode.js:3"
        },
        {
            "message": "Missing item type\nIf the game should be forced to use Landscape mode, this is set to true by Game.Stage",
            "line": " system\\StageScaleMode.js:9"
        },
        {
            "message": "Missing item type\nIf the game should be forced to use Portrait mode, this is set to true by Game.Stage",
            "line": " system\\StageScaleMode.js:15"
        },
        {
            "message": "Missing item type\nIf the game should be forced to use a specific orientation and the device currently isn't in that orientation this is set to true.",
            "line": " system\\StageScaleMode.js:21"
        },
        {
            "message": "Missing item type\nIf you wish to align your game in the middle of the page then you can set this value to true.\nIt will place a re-calculated margin-left pixel value onto the canvas element which is updated on orientation/resizing.\nIt doesn't care about any other DOM element that may be on the page, it literally just sets the margin.",
            "line": " system\\StageScaleMode.js:27"
        },
        {
            "message": "Missing item type\nIf you wish to align your game in the middle of the page then you can set this value to true.\nIt will place a re-calculated margin-left pixel value onto the canvas element which is updated on orientation/resizing.\nIt doesn't care about any other DOM element that may be on the page, it literally just sets the margin.",
            "line": " system\\StageScaleMode.js:35"
        },
        {
            "message": "Missing item type\nMinimum width the canvas should be scaled to (in pixels)",
            "line": " system\\StageScaleMode.js:43"
        },
        {
            "message": "Missing item type\nMaximum width the canvas should be scaled to (in pixels).\nIf null it will scale to whatever width the browser can handle.",
            "line": " system\\StageScaleMode.js:49"
        },
        {
            "message": "Missing item type\nMinimum height the canvas should be scaled to (in pixels)",
            "line": " system\\StageScaleMode.js:56"
        },
        {
            "message": "Missing item type\nMaximum height the canvas should be scaled to (in pixels).\nIf null it will scale to whatever height the browser can handle.",
            "line": " system\\StageScaleMode.js:62"
        },
        {
            "message": "Missing item type\nWidth of the stage after calculation.",
            "line": " system\\StageScaleMode.js:69"
        },
        {
            "message": "Missing item type\nHeight of the stage after calculation.",
            "line": " system\\StageScaleMode.js:75"
        },
        {
            "message": "Missing item type\nThe maximum number of times it will try to resize the canvas to fill the browser (default is 5)",
            "line": " system\\StageScaleMode.js:81"
        },
        {
            "message": "Missing item type\nHandle window.orientationchange events",
            "line": " system\\StageScaleMode.js:197"
        },
        {
            "message": "Missing item type\nHandle window.resize events",
            "line": " system\\StageScaleMode.js:220"
        },
        {
            "message": "Missing item type\nRe-calculate scale mode and update screen size.",
            "line": " system\\StageScaleMode.js:249"
        },
        {
            "message": "Missing item type\nSet screen size automatically based on the scaleMode.",
            "line": " system\\StageScaleMode.js:283"
        },
        {
            "message": "Missing item type\nPhaser - Tile\n\nA Tile is a single representation of a tile within a Tilemap",
            "line": " tilemap\\Tile.js:1"
        },
        {
            "message": "Missing item type\nTile constructor\nCreate a new <code>Tile</code>.",
            "line": " tilemap\\Tile.js:7"
        },
        {
            "message": "Missing item type\nThe virtual mass of the tile.",
            "line": " tilemap\\Tile.js:18"
        },
        {
            "message": "Missing item type\nIndicating this Tile doesn't collide at all.",
            "line": " tilemap\\Tile.js:24"
        },
        {
            "message": "Missing item type\nIndicating collide with any object on the left.",
            "line": " tilemap\\Tile.js:30"
        },
        {
            "message": "Missing item type\nIndicating collide with any object on the right.",
            "line": " tilemap\\Tile.js:36"
        },
        {
            "message": "Missing item type\nIndicating collide with any object on the top.",
            "line": " tilemap\\Tile.js:42"
        },
        {
            "message": "Missing item type\nIndicating collide with any object on the bottom.",
            "line": " tilemap\\Tile.js:48"
        },
        {
            "message": "Missing item type\nEnable separation at x-axis.",
            "line": " tilemap\\Tile.js:54"
        },
        {
            "message": "Missing item type\nEnable separation at y-axis.",
            "line": " tilemap\\Tile.js:60"
        },
        {
            "message": "Missing item type\nClean up memory.",
            "line": " tilemap\\Tile.js:76"
        },
        {
            "message": "Missing item type\nSet collision configs.",
            "line": " tilemap\\Tile.js:83"
        },
        {
            "message": "Missing item type\nReset collision status flags.",
            "line": " tilemap\\Tile.js:113"
        },
        {
            "message": "Missing item type\nPhaser - Tilemap\n\nThis GameObject allows for the display of a tilemap within the game world. Tile maps consist of an image, tile data and a size.\nInternally it creates a TilemapLayer for each layer in the tilemap.",
            "line": " tilemap\\Tilemap.js:1"
        },
        {
            "message": "Missing item type\nTilemap constructor\nCreate a new <code>Tilemap</code>.",
            "line": " tilemap\\Tilemap.js:8"
        },
        {
            "message": "Missing item type\nRender iteration counter",
            "line": " tilemap\\Tilemap.js:31"
        },
        {
            "message": "Missing item type\nTilemap collision callback.",
            "line": " tilemap\\Tilemap.js:36"
        },
        {
            "message": "Missing item type\nParset csv map data and generate tiles.",
            "line": " tilemap\\Tilemap.js:85"
        },
        {
            "message": "Missing item type\nParse JSON map data and generate tiles.",
            "line": " tilemap\\Tilemap.js:124"
        },
        {
            "message": "Missing item type\nCreate tiles of given quantity.",
            "line": " tilemap\\Tilemap.js:180"
        },
        {
            "message": "Missing item type\nSet callback to be called when this tilemap collides.",
            "line": " tilemap\\Tilemap.js:193"
        },
        {
            "message": "Missing item type\nSet collision configs of tiles in a range index.",
            "line": " tilemap\\Tilemap.js:205"
        },
        {
            "message": "Missing item type\nSet collision configs of tiles with given index.",
            "line": " tilemap\\Tilemap.js:227"
        },
        {
            "message": "Missing item type\nGet the tile by its index.",
            "line": " tilemap\\Tilemap.js:250"
        },
        {
            "message": "Missing item type\nGet the tile located at specific position and layer.",
            "line": " tilemap\\Tilemap.js:266"
        },
        {
            "message": "Missing item type\nGet the tile located at specific position (in world coordinate) and layer. (thus you give a position of a point which is within the tile)",
            "line": " tilemap\\Tilemap.js:281"
        },
        {
            "message": "Missing item type\nGets the tile underneath the Input.x/y position",
            "line": " tilemap\\Tilemap.js:296"
        },
        {
            "message": "Missing item type\nGet tiles overlaps the given object.",
            "line": " tilemap\\Tilemap.js:309"
        },
        {
            "message": "Missing item type\nCheck whether this tilemap collides with the given game object or group of objects.",
            "line": " tilemap\\Tilemap.js:322"
        },
        {
            "message": "Missing item type\nCheck whether this tilemap collides with the given game object.",
            "line": " tilemap\\Tilemap.js:352"
        },
        {
            "message": "Missing item type\nSet a tile to a specific layer.",
            "line": " tilemap\\Tilemap.js:382"
        },
        {
            "message": "Missing item type\nCalls the renderer",
            "line": " tilemap\\Tilemap.js:397"
        },
        {
            "message": "Missing item type\nPhaser - TilemapLayer\n\nA Tilemap Layer. Tiled format maps can have multiple overlapping layers.",
            "line": " tilemap\\TilemapLayer.js:1"
        },
        {
            "message": "Missing item type\nTilemapLayer constructor\nCreate a new <code>TilemapLayer</code>.",
            "line": " tilemap\\TilemapLayer.js:7"
        },
        {
            "message": "Missing item type\nControls whether update() and draw() are automatically called.",
            "line": " tilemap\\TilemapLayer.js:21"
        },
        {
            "message": "Missing item type\nControls whether draw() are automatically called.",
            "line": " tilemap\\TilemapLayer.js:27"
        },
        {
            "message": "Missing item type\nHow many tiles in each row.\nRead-only variable, do NOT recommend changing after the map is loaded!",
            "line": " tilemap\\TilemapLayer.js:33"
        },
        {
            "message": "Missing item type\nHow many tiles in each column.\nRead-only variable, do NOT recommend changing after the map is loaded!",
            "line": " tilemap\\TilemapLayer.js:40"
        },
        {
            "message": "Missing item type\nRead-only variable, do NOT recommend changing after the map is loaded!",
            "line": " tilemap\\TilemapLayer.js:47"
        },
        {
            "message": "Missing item type\nRead-only variable, do NOT recommend changing after the map is loaded!",
            "line": " tilemap\\TilemapLayer.js:53"
        },
        {
            "message": "Missing item type\nDistance between REAL tiles to the tileset texture bound.",
            "line": " tilemap\\TilemapLayer.js:59"
        },
        {
            "message": "Missing item type\nDistance between every 2 neighbor tile in the tileset texture.",
            "line": " tilemap\\TilemapLayer.js:65"
        },
        {
            "message": "Missing item type\nSet a specific tile with its x and y in tiles.",
            "line": " tilemap\\TilemapLayer.js:104"
        },
        {
            "message": "Missing item type\nSet a specific tile with its x and y in tiles.",
            "line": " tilemap\\TilemapLayer.js:125"
        },
        {
            "message": "Missing item type\nSwap tiles with 2 kinds of indexes.",
            "line": " tilemap\\TilemapLayer.js:143"
        },
        {
            "message": "Missing item type\nFill a tile block with a specific tile index.",
            "line": " tilemap\\TilemapLayer.js:187"
        },
        {
            "message": "Missing item type\nSet random tiles to a specific tile block.",
            "line": " tilemap\\TilemapLayer.js:211"
        },
        {
            "message": "Missing item type\nReplace one kind of tiles to another kind.",
            "line": " tilemap\\TilemapLayer.js:235"
        },
        {
            "message": "Missing item type\nGet a tile block with specific position and size.(both are in tiles)",
            "line": " tilemap\\TilemapLayer.js:263"
        },
        {
            "message": "Missing item type\nGet a tile with specific position (in world coordinate). (thus you give a position of a point which is within the tile)",
            "line": " tilemap\\TilemapLayer.js:289"
        },
        {
            "message": "Missing item type\nGet tiles overlaps the given object.",
            "line": " tilemap\\TilemapLayer.js:303"
        },
        {
            "message": "Missing item type\nGet a tile block with its position and size. (This method does not return, it'll set result to _tempTileBlock)",
            "line": " tilemap\\TilemapLayer.js:340"
        },
        {
            "message": "Missing item type\nGet the tile index of specific position (in tiles).",
            "line": " tilemap\\TilemapLayer.js:405"
        },
        {
            "message": "Missing item type\nAdd a column of tiles into the layer.",
            "line": " tilemap\\TilemapLayer.js:425"
        },
        {
            "message": "Missing item type\nUpdate boundsInTiles with widthInTiles and heightInTiles.",
            "line": " tilemap\\TilemapLayer.js:477"
        },
        {
            "message": "Missing item type\nParse tile offsets from map data.\nBasically this creates a large array of objects that contain the x/y coordinates to grab each tile from\nfor the entire map. Yes we could calculate this at run-time by using the tile index and some math, but we're\ntrading a quite small bit of memory here to not have to process that in our main render loop.",
            "line": " tilemap\\TilemapLayer.js:486"
        },
        {
            "message": "Missing item type\nRender a tilemap to a canvas.",
            "line": " tilemap\\TilemapRenderer.js:23"
        },
        {
            "message": "Missing item type\nTween constructor\nCreate a new <code>Tween</code>.",
            "line": " tween\\Tween.js:1"
        },
        {
            "message": "Missing item type\nReference to the target object.",
            "line": " tween\\Tween.js:11"
        },
        {
            "message": "Missing item type\nConfigure the Tween",
            "line": " tween\\Tween.js:55"
        },
        {
            "message": "Missing item type\nPhaser - TweenManager\n\nPhaser.Game has a single instance of the TweenManager through which all Tween objects are created and updated.\nTweens are hooked into the game clock and pause system, adjusting based on the game state.\n\nTweenManager is based heavily on tween.js by sole (http://soledadpenades.com).\nThe difference being that tweens belong to a games instance of TweenManager, rather than to a global TWEEN object.\nIt also has callbacks swapped for Signals and a few issues patched with regard to properties and completion errors.\nPlease see https://github.com/sole/tween.js for a full list of contributors.",
            "line": " tween\\TweenManager.js:1"
        },
        {
            "message": "Missing item type\nGet all the tween objects in an array.",
            "line": " tween\\TweenManager.js:27"
        },
        {
            "message": "Missing item type\nRemove all tween objects.",
            "line": " tween\\TweenManager.js:37"
        },
        {
            "message": "Missing item type\nAdd a new tween into the TweenManager.",
            "line": " tween\\TweenManager.js:46"
        },
        {
            "message": "Missing item type\nCreate a tween object for a specific object. The object can be any JavaScript object or Phaser object such as Sprite.",
            "line": " tween\\TweenManager.js:58"
        },
        {
            "message": "Missing item type\nRemove a tween from this manager.",
            "line": " tween\\TweenManager.js:70"
        },
        {
            "message": "Missing item type\nUpdate all the tween objects you added to this manager.",
            "line": " tween\\TweenManager.js:87"
        },
        {
            "message": "Missing item type\nPauses all currently running tweens.",
            "line": " tween\\TweenManager.js:126"
        },
        {
            "message": "Missing item type\nPauses all currently paused tweens.",
            "line": " tween\\TweenManager.js:137"
        },
        {
            "message": "Missing item type\nRender debug infos. (including id, position, rotation, scrolling factor, worldBounds and some other properties)",
            "line": " utils\\Debug.js:191"
        },
        {
            "message": "Missing item type\nRender debug infos. (including id, position, rotation, scrolling factor, worldBounds and some other properties)",
            "line": " utils\\Debug.js:226"
        },
        {
            "message": "Missing item type\nRender Sprite Input Debug information",
            "line": " utils\\Debug.js:303"
        },
        {
            "message": "Missing item type\nRender debug information about the Input object.",
            "line": " utils\\Debug.js:339"
        },
        {
            "message": "Missing item type\nRender debug infos. (including name, bounds info, position and some other properties)",
            "line": " utils\\Debug.js:364"
        },
        {
            "message": "Missing item type\nRender text",
            "line": " utils\\Debug.js:580"
        },
        {
            "message": "Missing item type\nPhaser - http://www.phaser.io\n\nv{version} - Built at: {buildDate}",
            "line": " Intro.js:1"
        }
    ]
}