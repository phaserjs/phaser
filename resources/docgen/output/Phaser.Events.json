{"class":{"name":"Phaser.Events","extends":"","static":false,"constructor":true,"parameters":[{"name":"sprite","type":["Phaser.Sprite"],"help":"A reference to the Sprite that owns this Events object.","optional":false,"default":null}],"help":"The Events component is a collection of events fired by the parent game object.\\n\\nFor example to tell when a Sprite has been added to a new group:\\n\\n`sprite.events.onAddedToGroup.add(yourFunction, this);`\\n\\nWhere `yourFunction` is the function you want called when this event occurs.\\n\\nNote that the Input related events only exist if the Sprite has had `inputEnabled` set to `true`."},"consts":[],"methods":{"public":[{"name":"destroy","static":false,"returns":null,"help":"Removes all events.","line":127,"public":true,"protected":false,"private":false,"parameters":[],"inherited":false,"inheritedFrom":""}],"protected":[],"private":[],"static":[]},"properties":{"public":[{"name":"onAddedToGroup","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent is added to a new Group.","line":32,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"onAnimationComplete","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent has an animation that finishes playing.","line":110,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onAnimationLoop","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent has an animation that loops playback.","line":116,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onAnimationStart","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent has an animation that is played.","line":104,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onDestroy","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent is destoyed.","line":42,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"onDragStart","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched if the parent is inputEnabled and receives a drag start event from a Pointer.","line":92,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onDragStop","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched if the parent is inputEnabled and receives a drag stop event from a Pointer.","line":98,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onEnterBounds","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent returns within the world bounds (only if Sprite.checkWorldBounds is true).","line":62,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"onInputDown","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched if the parent is inputEnabled and receives a down event from a Pointer.","line":80,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onInputOut","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched if the parent is inputEnabled and receives an out event from a Pointer.","line":74,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onInputOver","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched if the parent is inputEnabled and receives an over event from a Pointer.","line":68,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onInputUp","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched if the parent is inputEnabled and receives an up event from a Pointer.","line":86,"default":"null","public":true,"protected":false,"private":false,"readOnly":false},{"name":"onKilled","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent is killed.","line":47,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"onOutOfBounds","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent leaves the world bounds (only if Sprite.checkWorldBounds is true).","line":57,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"onRemovedFromGroup","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent is removed from a Group.","line":37,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"onRevived","type":["Phaser.Signal"],"help":"","inlineHelp":"This signal is dispatched when the parent is revived.","line":52,"default":null,"public":true,"protected":false,"private":false,"readOnly":false},{"name":"parent","type":["Phaser.Sprite"],"help":"","inlineHelp":"The Sprite that owns these events.","line":27,"default":null,"public":true,"protected":false,"private":false,"readOnly":false}],"protected":[],"private":[]}}